/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:58:47 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassSchedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.WeekDay;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassSchedule_ESTest extends ClassSchedule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassSchedule classSchedule0 = new ClassSchedule((WeekDay) null, "", (String) null);
      classSchedule0.getWeekDay();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.MONDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "81hg1yc", "81hg1yc");
      String string0 = classSchedule0.getStartHour();
      assertEquals("81hg1yc", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.THURSDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "", "$VALUES");
      classSchedule0.getStartHour();
      assertEquals("$VALUES", classSchedule0.getEndHour());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.FRIDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, ">K{mSV", "");
      String string0 = classSchedule0.getEndHour();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.WEDNESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "=", "=");
      ClassSchedule classSchedule1 = new ClassSchedule(weekDay0, "=", ">");
      boolean boolean0 = classSchedule0.equals(classSchedule1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.WEDNESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "", "");
      ClassSchedule classSchedule1 = new ClassSchedule(weekDay0, "", "");
      boolean boolean0 = classSchedule0.equals(classSchedule1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.WEDNESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "=K0@hL", "=K0@hL");
      WeekDay weekDay1 = WeekDay.SATURDAY;
      ClassSchedule classSchedule1 = new ClassSchedule(weekDay1, "ClassSchedule{weekDay=WEDNESDAY, startHour='=K0@hL', endHour='=K0@hL'}", "ClassSchedule{weekDay=WEDNESDAY, startHour='=K0@hL', endHour='=K0@hL'}");
      boolean boolean0 = classSchedule0.equals(classSchedule1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      ClassSchedule classSchedule1 = new ClassSchedule(weekDay0, "(Y", "(Y");
      boolean boolean0 = classSchedule0.equals(classSchedule1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.MONDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, (String) null, (String) null);
      boolean boolean0 = classSchedule0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      boolean boolean0 = classSchedule0.equals(classSchedule0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.WEDNESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "", "");
      Object object0 = new Object();
      boolean boolean0 = classSchedule0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      classSchedule0.setEndHour("0;Y*C_LWgFhXca*?");
      String string0 = classSchedule0.getEndHour();
      assertEquals("0;Y*C_LWgFhXca*?", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.WEDNESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "", "");
      WeekDay weekDay1 = classSchedule0.getWeekDay();
      assertSame(weekDay0, weekDay1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      String string0 = classSchedule0.toString();
      assertEquals("ClassSchedule{weekDay=TUESDAY, startHour='0;Y*C_LWgFhXca*?', endHour='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.MONDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, (String) null, (String) null);
      String string0 = classSchedule0.getStartHour();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      String string0 = classSchedule0.getEndHour();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      classSchedule0.setWeekDay(weekDay0);
      assertEquals(WeekDay.TUESDAY, classSchedule0.getWeekDay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      classSchedule0.setStartHour((String) null);
      ClassSchedule classSchedule1 = new ClassSchedule(weekDay0, "(Y", "(Y");
      // Undeclared exception!
      try { 
        classSchedule0.equals(classSchedule1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WeekDay weekDay0 = WeekDay.TUESDAY;
      ClassSchedule classSchedule0 = new ClassSchedule(weekDay0, "0;Y*C_LWgFhXca*?", (String) null);
      classSchedule0.hashCode();
  }
}
