/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:41:23 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni;

import org.junit.Test;
import static org.junit.Assert.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.CostClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlumniSummary_ESTest extends AlumniSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("Q`S?#IFFc[\"`O\"", (String) null, 0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0, "$mz{*U|EVD", "Q`S?#IFFc[\"`O\"");
      assertNotNull(alumniSummary0);
      assertEquals("Q`S?#IFFc[\"`O\"", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals("Q`S?#IFFc[\"`O\"", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals("$mz{*U|EVD", alumniSummary0.getMaxAlumniCountTerm());
      assertNull(alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      
      String string0 = alumniSummary0.getTo();
      assertNull(string0);
      assertEquals("Q`S?#IFFc[\"`O\"", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals("Q`S?#IFFc[\"`O\"", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals("$mz{*U|EVD", alumniSummary0.getMaxAlumniCountTerm());
      assertNull(alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, "+Ou;.m:J~v", (-1018), 0.0, (-1561.345156535), (-1018), (-1561.345156535), (-1018), (-1018), (-1018), (String) null, "FZ>N?d4]FM*oho-");
      assertNotNull(alumniSummary0);
      assertEquals((-1018), alumniSummary0.getMinAlumniCount());
      assertNull(alumniSummary0.getFrom());
      assertEquals((-1018.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1018), alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("+Ou;.m:J~v", alumniSummary0.getTo());
      assertEquals((-1561.345156535), alumniSummary0.getAverageCost(), 0.01);
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1561.345156535), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("FZ>N?d4]FM*oho-", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1018), alumniSummary0.getMaxAlumniCount());
      
      String string0 = alumniSummary0.getTo();
      assertNotNull(string0);
      assertEquals("+Ou;.m:J~v", string0);
      assertEquals((-1018), alumniSummary0.getMinAlumniCount());
      assertNull(alumniSummary0.getFrom());
      assertEquals((-1018.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1018), alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("+Ou;.m:J~v", alumniSummary0.getTo());
      assertEquals((-1561.345156535), alumniSummary0.getAverageCost(), 0.01);
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1561.345156535), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("FZ>N?d4]FM*oho-", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1018), alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, (String) null, (-2158), (-2158), (-2158), (-44.91), (-1.0), (-178.83298527651903), 0, 0, (String) null, (String) null);
      assertNotNull(alumniSummary0);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals((-2158), alumniSummary0.getAlumniCount());
      assertEquals((-2158.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getFrom());
      assertEquals((-2158.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertNull(alumniSummary0.getTo());
      assertEquals((-178.83298527651903), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertNull(alumniSummary0.getMinAlumniCountTerm());
      
      String string0 = alumniSummary0.getMinAlumniCountTerm();
      assertNull(string0);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals((-2158), alumniSummary0.getAlumniCount());
      assertEquals((-2158.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getFrom());
      assertEquals((-2158.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertNull(alumniSummary0.getTo());
      assertEquals((-178.83298527651903), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertNull(alumniSummary0.getMinAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", (-2065), (-2065), 1105.0472325, 0.0, 0.0, (-1341.711424782057), (-2065), (-2065), "", "");
      assertNotNull(alumniSummary0);
      assertEquals(1105.0472325, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1341.711424782057), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-2065), alumniSummary0.getMinAlumniCount());
      assertEquals((-2065.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(CostClass.UNACCEPTABLE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-2065), alumniSummary0.getMaxAlumniCount());
      assertEquals((-2065), alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getTo());
      
      String string0 = alumniSummary0.getMinAlumniCountTerm();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1105.0472325, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1341.711424782057), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-2065), alumniSummary0.getMinAlumniCount());
      assertEquals((-2065.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(CostClass.UNACCEPTABLE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-2065), alumniSummary0.getMaxAlumniCount());
      assertEquals((-2065), alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 799, 799, 799, 799, 799, 1773.7943707, 344, 0, "REGULAR", "");
      assertNotNull(alumniSummary0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(799.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(799, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getTo());
      assertEquals("REGULAR", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(799.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(799.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(1773.7943707, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(344, alumniSummary0.getMaxAlumniCount());
      
      int int0 = alumniSummary0.getMinAlumniCount();
      assertEquals(0, int0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(799.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(799, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getTo());
      assertEquals("REGULAR", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(799.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(799.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(1773.7943707, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(344, alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 2888, 2888, 2888, 2888, (-2059.99520469), 2888, 2888, (-209), "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "");
      assertNotNull(alumniSummary0);
      assertEquals(2888.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getMaxAlumniCountTerm());
      assertNull(alumniSummary0.getFrom());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals((-209), alumniSummary0.getMinAlumniCount());
      assertEquals((-2059.99520469), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(2888.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(2888, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(2888.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(2888, alumniSummary0.getMaxAlumniCount());
      
      int int0 = alumniSummary0.getMinAlumniCount();
      assertEquals((-209), int0);
      assertEquals(2888.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getMaxAlumniCountTerm());
      assertNull(alumniSummary0.getFrom());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals((-209), alumniSummary0.getMinAlumniCount());
      assertEquals((-2059.99520469), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(2888.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(2888, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(2888.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(2888, alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", 2888, 2888, 2888, 2888, (-2059.99520469), 2888, 2888, (-209), "br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", "");
      assertNotNull(alumniSummary0);
      assertEquals(2888.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(2888.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(2888, alumniSummary0.getAlumniCount());
      assertEquals((-2059.99520469), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-209), alumniSummary0.getMinAlumniCount());
      assertNull(alumniSummary0.getFrom());
      assertEquals(2888.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(2888, alumniSummary0.getMaxAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      
      alumniSummary0.setMaxAlumniCountTerm((String) null);
      assertEquals(2888.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(2888.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(2888, alumniSummary0.getAlumniCount());
      assertEquals((-2059.99520469), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-209), alumniSummary0.getMinAlumniCount());
      assertNull(alumniSummary0.getFrom());
      assertEquals(2888.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(2888, alumniSummary0.getMaxAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      
      String string0 = alumniSummary0.getMaxAlumniCountTerm();
      assertNull(string0);
      assertEquals(2888.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(2888.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(2888, alumniSummary0.getAlumniCount());
      assertEquals((-2059.99520469), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-209), alumniSummary0.getMinAlumniCount());
      assertNull(alumniSummary0.getFrom());
      assertEquals(2888.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(2888, alumniSummary0.getMaxAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary", alumniSummary0.getTo());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 0, 0, 0.0, (-3893.1488757227), 0, (-3893.1488757227), 0, 1, "", "");
      assertNotNull(alumniSummary0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(1, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals((-3893.1488757227), alumniSummary0.getAverageAlumniCount(), 0.01);
      
      String string0 = alumniSummary0.getMaxAlumniCountTerm();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(1, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals((-3893.1488757227), alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary(")L$4p[1Y;>@6eONf|", ")L$4p[1Y;>@6eONf|", 3, (-388.581), 3, 0.0, 0.0, 1.0, 0, 3, ")L$4p[1Y;>@6eONf|", "xjog/[e");
      assertNotNull(alumniSummary0);
      assertEquals(3, alumniSummary0.getMinAlumniCount());
      assertEquals(CostClass.UNACCEPTABLE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(")L$4p[1Y;>@6eONf|", alumniSummary0.getFrom());
      assertEquals(3, alumniSummary0.getAlumniCount());
      assertEquals(")L$4p[1Y;>@6eONf|", alumniSummary0.getTo());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(")L$4p[1Y;>@6eONf|", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("xjog/[e", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(3.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-388.581), alumniSummary0.getAverageTermsCount(), 0.01);
      
      int int0 = alumniSummary0.getMaxAlumniCount();
      assertEquals(0, int0);
      assertEquals(3, alumniSummary0.getMinAlumniCount());
      assertEquals(CostClass.UNACCEPTABLE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(")L$4p[1Y;>@6eONf|", alumniSummary0.getFrom());
      assertEquals(3, alumniSummary0.getAlumniCount());
      assertEquals(")L$4p[1Y;>@6eONf|", alumniSummary0.getTo());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(")L$4p[1Y;>@6eONf|", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("xjog/[e", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(3.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-388.581), alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("pW", "~_IXYe", 7, 7, 0.0, 0.0, 7, 0.0, 7, 7, "INACCURATE", "pW");
      assertNotNull(alumniSummary0);
      assertEquals(7, alumniSummary0.getMaxAlumniCount());
      assertEquals(7, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(7.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("~_IXYe", alumniSummary0.getTo());
      assertEquals("pW", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(7.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(7, alumniSummary0.getAlumniCount());
      assertEquals("pW", alumniSummary0.getMinAlumniCountTerm());
      
      int int0 = alumniSummary0.getMaxAlumniCount();
      assertEquals(7, int0);
      assertEquals(7, alumniSummary0.getMaxAlumniCount());
      assertEquals(7, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(7.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("~_IXYe", alumniSummary0.getTo());
      assertEquals("pW", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals("INACCURATE", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(7.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(7, alumniSummary0.getAlumniCount());
      assertEquals("pW", alumniSummary0.getMinAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, (String) null, 0, 0, 0, 0, (-1075.0), (-388.954375345), 0, 0, "knB:.Hb^T]qj4rOv6D", "knB:.Hb^T]qj4rOv6D");
      assertNotNull(alumniSummary0);
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1075.0), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getTo());
      assertEquals((-388.954375345), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertNull(alumniSummary0.getFrom());
      assertEquals("knB:.Hb^T]qj4rOv6D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("knB:.Hb^T]qj4rOv6D", alumniSummary0.getMinAlumniCountTerm());
      
      String string0 = alumniSummary0.getFrom();
      assertNull(string0);
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1075.0), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getTo());
      assertEquals((-388.954375345), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertNull(alumniSummary0.getFrom());
      assertEquals("knB:.Hb^T]qj4rOv6D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("knB:.Hb^T]qj4rOv6D", alumniSummary0.getMinAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary(":+w#?l0?W", "", 0, 124.74103499730177, (-385.167), 0, 0, (-1769.9608237170714), 1682, 1, "", "");
      assertNotNull(alumniSummary0);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-385.167), alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(":+w#?l0?W", alumniSummary0.getFrom());
      assertEquals((-1769.9608237170714), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals(1682, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals(124.74103499730177, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1, alumniSummary0.getMinAlumniCount());
      
      String string0 = alumniSummary0.getFrom();
      assertNotNull(string0);
      assertEquals(":+w#?l0?W", string0);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-385.167), alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(":+w#?l0?W", alumniSummary0.getFrom());
      assertEquals((-1769.9608237170714), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals(1682, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals(124.74103499730177, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1, alumniSummary0.getMinAlumniCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      assertNotNull(alumniSummary0);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      
      alumniSummary0.setCostClass((CostClass) null);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertNull(alumniSummary0.getCostClass());
      
      alumniSummary0.getCostClass();
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertNull(alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary(">*${5rsU}#D", ">*${5rsU}#D", 0, 0, 0, 0, 0, 0, 0, 0, ">*${5rsU}#D", ">*${5rsU}#D");
      assertNotNull(alumniSummary0);
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      
      double double0 = alumniSummary0.getAverageTermsCount();
      assertEquals(0.0, double0, 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", (-1), (-1), (-1), (-1), 1.0, (-1), (-1), 1682, "", "");
      assertNotNull(alumniSummary0);
      assertEquals(1682, alumniSummary0.getMinAlumniCount());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("", alumniSummary0.getTo());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      
      double double0 = alumniSummary0.getAverageTermsCount();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1682, alumniSummary0.getMinAlumniCount());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("", alumniSummary0.getTo());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(1.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("cLk1&C", "cLk1&C", 4, 4, 0.0, 0.0, 0.0, 4, (-1), 0, "M4#(f%)Fmy[wB+n5?", "M4#(f%)Fmy[wB+n5?");
      assertNotNull(alumniSummary0);
      assertEquals("M4#(f%)Fmy[wB+n5?", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(4.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("cLk1&C", alumniSummary0.getFrom());
      assertEquals("M4#(f%)Fmy[wB+n5?", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(4, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(4.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("cLk1&C", alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      
      double double0 = alumniSummary0.getAverageGpa();
      assertEquals(0.0, double0, 0.01);
      assertEquals("M4#(f%)Fmy[wB+n5?", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(4.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("cLk1&C", alumniSummary0.getFrom());
      assertEquals("M4#(f%)Fmy[wB+n5?", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(4, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(4.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("cLk1&C", alumniSummary0.getTo());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 799, 799, 799, 799, 799, 1773.7943707, 344, 0, "REGULAR", "");
      assertNotNull(alumniSummary0);
      assertEquals(799.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(1773.7943707, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("REGULAR", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(799.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(799, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(799.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(344, alumniSummary0.getMaxAlumniCount());
      
      double double0 = alumniSummary0.getAverageGpa();
      assertEquals(799.0, double0, 0.01);
      assertEquals(799.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(1773.7943707, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("REGULAR", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(799.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(799, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(799.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(344, alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary(">*${5rsU}#D", ">*${5rsU}#D", 0, 0, 0, 0, 0, 0, 0, 0, ">*${5rsU}#D", ">*${5rsU}#D");
      assertNotNull(alumniSummary0);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      
      double double0 = alumniSummary0.getAverageCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, (String) null, (-1974), (-1974), 1442.9638699579577, 1442.9638699579577, (-1974), (-1974), (-1974), 2115, (String) null, "%La}");
      assertNotNull(alumniSummary0);
      assertNull(alumniSummary0.getTo());
      assertEquals(2115, alumniSummary0.getMinAlumniCount());
      assertEquals((-1974.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("%La}", alumniSummary0.getMinAlumniCountTerm());
      assertNull(alumniSummary0.getFrom());
      assertEquals(1442.9638699579577, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1974), alumniSummary0.getAlumniCount());
      assertEquals((-1974.0), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1974), alumniSummary0.getMaxAlumniCount());
      assertEquals((-1974.0), alumniSummary0.getAverageTermsCount(), 0.01);
      
      double double0 = alumniSummary0.getAverageCost();
      assertEquals(1442.9638699579577, double0, 0.01);
      assertNull(alumniSummary0.getTo());
      assertEquals(2115, alumniSummary0.getMinAlumniCount());
      assertEquals((-1974.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("%La}", alumniSummary0.getMinAlumniCountTerm());
      assertNull(alumniSummary0.getFrom());
      assertEquals(1442.9638699579577, alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1974), alumniSummary0.getAlumniCount());
      assertEquals((-1974.0), alumniSummary0.getAverageGpa(), 0.01);
      assertNull(alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1974), alumniSummary0.getMaxAlumniCount());
      assertEquals((-1974.0), alumniSummary0.getAverageTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary(">*${5rsU}#D", ">*${5rsU}#D", 0, 0, 0, 0, 0, 0, 0, 0, ">*${5rsU}#D", ">*${5rsU}#D");
      assertNotNull(alumniSummary0);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      
      double double0 = alumniSummary0.getAverageAlumniCount();
      assertEquals(0.0, double0, 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary((String) null, "", 1, 1.0, 1.0, 1, 1.0, 1, 0, 1, "", "");
      assertNotNull(alumniSummary0);
      assertEquals(1.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(1.0, alumniSummary0.getAverageCost(), 0.01);
      assertNull(alumniSummary0.getFrom());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("", alumniSummary0.getTo());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(1, alumniSummary0.getMinAlumniCount());
      assertEquals(1, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(1.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      
      double double0 = alumniSummary0.getAverageAlumniCount();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(1.0, alumniSummary0.getAverageCost(), 0.01);
      assertNull(alumniSummary0.getFrom());
      assertEquals(1.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("", alumniSummary0.getTo());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(1, alumniSummary0.getMinAlumniCount());
      assertEquals(1, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(1.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary(">*${5rsU}#D", ">*${5rsU}#D", 0, 0, 0, 0, 0, 0, 0, 0, ">*${5rsU}#D", ">*${5rsU}#D");
      assertNotNull(alumniSummary0);
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
      
      int int0 = alumniSummary0.getAlumniCount();
      assertEquals(0, int0);
      assertEquals(0, alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(">*${5rsU}#D", alumniSummary0.getFrom());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      assertEquals(CostClass.INACCURATE, alumniSummary0.getCostClass());
      assertEquals(0, alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(">*${5rsU}#D", alumniSummary0.getTo());
      assertEquals(">*${5rsU}#D", alumniSummary0.getMinAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 799, 799, 799, 799, 799, 1773.7943707, 344, 0, "REGULAR", "");
      assertNotNull(alumniSummary0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(344, alumniSummary0.getMaxAlumniCount());
      assertEquals(1773.7943707, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(799.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(799.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(799, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(799.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("REGULAR", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
      
      int int0 = alumniSummary0.getAlumniCount();
      assertEquals(799, int0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(344, alumniSummary0.getMaxAlumniCount());
      assertEquals(1773.7943707, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(799.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(799.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(799, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(799.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("REGULAR", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(0, alumniSummary0.getMinAlumniCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 88, 88, 88, 88, 88, 88, 88, 88, "", "");
      assertNotNull(alumniSummary0);
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      
      double double0 = alumniSummary0.getAverageTermsCount();
      assertEquals(88.0, double0, 0.01);
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      assertNotNull(alumniSummary0);
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      
      alumniSummary0.setMaxAlumniCount((-3945));
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 88, 88, 88, 88, 88, 88, 88, 88, "", "");
      assertNotNull(alumniSummary0);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      
      alumniSummary0.setAverageTermsCount(88);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 88, 88, 88, 88, 88, 88, 88, 88, "", "");
      assertNotNull(alumniSummary0);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      
      alumniSummary0.setAverageCost(88);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", (-1), 0.0, (-1), 0.0, 0.0, 0.0, (-1), (-1), "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass");
      assertNotNull(alumniSummary0);
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getTo());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getFrom());
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      
      alumniSummary0.setAverageAlumniCount(0.0);
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getTo());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getFrom());
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", (-1), 0.0, (-1), 0.0, 0.0, 0.0, (-1), (-1), "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass");
      assertNotNull(alumniSummary0);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getTo());
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMaxAlumniCountTerm());
      
      String string0 = alumniSummary0.getMinAlumniCountTerm();
      assertNotNull(string0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", string0);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getTo());
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getFrom());
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMaxAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", (-1), 0.0, (-1), 0.0, 0.0, 0.0, (-1), (-1), "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass");
      assertNotNull(alumniSummary0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getTo());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      
      int int0 = alumniSummary0.getMaxAlumniCount();
      assertEquals((-1), int0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", alumniSummary0.getTo());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 88, 88, 88, 88, 88, 88, 88, 88, "", "");
      assertNotNull(alumniSummary0);
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      
      String string0 = alumniSummary0.getTo();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      assertNotNull(alumniSummary0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      
      double double0 = alumniSummary0.getAverageGpa();
      assertEquals((-1.0), double0, 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      assertNotNull(alumniSummary0);
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("mT", alumniSummary0.getTo());
      
      int int0 = alumniSummary0.getAlumniCount();
      assertEquals((-3945), int0);
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals("mT", alumniSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 88, 88, 88, 88, 88, 88, 88, 88, "", "");
      assertNotNull(alumniSummary0);
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      
      alumniSummary0.setFrom("");
      assertEquals("", alumniSummary0.getTo());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(88.0, alumniSummary0.getAverageCost(), 0.01);
      assertEquals("", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(88, alumniSummary0.getMinAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", (-1), 0.0, (-1), 0.0, 0.0, 0.0, (-1), (-1), "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass");
      alumniSummary0.setAlumniCount((-1));
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-1), alumniSummary0.getAlumniCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      alumniSummary0.setMinAlumniCount((-3945));
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      String string0 = alumniSummary0.getFrom();
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals("", string0);
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      double double0 = alumniSummary0.getAverageCost();
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      double double0 = alumniSummary0.getAverageAlumniCount();
      assertEquals("mT", alumniSummary0.getTo());
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-3945.0), double0, 0.01);
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", (-1), 0.0, (-1), 0.0, 0.0, 0.0, (-1), (-1), "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass");
      alumniSummary0.setMinAlumniCountTerm("W*v5~");
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1), alumniSummary0.getMinAlumniCount());
      assertEquals((-1), alumniSummary0.getMaxAlumniCount());
      assertEquals(0.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals((-1), alumniSummary0.getAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 88, 88, 88, 88, 88, 88, 88, 88, "", "");
      alumniSummary0.setTo("");
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88, alumniSummary0.getMinAlumniCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      CostClass costClass0 = alumniSummary0.getCostClass();
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals(CostClass.NOT_APPLICABLE, costClass0);
      assertEquals("!g;1N", alumniSummary0.getMaxAlumniCountTerm());
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("mT", alumniSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "mT", (-3945), (-3945), (-1.0), (-1.0), (-1.0), (-3945), (-3945), (-3945), "!g;1N", "mT");
      String string0 = alumniSummary0.getMaxAlumniCountTerm();
      assertEquals("!g;1N", string0);
      assertEquals("", alumniSummary0.getFrom());
      assertEquals((-3945), alumniSummary0.getMaxAlumniCount());
      assertEquals(CostClass.NOT_APPLICABLE, alumniSummary0.getCostClass());
      assertEquals((-3945), alumniSummary0.getAlumniCount());
      assertEquals((-3945), alumniSummary0.getMinAlumniCount());
      assertEquals((-3945.0), alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals((-1.0), alumniSummary0.getAverageGpa(), 0.01);
      assertEquals("mT", alumniSummary0.getMinAlumniCountTerm());
      assertEquals((-1.0), alumniSummary0.getAverageCost(), 0.01);
      assertEquals((-3945.0), alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals("mT", alumniSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("", "", 88, 88, 88, 88, 88, 88, 88, 88, "", "");
      int int0 = alumniSummary0.getMinAlumniCount();
      assertEquals(88, alumniSummary0.getMaxAlumniCount());
      assertEquals(88.0, alumniSummary0.getAverageTermsCount(), 0.01);
      assertEquals(88.0, alumniSummary0.getAverageGpa(), 0.01);
      assertEquals(88.0, alumniSummary0.getAverageAlumniCount(), 0.01);
      assertEquals(88, alumniSummary0.getAlumniCount());
      assertEquals(CostClass.ADEQUATE, alumniSummary0.getCostClass());
      assertEquals(88, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AlumniSummary alumniSummary0 = new AlumniSummary("br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", (-1), 0.0, (-1), 0.0, 0.0, 0.0, (-1), (-1), "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass", "br.edu.ufcg.computacao.eureca.backend.core.models.CostClass");
      assertEquals(0.0, alumniSummary0.getAverageGpa(), 0.01);
      
      alumniSummary0.setAverageGpa((-1));
      assertEquals(0.0, alumniSummary0.getAverageAlumniCount(), 0.01);
  }
}
