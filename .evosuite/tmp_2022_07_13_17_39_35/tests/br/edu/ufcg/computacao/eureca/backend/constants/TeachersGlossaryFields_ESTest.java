/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:39:45 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.constants;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.constants.Field;
import br.edu.ufcg.computacao.eureca.backend.constants.TeachersGlossaryFields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TeachersGlossaryFields_ESTest extends TeachersGlossaryFields_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getFailedDueToAbsences();
      teachersGlossaryFields0.setTotal(field1);
      assertNull(field1.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      teachersGlossaryFields0.setTotal((Field) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, field0, field0, field1, field0, field1, field0);
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      teachersGlossaryFields0.setMax(field2);
      teachersGlossaryFields0.setSuccess(teachersGlossaryFields0.max);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field1).toString();
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, field0, field0, field1, field0, field1, field0);
      Field field2 = teachersGlossaryFields0.getSuccess();
      assertNotSame(field2, field0);
      assertNotNull(field2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getFailedDueToAbsences();
      teachersGlossaryFields0.setFailedDueToGrade(field1);
      assertNull(field1.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getFailedDueToAbsences();
      teachersGlossaryFields0.setFailedDueToCanceling(field1);
      Field field2 = teachersGlossaryFields0.getFailedDueToGrade();
      assertNull(field2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, field0, field0, field1, field0, field1, field0);
      Field field2 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field2).toString();
      teachersGlossaryFields0.setFailedDueToAbsences(field2);
      Field field3 = teachersGlossaryFields0.getFailedDueToAbsences();
      assertSame(field3, field2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, field0, field0, field1, field0, field1, field0);
      teachersGlossaryFields0.total = null;
      Field field2 = teachersGlossaryFields0.getTotal();
      assertNull(field2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, field0, field0, field0, field1, field0, field1);
      teachersGlossaryFields0.setMin((Field) null);
      Field field2 = teachersGlossaryFields0.getMin();
      assertNull(field2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(field0).toString();
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getFailedDueToAbsences();
      teachersGlossaryFields0.setFailedDueToCanceling(field1);
      Field field2 = teachersGlossaryFields0.getFailedDueToCanceling();
      assertSame(field2, field0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields((Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null, (Field) null);
      Field field0 = teachersGlossaryFields0.getFailedDueToAbsences();
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getMin();
      assertNull(field1.getDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getMax();
      assertNull(field1.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      teachersGlossaryFields0.setFailedDueToGrade((Field) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getSuccess();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      teachersGlossaryFields0.setSuccess((Field) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      teachersGlossaryFields0.setMax((Field) null);
      Field field1 = teachersGlossaryFields0.getMax();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      teachersGlossaryFields0.setFailedDueToCanceling((Field) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, (Field) null, (Field) null, (Field) null, field0, field0, field0);
      Field field1 = teachersGlossaryFields0.getFailedDueToCanceling();
      assertNull(field1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, field0, field0, field1, field0, field1, field0);
      Field field2 = teachersGlossaryFields0.getTotal();
      assertNotSame(field2, field1);
      assertNotNull(field2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      Field field1 = mock(Field.class, new ViolatedAssumptionAnswer());
      TeachersGlossaryFields teachersGlossaryFields0 = new TeachersGlossaryFields(field0, field0, field0, field1, field0, field1, field0);
      Field field2 = teachersGlossaryFields0.getFailedDueToGrade();
      assertNotNull(field2);
      assertNotSame(field2, field1);
  }
}
