/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:26:12 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.active;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetricsSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivesSummary_ESTest extends ActivesSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActivesSummary activesSummary0 = new ActivesSummary("", "br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary", 304, (StudentMetricsSummary) null);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary", activesSummary0.getTo());
      
      activesSummary0.setTo((String) null);
      activesSummary0.getTo();
      assertEquals("", activesSummary0.getFrom());
      assertEquals(304, activesSummary0.getActivesCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivesSummary activesSummary0 = new ActivesSummary("Lu'5O6K", "Lu'5O6K", 431, (StudentMetricsSummary) null);
      activesSummary0.setTo("");
      activesSummary0.getTo();
      assertEquals(431, activesSummary0.getActivesCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActivesSummary activesSummary0 = new ActivesSummary("O`*.", (String) null, (-3249), (StudentMetricsSummary) null);
      activesSummary0.setFrom((String) null);
      activesSummary0.getFrom();
      assertEquals((-3249), activesSummary0.getActivesCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActivesSummary activesSummary0 = new ActivesSummary("#BZ", "#BZ", (-668), (StudentMetricsSummary) null);
      activesSummary0.setFrom("");
      activesSummary0.getFrom();
      assertEquals((-668), activesSummary0.getActivesCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActivesSummary activesSummary0 = new ActivesSummary("", "br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary", 304, (StudentMetricsSummary) null);
      activesSummary0.getAverage();
      assertEquals("", activesSummary0.getFrom());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary", activesSummary0.getTo());
      assertEquals(304, activesSummary0.getActivesCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActivesSummary activesSummary0 = new ActivesSummary("#BZ", "#BZ", (-668), (StudentMetricsSummary) null);
      activesSummary0.setActivesCount(0);
      int int0 = activesSummary0.getActivesCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActivesSummary activesSummary0 = new ActivesSummary("", "br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary", 304, (StudentMetricsSummary) null);
      int int0 = activesSummary0.getActivesCount();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary", activesSummary0.getTo());
      assertEquals("", activesSummary0.getFrom());
      assertEquals(304, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StudentMetricsSummary studentMetricsSummary0 = mock(StudentMetricsSummary.class, new ViolatedAssumptionAnswer());
      ActivesSummary activesSummary0 = new ActivesSummary("v", "v", (-1), studentMetricsSummary0);
      activesSummary0.getTo();
      assertEquals((-1), activesSummary0.getActivesCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StudentMetricsSummary studentMetricsSummary0 = mock(StudentMetricsSummary.class, new ViolatedAssumptionAnswer());
      ActivesSummary activesSummary0 = new ActivesSummary("", "", (-1533), studentMetricsSummary0);
      int int0 = activesSummary0.getActivesCount();
      assertEquals((-1533), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StudentMetricsSummary studentMetricsSummary0 = mock(StudentMetricsSummary.class, new ViolatedAssumptionAnswer());
      ActivesSummary activesSummary0 = new ActivesSummary("v", "v", (-1), studentMetricsSummary0);
      activesSummary0.getFrom();
      assertEquals((-1), activesSummary0.getActivesCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StudentMetricsSummary studentMetricsSummary0 = mock(StudentMetricsSummary.class, new ViolatedAssumptionAnswer());
      ActivesSummary activesSummary0 = new ActivesSummary("v", "v", (-1), studentMetricsSummary0);
      StudentMetricsSummary studentMetricsSummary1 = mock(StudentMetricsSummary.class, new ViolatedAssumptionAnswer());
      activesSummary0.setAverage(studentMetricsSummary1);
      assertEquals((-1), activesSummary0.getActivesCount());
  }
}
