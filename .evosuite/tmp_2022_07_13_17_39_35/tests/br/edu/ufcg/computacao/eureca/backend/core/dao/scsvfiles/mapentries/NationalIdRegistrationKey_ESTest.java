/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:53:53 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentStatus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NationalIdRegistrationKey_ESTest extends NationalIdRegistrationKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setRegistration("Predicates.in(");
      nationalIdRegistrationKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setNationalId("Predicates.in(");
      nationalIdRegistrationKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "NY_bkq}@5:r0$9MpN\"b", "!E{s!&n", "", "xmS4lE2-VZ5t2", "|U'|n#M/LOd$gv(S0L", "!E{s!&n", ",E_~.,Ej+&-[e", ":", "|U'|n#M/LOd$gv(S0L", "", studentStatus0, "nF^`cJ[g6 ~DP:", ", email='", ":", ">", "NY_bkq}@5:r0$9MpN\"b", "evictionCount", "INTERFACE_ONLY", "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", "INTERFACE_ONLY", (Curriculum) null, 0, 0, 0, 0, 452, (-214), 452, 452, 452, 452, (-2791), (-214), (-2791), 452, (-2791), 0.0);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey(student0);
      assertEquals("", nationalIdRegistrationKey0.getRegistration());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setRegistration("Predicates.in(");
      String string0 = nationalIdRegistrationKey0.getRegistration();
      assertEquals("Predicates.in(", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("IGNORE_TYPE_VARIABLE_OR_WILDCARD", "IGNORE_TYPE_VARIABLE_OR_WILDCARD");
      nationalIdRegistrationKey0.setRegistration("");
      String string0 = nationalIdRegistrationKey0.getRegistration();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setNationalId("Predicates.in(");
      String string0 = nationalIdRegistrationKey0.getNationalId();
      assertEquals("Predicates.in(", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("", "");
      String string0 = nationalIdRegistrationKey0.getNationalId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = null;
      try {
        nationalIdRegistrationKey0 = new NationalIdRegistrationKey((NationalIdRegistrationKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      String string0 = nationalIdRegistrationKey0.getNationalId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      String string0 = nationalIdRegistrationKey0.getRegistration();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("pyF", "qzE");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey("pyF", "pyF");
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertEquals("pyF", nationalIdRegistrationKey0.getNationalId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("pyF", "qzE");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey(nationalIdRegistrationKey0);
      assertEquals("pyF", nationalIdRegistrationKey0.getNationalId());
      
      nationalIdRegistrationKey0.setNationalId("qzE");
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setRegistration("null:null");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey("null:null", "null:null");
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setRegistration("null:null");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey(nationalIdRegistrationKey0);
      boolean boolean0 = nationalIdRegistrationKey1.equals(nationalIdRegistrationKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey();
      nationalIdRegistrationKey0.setRegistration("co.google.com@n.klQect.Cut");
      boolean boolean0 = nationalIdRegistrationKey1.equals(nationalIdRegistrationKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("pyF", "qzE");
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey(nationalIdRegistrationKey0);
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey1);
      assertTrue(boolean0);
      assertEquals("qzE", nationalIdRegistrationKey1.getRegistration());
      assertEquals("pyF", nationalIdRegistrationKey1.getNationalId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("pyF", "qzE");
      boolean boolean0 = nationalIdRegistrationKey0.equals((Object) null);
      assertEquals("qzE", nationalIdRegistrationKey0.getRegistration());
      assertEquals("pyF", nationalIdRegistrationKey0.getNationalId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      boolean boolean0 = nationalIdRegistrationKey0.equals(nationalIdRegistrationKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      boolean boolean0 = nationalIdRegistrationKey0.equals("N9[9.]PiV}tp6rM/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = null;
      try {
        nationalIdRegistrationKey0 = new NationalIdRegistrationKey((Student) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      String string0 = nationalIdRegistrationKey0.toString();
      assertEquals("null:null", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      NationalIdRegistrationKey nationalIdRegistrationKey1 = new NationalIdRegistrationKey(nationalIdRegistrationKey0);
      boolean boolean0 = nationalIdRegistrationKey1.equals(nationalIdRegistrationKey0);
      assertTrue(boolean0);
  }
}
