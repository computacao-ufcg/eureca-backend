/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:37:15 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.EnrollmentData;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.RegistrationSubjectCodeTermKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.Enrollment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentData_ESTest extends EnrollmentData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData("SD>:d:>?6}QOB,6f", 1, 0.0, "SD>:d:>?6}QOB,6f");
      enrollmentData0.getStatus();
      assertEquals(1, enrollmentData0.getCredits());
      assertEquals(0.0, enrollmentData0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData("", 0, (-715.75), "");
      enrollmentData0.getStatus();
      assertEquals(0, enrollmentData0.getCredits());
      assertEquals((-715.75), enrollmentData0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData((String) null, 3262, 3262, (String) null);
      double double0 = enrollmentData0.getGrade();
      assertEquals(3262.0, double0, 0.01);
      assertEquals(3262, enrollmentData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      enrollmentData0.setGrade((-1772.695821301));
      double double0 = enrollmentData0.getGrade();
      assertEquals((-1772.695821301), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      enrollmentData0.setCredits(379);
      int int0 = enrollmentData0.getCredits();
      assertEquals(379, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      enrollmentData0.setCredits((-2989));
      int int0 = enrollmentData0.getCredits();
      assertEquals((-2989), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      enrollmentData0.setClassId("mdUbr>?snxAivh");
      String string0 = enrollmentData0.getClassId();
      assertEquals("mdUbr>?snxAivh", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData("", 0, (-715.75), "");
      enrollmentData0.getClassId();
      assertEquals(0, enrollmentData0.getCredits());
      assertEquals((-715.75), enrollmentData0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.EnrollmentData", 1342, (-518.84516), "br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.EnrollmentData");
      RegistrationSubjectCodeTermKey registrationSubjectCodeTermKey0 = mock(RegistrationSubjectCodeTermKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getRegistration();
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getSubjectCode();
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getTerm();
      enrollmentData0.setGrade(1342);
      enrollmentData0.createEnrollment(registrationSubjectCodeTermKey0);
      assertEquals(1342.0, enrollmentData0.getGrade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      RegistrationSubjectCodeTermKey registrationSubjectCodeTermKey0 = mock(RegistrationSubjectCodeTermKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getRegistration();
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getSubjectCode();
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getTerm();
      enrollmentData0.setCredits(379);
      enrollmentData0.createEnrollment(registrationSubjectCodeTermKey0);
      assertEquals(379, enrollmentData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData("", (-3406), (-3406), "");
      RegistrationSubjectCodeTermKey registrationSubjectCodeTermKey0 = mock(RegistrationSubjectCodeTermKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getRegistration();
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getSubjectCode();
      doReturn((String) null).when(registrationSubjectCodeTermKey0).getTerm();
      Enrollment enrollment0 = enrollmentData0.createEnrollment(registrationSubjectCodeTermKey0);
      assertEquals((-3406.0), enrollment0.getGrade(), 0.01);
      assertEquals((-3406), enrollment0.getCredits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      // Undeclared exception!
      try { 
        enrollmentData0.createEnrollment((RegistrationSubjectCodeTermKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.EnrollmentData", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      int int0 = enrollmentData0.getCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      String string0 = enrollmentData0.getStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      String string0 = enrollmentData0.getClassId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      double double0 = enrollmentData0.getGrade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      enrollmentData0.setStatus("Enrollment{ classId=null, credits=2991, grade='0.0', status='null'}");
      assertEquals("Enrollment{ classId=null, credits=2991, grade='0.0', status='null'}", enrollmentData0.getStatus());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      String string0 = enrollmentData0.toString();
      assertEquals("Enrollment{ classId=null, credits=0, grade='0.0', status='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EnrollmentData enrollmentData0 = new EnrollmentData();
      RegistrationSubjectCodeTermKey registrationSubjectCodeTermKey0 = mock(RegistrationSubjectCodeTermKey.class, new ViolatedAssumptionAnswer());
      doReturn("Enrollment{ classId=null, credits=2991, grade='0.0', status='null'}").when(registrationSubjectCodeTermKey0).getRegistration();
      doReturn("Enrollment{ classId=null, credits=2991, grade='0.0', status='null'}").when(registrationSubjectCodeTermKey0).getSubjectCode();
      doReturn("Enrollment{ classId=null, credits=2991, grade='0.0', status='null'}").when(registrationSubjectCodeTermKey0).getTerm();
      Enrollment enrollment0 = enrollmentData0.createEnrollment(registrationSubjectCodeTermKey0);
      assertEquals(0, enrollment0.getCredits());
      assertEquals(0.0, enrollment0.getGrade(), 0.01);
  }
}
