/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:26:43 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.students;

import org.junit.Test;
import static org.junit.Assert.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentMetrics_ESTest extends StudentMetrics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, (-3593.332), (-3593.332), (-1616.273490834), (-3720.69344826), 1415.072141, 594.8018042825142, (-3720.69344826));
      assertEquals((-3593.332), studentMetrics0.getSuccessRate(), 0.01);
      
      studentMetrics0.setSuccessRate(0.0);
      double double0 = studentMetrics0.getSuccessRate();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 607.2733, 607.2733, 1.0, 1.0, 607.2733, (-1.0), 607.2733);
      double double0 = studentMetrics0.getSuccessRate();
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(607.2733, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(607.2733, double0, 0.01);
      assertEquals(1.0, studentMetrics0.getCost(), 0.01);
      assertEquals(607.2733, studentMetrics0.getPace(), 0.01);
      assertEquals(1.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(607.2733, studentMetrics0.getRisk(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 1879.5727369, 0.0, 0.0, 1879.5727369, 0.0, 0.0);
      double double0 = studentMetrics0.getRisk();
      assertEquals(1879.5727369, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(1879.5727369, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, (-1.0), 0.0, (-1.0), (-4643.5900229403), 1908.053372);
      double double0 = studentMetrics0.getRisk();
      assertEquals((-4643.5900229403), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(1908.053372, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
      double double0 = studentMetrics0.getPace();
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 1.0, (-212.6122840512), 0.0, 0.0, 1.0, (-212.6122840512));
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      
      studentMetrics0.setFeasibility(1.0);
      double double0 = studentMetrics0.getFeasibility();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-839.459177), (-839.459177), (-4694.05081), (-839.459177), (-839.459177), (-4694.05081), (-4694.05081), (-839.459177));
      double double0 = studentMetrics0.getFeasibility();
      assertEquals((-839.459177), studentMetrics0.getRisk(), 0.01);
      assertEquals((-839.459177), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-839.459177), double0, 0.01);
      assertEquals((-4694.05081), studentMetrics0.getPace(), 0.01);
      assertEquals((-839.459177), studentMetrics0.getCost(), 0.01);
      assertEquals((-4694.05081), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-4694.05081), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-839.459177), studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 1879.5727369, 0.0, 0.0, 1879.5727369, 0.0, 0.0);
      studentMetrics0.setCourseDurationPrediction((-3033.60001065));
      double double0 = studentMetrics0.getCourseDurationPrediction();
      assertEquals((-3033.60001065), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 187.9924966707, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0);
      double double0 = studentMetrics0.getCost();
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(187.9924966707, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(1.0, studentMetrics0.getPace(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, (-3593.332), (-3593.332), (-1616.273490834), (-3720.69344826), 1415.072141, 594.8018042825142, (-3720.69344826));
      assertEquals((-1616.273490834), studentMetrics0.getAverageLoad(), 0.01);
      
      studentMetrics0.setAverageLoad(0.0);
      double double0 = studentMetrics0.getAverageLoad();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, 2997.67284, 0.0, 2997.67284, 2997.67284, 0.0);
      double double0 = studentMetrics0.getAverageLoad();
      assertEquals(2997.67284, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(2997.67284, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(2997.67284, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 1.0, 1766.490373948038, 0.0, (-3765.68241), 0.0, 1.0, 1.0);
      double double0 = studentMetrics0.getAttemptedCredits();
      assertEquals(1.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(1766.490373948038, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals((-3765.68241), studentMetrics0.getCost(), 0.01);
      assertEquals(1.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(3508.8, 0.0, 0.0, (-2613.381319475), 0.0, (-2589.4789), 0.0, 947.0717);
      double double0 = studentMetrics0.getAttemptedCredits();
      assertEquals((-2613.381319475), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-2589.4789), studentMetrics0.getPace(), 0.01);
      assertEquals(947.0717, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(3508.8, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      double double0 = studentMetrics0.getCourseDurationPrediction();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals((-1791.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(1497.51579562766, studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      double double0 = studentMetrics0.getAttemptedCredits();
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(1.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(1497.51579562766, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals((-1791.0), studentMetrics0.getSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, (-3593.332), (-3593.332), (-1616.273490834), (-3720.69344826), 1415.072141, 594.8018042825142, (-3720.69344826));
      studentMetrics0.setAttemptedCredits(0.0);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-3593.332), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1616.273490834), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-3720.69344826), studentMetrics0.getCost(), 0.01);
      assertEquals((-3720.69344826), studentMetrics0.getRisk(), 0.01);
      assertEquals((-3593.332), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(594.8018042825142, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(1415.072141, studentMetrics0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      double double0 = studentMetrics0.getCost();
      assertEquals(1497.51579562766, studentMetrics0.getPace(), 0.01);
      assertEquals((-1791.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, (-3593.332), (-3593.332), (-1616.273490834), (-3720.69344826), 1415.072141, 594.8018042825142, (-3720.69344826));
      double double0 = studentMetrics0.getSuccessRate();
      assertEquals(1415.072141, studentMetrics0.getPace(), 0.01);
      assertEquals(594.8018042825142, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-3720.69344826), studentMetrics0.getCost(), 0.01);
      assertEquals((-3593.332), double0, 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-3720.69344826), studentMetrics0.getRisk(), 0.01);
      assertEquals((-1616.273490834), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-3593.332), studentMetrics0.getFeasibility(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, (-3593.332), (-3593.332), (-1616.273490834), (-3720.69344826), 1415.072141, 594.8018042825142, (-3720.69344826));
      double double0 = studentMetrics0.getRisk();
      assertEquals(1415.072141, studentMetrics0.getPace(), 0.01);
      assertEquals((-1616.273490834), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-3720.69344826), double0, 0.01);
      assertEquals((-3720.69344826), studentMetrics0.getCost(), 0.01);
      assertEquals((-3593.332), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-3593.332), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(594.8018042825142, studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      assertEquals(1497.51579562766, studentMetrics0.getPace(), 0.01);
      
      studentMetrics0.setPace((-1791.0));
      double double0 = studentMetrics0.getPace();
      assertEquals((-1791.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      double double0 = studentMetrics0.getAverageLoad();
      assertEquals((-1791.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(1.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(1497.51579562766, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
      double double0 = studentMetrics0.getFeasibility();
      assertEquals(1.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
      assertEquals(1.0, studentMetrics0.getRisk(), 0.01);
      
      studentMetrics0.setRisk(0.0);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      assertEquals(1.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      
      studentMetrics0.setCourseDurationPrediction(0.0);
      double double0 = studentMetrics0.getCourseDurationPrediction();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      double double0 = studentMetrics0.getPace();
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(1497.51579562766, double0, 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(1.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals((-1791.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StudentMetrics studentMetrics0 = new StudentMetrics((-1.0), 0.0, (-1791.0), (-1.0), 0.0, 1497.51579562766, 1.0, (-1.0));
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      
      studentMetrics0.setCost((-1791.0));
      double double0 = studentMetrics0.getCost();
      assertEquals((-1791.0), double0, 0.01);
  }
}
