/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:56:11 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.ScheduleResponse;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollmentResponse;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassSchedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Schedule;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentPreEnrollmentResponse_ESTest extends StudentPreEnrollmentResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("E", (-1306), Integer.MIN_VALUE, 0, (-1306), (-1306));
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Subject subject0 = new Subject("&(gxNP@PzCP", "E", "", "J~)x", "E", (-1306), (-1306), "", set0, (-25), set0, set0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      HashSet<SubjectSchedule> hashSet0 = new HashSet<SubjectSchedule>();
      PriorityQueue<ClassSchedule> priorityQueue0 = new PriorityQueue<ClassSchedule>();
      Schedule schedule0 = new Schedule(Integer.MIN_VALUE, "BJd;JqWgV?%5(", priorityQueue0);
      hashMap0.put("BJd;JqWgV?%5(", schedule0);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) hashSet0);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) hashSet0);
      assertEquals((-2612), studentPreEnrollmentResponse0.getTotalCredits());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("FnF", (-1818), (-2592), (-32), (-210), (-2050585216));
      Subject subject0 = new Subject("", "FnF", "FnF", "FnF", "C", (-210), 47, (String) null, (Collection<String>) null, (-32), (Collection<String>) null, (Collection<String>) null);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      ArrayList<SubjectSchedule> arrayList0 = new ArrayList<SubjectSchedule>();
      arrayList0.add(subjectSchedule0);
      // Undeclared exception!
      try { 
        studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse(":30CJCfJd[tkP x", 2803, 2803, 0, (-956), 64);
      studentPreEnrollmentResponse0.setElectiveCredits(69);
      int int0 = studentPreEnrollmentResponse0.getTotalCredits();
      assertEquals(69, studentPreEnrollmentResponse0.getElectiveCredits());
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("25U)}`5", 0, (-311), (-1), 0, 0);
      boolean boolean0 = studentPreEnrollmentResponse0.isElectiveFull();
      assertTrue(boolean0);
      assertEquals(0, studentPreEnrollmentResponse0.getTerm());
      assertEquals((-312), studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollmentResponse", (-1), (-1), (-1), (-1), (-1));
      boolean boolean0 = studentPreEnrollmentResponse0.isComplementaryFull();
      assertTrue(boolean0);
      assertEquals((-4), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals((-1), studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("E", 69, 133, (-368), 69, 0);
      boolean boolean0 = studentPreEnrollmentResponse0.isOptionalFull();
      assertEquals(69, studentPreEnrollmentResponse0.getTerm());
      assertEquals((-166), studentPreEnrollmentResponse0.getMaxCredits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("9 [KXvi]'", 87855567, 87855567, 87855567, 0, 87855567);
      studentPreEnrollmentResponse0.setMandatoryCredits(87855567);
      boolean boolean0 = studentPreEnrollmentResponse0.isMandatoryFull();
      assertEquals(87855567, studentPreEnrollmentResponse0.getTotalCredits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 259, 69, 3, 69, 87855567);
      studentPreEnrollmentResponse0.setOptionalCredits(2);
      int int0 = studentPreEnrollmentResponse0.getTotalCredits();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-681), 4109, 4109, (-681), 1776);
      studentPreEnrollmentResponse0.setTerm(0);
      int int0 = studentPreEnrollmentResponse0.getTerm();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-1361), (-1361), (-1361), (-1361), (-1361));
      int int0 = studentPreEnrollmentResponse0.getTerm();
      assertEquals((-1361), int0);
      assertEquals((-5444), studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("M", 2681, (-1), 1329, 2681, 1329);
      studentPreEnrollmentResponse0.setSubjects((Map<String, ScheduleResponse>) null);
      studentPreEnrollmentResponse0.getSubjects();
      assertEquals(2681, studentPreEnrollmentResponse0.getTerm());
      assertEquals(5338, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 340, (-4402), (-1252), (-4402), 760);
      HashMap<String, ScheduleResponse> hashMap0 = new HashMap<String, ScheduleResponse>();
      ScheduleResponse scheduleResponse0 = new ScheduleResponse("7P\";+oK&pUXN>=k", (Schedule) null);
      hashMap0.put("", scheduleResponse0);
      studentPreEnrollmentResponse0.setSubjects(hashMap0);
      studentPreEnrollmentResponse0.getSubjects();
      assertEquals(340, studentPreEnrollmentResponse0.getTerm());
      assertEquals((-9296), studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse((String) null, 0, 69, 0, 0, 0);
      studentPreEnrollmentResponse0.getStudentRegistration();
      assertEquals(0, studentPreEnrollmentResponse0.getTerm());
      assertEquals(69, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 1158, 1158, 63, 63, 1692);
      studentPreEnrollmentResponse0.getStudentRegistration();
      assertEquals(2976, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(1158, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 2879, 2879, 2879, 2879, 0);
      studentPreEnrollmentResponse0.setOptionalCredits(117);
      int int0 = studentPreEnrollmentResponse0.getOptionalCredits();
      assertEquals(117, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("C", 25, 2208, (-3505), 25, 25);
      studentPreEnrollmentResponse0.setOptionalCredits(Integer.MIN_VALUE);
      int int0 = studentPreEnrollmentResponse0.getOptionalCredits();
      assertEquals(Integer.MIN_VALUE, studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse(":30CJCfJd[tkP x", 2803, 2803, 0, (-956), 64);
      int int0 = studentPreEnrollmentResponse0.getMaxOptionalCredits();
      assertEquals(0, int0);
      assertEquals(1911, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(2803, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 340, (-4402), (-1252), (-4402), 760);
      int int0 = studentPreEnrollmentResponse0.getMaxOptionalCredits();
      assertEquals((-1252), int0);
      assertEquals((-9296), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(340, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 1591, 0, 0, (-1428), 1591);
      int int0 = studentPreEnrollmentResponse0.getMaxMandatoryCredits();
      assertEquals(163, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(0, int0);
      assertEquals(1591, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 0, (-733), 67, 125, (-1038));
      int int0 = studentPreEnrollmentResponse0.getMaxMandatoryCredits();
      assertEquals(0, studentPreEnrollmentResponse0.getTerm());
      assertEquals((-733), int0);
      assertEquals((-1579), studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("g7K:gcya{R. !8\"V?1", (-2434), 77, 461845907, (-2434), 0);
      int int0 = studentPreEnrollmentResponse0.getMaxElectiveCredits();
      assertEquals(461843550, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(0, int0);
      assertEquals((-2434), studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("CharMatcher.and(", (-1181), (-1), 79, (-1), (-1181));
      int int0 = studentPreEnrollmentResponse0.getMaxElectiveCredits();
      assertEquals((-1104), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals((-1181), studentPreEnrollmentResponse0.getTerm());
      assertEquals((-1181), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("NOT_NULL", 0, 0, 0, 0, 0);
      int int0 = studentPreEnrollmentResponse0.getMaxCredits();
      assertEquals(0, studentPreEnrollmentResponse0.getTerm());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("9 [KXvi]'", 87855567, 87855567, 87855567, 0, 87855567);
      int int0 = studentPreEnrollmentResponse0.getMaxCredits();
      assertEquals(87855567, studentPreEnrollmentResponse0.getTerm());
      assertEquals(263566701, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 0, 1193, 1193, 0, 1193);
      int int0 = studentPreEnrollmentResponse0.getMaxComplementaryCredits();
      assertEquals(0, int0);
      assertEquals(3579, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(0, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("+!=Qk)5~%aUG", 980, 980, 0, (-1680), (-7187));
      int int0 = studentPreEnrollmentResponse0.getMaxComplementaryCredits();
      assertEquals((-1680), int0);
      assertEquals((-7887), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(980, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("h13[$\"O?&", 306654252, (-1173), 0, 69, 2337);
      studentPreEnrollmentResponse0.setMandatoryCredits(3495);
      int int0 = studentPreEnrollmentResponse0.getMandatoryCredits();
      assertEquals(3495, studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals(3495, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("g7K:gcya{R. !8\"V?1", (-2434), 77, 461845907, (-2434), 0);
      studentPreEnrollmentResponse0.setMandatoryCredits((-2434));
      int int0 = studentPreEnrollmentResponse0.getMandatoryCredits();
      assertEquals((-2434), studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals((-2434), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("WVQ", 509, 509, 0, 509, 509);
      studentPreEnrollmentResponse0.setElectiveCredits(509);
      int int0 = studentPreEnrollmentResponse0.getElectiveCredits();
      assertEquals(509, studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals(509, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("Converter.from(", (-1760), (-1760), (-1760), (-1144), (-1760));
      studentPreEnrollmentResponse0.setElectiveCredits((-1144));
      int int0 = studentPreEnrollmentResponse0.getElectiveCredits();
      assertEquals((-1144), studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals((-1144), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("l^RLYYPI?2", 1233, 1327, 1233, 957, (-5135));
      studentPreEnrollmentResponse0.setComplementaryCredits(957);
      int int0 = studentPreEnrollmentResponse0.getComplementaryCredits();
      assertEquals(957, studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals(957, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 1158, 1158, 63, 63, 1692);
      studentPreEnrollmentResponse0.setComplementaryCredits((-2013));
      int int0 = studentPreEnrollmentResponse0.getComplementaryCredits();
      assertEquals((-2013), studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals((-2013), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("FnF", (-1818), (-2592), (-32), (-210), (-2050585216));
      Subject subject0 = new Subject("", "FnF", "FnF", "FnF", "C", (-210), 47, (String) null, (Collection<String>) null, (-32), (Collection<String>) null, (Collection<String>) null);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, (Map<String, Schedule>) null);
      ArrayList<SubjectSchedule> arrayList0 = new ArrayList<SubjectSchedule>();
      // Undeclared exception!
      try { 
        studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("Fd", 2, 2, 2, 2, 2);
      // Undeclared exception!
      try { 
        studentPreEnrollmentResponse0.enrollSubject((SubjectSchedule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollmentResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("E", (-1306), Integer.MIN_VALUE, 0, (-1306), 16);
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Subject subject0 = new Subject("&(gxNP@PzCP", "E", "", "J~)x", "E", 16, (-1306), "", set0, (-25), set0, set0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      HashSet<SubjectSchedule> hashSet0 = new HashSet<SubjectSchedule>();
      studentPreEnrollmentResponse0.setMaxElectiveCredits((-2314));
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) hashSet0);
      assertEquals((-2314), studentPreEnrollmentResponse0.getMaxElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("O", 89, 89, 89, 89, 89);
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("O", "O", "O", "O", "O", 89, 89, "O", stack0, 89, stack0, stack0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals(356, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(0, studentPreEnrollmentResponse0.getOptionalCredits());
      assertEquals(89, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("M", (-2146), (-2146), (-2146), (-2146), (-2146));
      LinkedHashSet<SubjectSchedule> linkedHashSet0 = new LinkedHashSet<SubjectSchedule>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Subject subject0 = new Subject("M", "M", "M", "M", "M", (-2146), (-2146), "M", arrayDeque0, (-2146), arrayDeque0, arrayDeque0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      linkedHashSet0.add(subjectSchedule0);
      HashMap<String, Schedule> hashMap1 = new HashMap<String, Schedule>();
      LinkedHashSet<ClassSchedule> linkedHashSet1 = new LinkedHashSet<ClassSchedule>();
      Schedule schedule0 = new Schedule((-2146), "M", linkedHashSet1);
      hashMap1.put("C[Yj'?", schedule0);
      SubjectSchedule subjectSchedule1 = new SubjectSchedule(subject0, hashMap1);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule1, (Collection<SubjectSchedule>) linkedHashSet0);
      assertEquals((-8584), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals((-2146), studentPreEnrollmentResponse0.getTerm());
      assertTrue(studentPreEnrollmentResponse0.isMandatoryFull());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("E", (-1297), (-1297), (-1297), (-1297), (-1297));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("E", "E", "E", "E", "E", (-1297), (-1297), "E", linkedHashSet0, (-1297), linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      LinkedHashSet<SubjectSchedule> linkedHashSet1 = new LinkedHashSet<SubjectSchedule>();
      linkedHashSet1.add(subjectSchedule0);
      PriorityQueue<ClassSchedule> priorityQueue0 = new PriorityQueue<ClassSchedule>();
      Schedule schedule0 = new Schedule((-1297), "E", priorityQueue0);
      hashMap0.put("E", schedule0);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) linkedHashSet1);
      assertEquals((-2594), studentPreEnrollmentResponse0.getTotalCredits());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("E", (-1297), (-1297), (-1297), (-1297), (-1297));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("E", "E", "E", "E", "E", (-1297), (-1297), "E", linkedHashSet0, (-1297), linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      LinkedHashSet<SubjectSchedule> linkedHashSet1 = new LinkedHashSet<SubjectSchedule>();
      linkedHashSet1.add(subjectSchedule0);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) linkedHashSet1);
      assertEquals((-1297), studentPreEnrollmentResponse0.getTerm());
      assertEquals((-5188), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(0, studentPreEnrollmentResponse0.getTotalCredits());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("E", (-1297), (-1297), (-1297), (-1297), (-1297));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("E", "E", "E", "E", "E", (-1297), (-1297), "E", linkedHashSet0, (-1297), linkedHashSet0, linkedHashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0);
      assertEquals((-5188), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(0, studentPreEnrollmentResponse0.getTotalCredits());
      assertEquals((-1297), studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("K", 4600, 4600, 4600, 4600, 4600);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("K", "K", "K", "K", "C", 4600, 4600, "K", treeSet0, 4600, treeSet0, treeSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<ClassSchedule> arrayDeque0 = new ArrayDeque<ClassSchedule>();
      Schedule schedule0 = new Schedule(4600, "K", arrayDeque0);
      hashMap0.put("K", schedule0);
      ArrayDeque<SubjectSchedule> arrayDeque1 = new ArrayDeque<SubjectSchedule>();
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque1);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque1);
      assertTrue(studentPreEnrollmentResponse0.isComplementaryFull());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("3@", (-1633), (-1633), (-1633), (-1633), (-38));
      Subject subject0 = new Subject("3@", "3@", "3@", "3@", "O", (-38), (-1633), "3@", (Collection<String>) null, (-1633), (Collection<String>) null, (Collection<String>) null);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      LinkedList<SubjectSchedule> linkedList0 = new LinkedList<SubjectSchedule>();
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) linkedList0);
      assertEquals((-1633), studentPreEnrollmentResponse0.getTerm());
      assertEquals((-4937), studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("O", 4587, 4587, 4587, (-59), 4587);
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("O", "INSENSITIVE", "O", "", "M", 4587, (-7), "", vector0, (-1633), vector0, vector0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      TreeSet<ClassSchedule> treeSet0 = new TreeSet<ClassSchedule>();
      Schedule schedule0 = new Schedule((-7), "M", treeSet0);
      hashMap0.put("8VhAJ:I%BB`u<Mtl", schedule0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      Vector<SubjectSchedule> vector1 = new Vector<SubjectSchedule>();
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) vector1);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) vector1);
      assertEquals(4587, studentPreEnrollmentResponse0.getMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-122), (-122), (-122), (-122), (-122));
      HashSet<String> hashSet0 = new HashSet<String>();
      Subject subject0 = new Subject("", "", "", "", "", (-122), (-122), "", hashSet0, (-122), hashSet0, hashSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) null);
      assertEquals((-488), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals((-122), studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("K", 4600, 4600, 4600, 4600, 4600);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("K", "K", "K", "K", "C", 4600, 4600, "K", treeSet0, 4600, treeSet0, treeSet0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals(18400, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(4600, studentPreEnrollmentResponse0.getTerm());
      assertEquals(0, studentPreEnrollmentResponse0.getTotalCredits());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-14), (-14), (-14), (-14), (-14));
      boolean boolean0 = studentPreEnrollmentResponse0.isElectiveFull();
      assertEquals((-14), studentPreEnrollmentResponse0.getTerm());
      assertEquals((-56), studentPreEnrollmentResponse0.getMaxCredits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("V{wKDGvmMw%y7`M|Pd", 1316, 1316, 1316, 1316, 1316);
      boolean boolean0 = studentPreEnrollmentResponse0.isElectiveFull();
      assertFalse(boolean0);
      assertEquals(5264, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(1316, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("^1b\"^iA_\"P", 0, 0, 0, 0, 0);
      boolean boolean0 = studentPreEnrollmentResponse0.isComplementaryFull();
      assertEquals(0, studentPreEnrollmentResponse0.getTerm());
      assertEquals(0, studentPreEnrollmentResponse0.getMaxCredits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse(" dataL>engt@: ", 8249, 8249, 8249, 8249, 8249);
      boolean boolean0 = studentPreEnrollmentResponse0.isComplementaryFull();
      assertEquals(8249, studentPreEnrollmentResponse0.getTerm());
      assertFalse(boolean0);
      assertEquals(32996, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("O", 4587, 4587, 4587, (-59), 4587);
      studentPreEnrollmentResponse0.setOptionalCredits(4587);
      boolean boolean0 = studentPreEnrollmentResponse0.isOptionalFull();
      assertEquals(4587, studentPreEnrollmentResponse0.getOptionalCredits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollmentResponse", 421, 421, 421, 421, 421);
      boolean boolean0 = studentPreEnrollmentResponse0.isOptionalFull();
      assertFalse(boolean0);
      assertEquals(1684, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(421, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("3K^", (-68), (-68), (-68), (-68), (-68));
      boolean boolean0 = studentPreEnrollmentResponse0.isMandatoryFull();
      assertTrue(boolean0);
      assertEquals((-68), studentPreEnrollmentResponse0.getTerm());
      assertEquals((-272), studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("9koY/", 303, 303, 303, 303, 303);
      boolean boolean0 = studentPreEnrollmentResponse0.isMandatoryFull();
      assertEquals(303, studentPreEnrollmentResponse0.getTerm());
      assertEquals(1212, studentPreEnrollmentResponse0.getMaxCredits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 8215, 8215, 8215, 0, 0);
      studentPreEnrollmentResponse0.setStudentRegistration("");
      assertEquals(8215, studentPreEnrollmentResponse0.getTerm());
      assertEquals(16430, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("V{wKDGvmMw%y7`M|Pd", 1316, 1316, 1316, 1316, 1316);
      int int0 = studentPreEnrollmentResponse0.getOptionalCredits();
      assertEquals(0, int0);
      assertEquals(5264, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(1316, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("V{wKDGvmMw%y7`M|Pd", 1316, 1316, 1316, 1316, 1316);
      int int0 = studentPreEnrollmentResponse0.getTerm();
      assertEquals(5264, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(1316, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("O", (-10), (-10), (-10), (-10), (-10));
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("O", "O", "O", "O", "O", (-10), (-10), "O", stack0, (-10), stack0, stack0);
      HashMap<String, Schedule> hashMap0 = new HashMap<String, Schedule>();
      Stack<ClassSchedule> stack1 = new Stack<ClassSchedule>();
      Schedule schedule0 = new Schedule((-10), "O", stack1);
      hashMap0.put("O", schedule0);
      SubjectSchedule subjectSchedule0 = new SubjectSchedule(subject0, hashMap0);
      ArrayDeque<SubjectSchedule> arrayDeque0 = new ArrayDeque<SubjectSchedule>();
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      studentPreEnrollmentResponse0.enrollSubject(subjectSchedule0, (Collection<SubjectSchedule>) arrayDeque0);
      assertEquals((-20), studentPreEnrollmentResponse0.getOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-14), (-14), (-14), (-14), (-14));
      int int0 = studentPreEnrollmentResponse0.getTotalCredits();
      assertEquals(0, int0);
      assertEquals((-56), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals((-14), studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("V{wKDGvmMw%y7`M|Pd", 1316, 1316, 1316, 1316, 1316);
      studentPreEnrollmentResponse0.setMaxMandatoryCredits(0);
      assertEquals(0, studentPreEnrollmentResponse0.getMaxMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("V{wKDGvmMw%y7`M|Pd", 1316, 1316, 1316, 1316, 1316);
      studentPreEnrollmentResponse0.setMaxCredits(1316);
      assertEquals(1316, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("V{wKDGvmMw%y7`M|Pd", 1316, 1316, 1316, 1316, 1316);
      studentPreEnrollmentResponse0.getStudentRegistration();
      assertEquals(1316, studentPreEnrollmentResponse0.getTerm());
      assertEquals(5264, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-122), (-122), (-122), (-122), (-122));
      int int0 = studentPreEnrollmentResponse0.getMaxCredits();
      assertEquals((-122), studentPreEnrollmentResponse0.getTerm());
      assertEquals((-488), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("O", 4587, 4587, 4587, (-59), 4587);
      int int0 = studentPreEnrollmentResponse0.getMaxMandatoryCredits();
      assertEquals(13702, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(4587, studentPreEnrollmentResponse0.getTerm());
      assertEquals(4587, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-14), (-14), (-14), (-14), (-14));
      studentPreEnrollmentResponse0.setComplementaryCredits((-14));
      int int0 = studentPreEnrollmentResponse0.getTotalCredits();
      assertEquals((-14), studentPreEnrollmentResponse0.getComplementaryCredits());
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("O", 4587, 4587, 4587, (-59), 4587);
      studentPreEnrollmentResponse0.setMaxComplementaryCredits(14);
      assertEquals(14, studentPreEnrollmentResponse0.getMaxComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("V{wKDGvmMw%y7`M|Pd", 1316, 1316, 1316, 1316, 1316);
      int int0 = studentPreEnrollmentResponse0.getElectiveCredits();
      assertEquals(0, int0);
      assertEquals(1316, studentPreEnrollmentResponse0.getTerm());
      assertEquals(5264, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("O", 4587, 4587, 4587, (-59), 4587);
      int int0 = studentPreEnrollmentResponse0.getMaxElectiveCredits();
      assertEquals(13702, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(4587, studentPreEnrollmentResponse0.getTerm());
      assertEquals(4587, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", 8215, 8215, 8215, 0, 0);
      int int0 = studentPreEnrollmentResponse0.getMaxOptionalCredits();
      assertEquals(16430, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(8215, studentPreEnrollmentResponse0.getTerm());
      assertEquals(8215, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("<z?nslhCXZDCzy*y>g", 2529, 2529, 2529, 2529, 2529);
      int int0 = studentPreEnrollmentResponse0.getComplementaryCredits();
      assertEquals(2529, studentPreEnrollmentResponse0.getTerm());
      assertEquals(0, int0);
      assertEquals(10116, studentPreEnrollmentResponse0.getMaxCredits());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollmentResponse", 421, 421, 421, 421, 421);
      int int0 = studentPreEnrollmentResponse0.getMaxComplementaryCredits();
      assertEquals(421, int0);
      assertEquals(1684, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(421, studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("E", (-1306), Integer.MIN_VALUE, 0, (-1306), 16);
      studentPreEnrollmentResponse0.getSubjects();
      assertEquals(2147482358, studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals((-1306), studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("", (-14), (-14), (-14), (-14), (-14));
      int int0 = studentPreEnrollmentResponse0.getMandatoryCredits();
      assertEquals((-56), studentPreEnrollmentResponse0.getMaxCredits());
      assertEquals(0, int0);
      assertEquals((-14), studentPreEnrollmentResponse0.getTerm());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StudentPreEnrollmentResponse studentPreEnrollmentResponse0 = new StudentPreEnrollmentResponse("br.edu.ufcg.computacao.eureca.backend.api.http.response.preenrollment.StudentPreEnrollmentResponse", 421, 421, 421, 421, 421);
      studentPreEnrollmentResponse0.setMaxOptionalCredits(421);
      assertEquals(421, studentPreEnrollmentResponse0.getTerm());
      assertEquals(421, studentPreEnrollmentResponse0.getMaxOptionalCredits());
      assertEquals(1684, studentPreEnrollmentResponse0.getMaxCredits());
  }
}
