/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:49:47 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.Registration;
import br.edu.ufcg.computacao.eureca.backend.core.models.RiskClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentStatus;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Student_ESTest extends Student_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("cD=TLxWoy1~7:ZA", "1/xj4`", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 5, 2966, 2966, 2, 5, 1023, 5, 2966, 0, (-154), vector0, arrayDeque0, arrayDeque0, arrayDeque0, vector0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(1023, curriculum0.getMinNumberOfTerms());
      assertEquals(5, curriculum0.getMaxNumberOfTerms());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("cD=TLxWoy1~7:ZA", curriculum0.getCourseCode());
      assertEquals(5939.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("1/xj4`", curriculum0.getCurriculumCode());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2966, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals((-154), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2966, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2966, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(2966));
      assertFalse(vector0.contains("cD=TLxWoy1~7:ZA"));
      assertFalse(arrayDeque0.contains("cD=TLxWoy1~7:ZA"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("Y:Rjds\"66qP7NL=7e@", "th*|dH#i_lZh>!", "Y:Rjds\"66qP7NL=7e@", "th*|dH#i_lZh>!", "B+2.}}FtF;{d", "distance", "Y:Rjds\"66qP7NL=7e@", "cD=TLxWoy1~7:ZA", "cD=TLxWoy1~7:ZA", "pND./9y", "j-v6cTMFGP3=", "$w$IAM7", studentStatus0, "Y:Rjds\"66qP7NL=7e@", "CharMatcher.javaLetterOrDigit()", "pND./9y", "Y:Rjds\"66qP7NL=7e@", "B~vp", ":", "distance", "CharMatcher.javaLetterOrDigit()", "", curriculum0, (-154), 5, 0, 2, (-2922), 0, 2, (-2922), (-1.0), (-2922), (-154), 8, (-2922), (-154), 1073741823, 0.0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(1023, curriculum0.getMinNumberOfTerms());
      assertEquals(5, curriculum0.getMaxNumberOfTerms());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("cD=TLxWoy1~7:ZA", curriculum0.getCourseCode());
      assertEquals(5939.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("1/xj4`", curriculum0.getCurriculumCode());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2966, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals((-154), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2966, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2966, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getName());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getCountry());
      assertEquals((-154), student0.getCompletedTerms());
      assertEquals("th*|dH#i_lZh>!", student0.getBirthDate());
      assertEquals("B~vp", student0.getAffirmativePolicy());
      assertEquals("distance", student0.getSecondarySchoolGraduationYear());
      assertEquals("pND./9y", student0.getPlaceOfBirth());
      assertEquals("pND./9y", student0.getAdmissionTerm());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals("j-v6cTMFGP3=", student0.getRace());
      assertEquals((-2922), student0.getComplementaryHours());
      assertEquals("distance", student0.getGender());
      assertEquals(1073741823, student0.getEnrolledCredits());
      assertEquals((-2922.0), student0.getIea(), 0.01);
      assertEquals("$w$IAM7", student0.getStatusStr());
      assertEquals("th*|dH#i_lZh>!", student0.getNationalId());
      assertEquals(":", student0.getSecondarySchool());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getCurriculumCode());
      assertEquals((-154), student0.getMobilityTerms());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getNationality());
      assertEquals(7, student0.getCompletedCredits());
      assertEquals(8, student0.getSuspendedTerms());
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getStatusTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2922), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getCourseCode());
      assertEquals("B+2.}}FtF;{d", student0.getEmail());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getMaritalStatus());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-154), student0.getMandatoryHours());
      assertEquals(5, student0.getMandatoryCredits());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getAdmissionStr());
      assertEquals((-2922.0), student0.getGpa(), 0.01);
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getDisabilities());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertFalse(arrayList0.contains(0));
      assertFalse(vector0.contains("Y:Rjds\"66qP7NL=7e@"));
      assertFalse(arrayDeque0.contains("Y:Rjds\"66qP7NL=7e@"));
      assertNotNull(student0);
      
      RiskClass riskClass0 = student0.computeRiskClass();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(1023, curriculum0.getMinNumberOfTerms());
      assertEquals(5, curriculum0.getMaxNumberOfTerms());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("cD=TLxWoy1~7:ZA", curriculum0.getCourseCode());
      assertEquals(5939.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("1/xj4`", curriculum0.getCurriculumCode());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2966, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals((-154), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2966, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2966, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getName());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getCountry());
      assertEquals((-154), student0.getCompletedTerms());
      assertEquals("th*|dH#i_lZh>!", student0.getBirthDate());
      assertEquals("B~vp", student0.getAffirmativePolicy());
      assertEquals("distance", student0.getSecondarySchoolGraduationYear());
      assertEquals("pND./9y", student0.getPlaceOfBirth());
      assertEquals("pND./9y", student0.getAdmissionTerm());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals("j-v6cTMFGP3=", student0.getRace());
      assertEquals((-2922), student0.getComplementaryHours());
      assertEquals("distance", student0.getGender());
      assertEquals(1073741823, student0.getEnrolledCredits());
      assertEquals((-2922.0), student0.getIea(), 0.01);
      assertEquals("$w$IAM7", student0.getStatusStr());
      assertEquals("th*|dH#i_lZh>!", student0.getNationalId());
      assertEquals(":", student0.getSecondarySchool());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getCurriculumCode());
      assertEquals((-154), student0.getMobilityTerms());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getNationality());
      assertEquals(7, student0.getCompletedCredits());
      assertEquals(8, student0.getSuspendedTerms());
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getStatusTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2922), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getCourseCode());
      assertEquals("B+2.}}FtF;{d", student0.getEmail());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getMaritalStatus());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-154), student0.getMandatoryHours());
      assertEquals(5, student0.getMandatoryCredits());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getAdmissionStr());
      assertEquals((-2922.0), student0.getGpa(), 0.01);
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getDisabilities());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertFalse(arrayList0.contains(0));
      assertFalse(vector0.contains("Y:Rjds\"66qP7NL=7e@"));
      assertFalse(arrayDeque0.contains("Y:Rjds\"66qP7NL=7e@"));
      assertEquals(RiskClass.NOT_APPLICABLE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "", "", "", "", ">!1L1 ", "", "CANCELAMENTO POR ABANDONO", "CANCELAMENTO POR ABANDONO", "Functions.constant(", "<@]kX]48waqpt%", studentStatus0, "<@]kX]48waqpt%", "&],", ", statusStr='", ", statusStr='", ", statusStr='", "l0v*2@N]{O]%3_:", "Functions.constant(", ", statusStr='", "$e7WZ", (Curriculum) null, 125, 125, 2361, 539, 8247, (-1177), 0, 653.654255099155, 4.0, 539, 0, 40, 0, 0, 8247, 0.0);
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-513), student0.getCompletedCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals("<@]kX]48waqpt%", student0.getStatusTerm());
      assertEquals(", statusStr='", student0.getDisabilities());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(125, student0.getMandatoryHours());
      assertEquals(8247, student0.getEnrolledCredits());
      assertEquals("Functions.constant(", student0.getRace());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", statusStr='", student0.getAffirmativePolicy());
      assertEquals(">!1L1 ", student0.getMaritalStatus());
      assertEquals("", student0.getEmail());
      assertEquals(653.654255099155, student0.getGpa(), 0.01);
      assertEquals("Functions.constant(", student0.getSecondarySchoolGraduationYear());
      assertEquals(2361, student0.getOptionalHours());
      assertEquals("", student0.getName());
      assertEquals(8247, student0.getComplementaryHours());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getCountry());
      assertEquals("$e7WZ", student0.getCurriculumCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getPlaceOfBirth());
      assertEquals((-1177), student0.getComplementaryCredits());
      assertEquals(", statusStr='", student0.getCourseCode());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(539, student0.getOptionalCredits());
      assertEquals("<@]kX]48waqpt%", student0.getStatusStr());
      assertEquals(40, student0.getSuspendedTerms());
      assertEquals("l0v*2@N]{O]%3_:", student0.getSecondarySchool());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(539.0, student0.getIea(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals("&],", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(", statusStr='", student0.getAdmissionTerm());
      assertNotNull(student0);
      
      boolean boolean0 = student0.isDropout();
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-513), student0.getCompletedCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals("<@]kX]48waqpt%", student0.getStatusTerm());
      assertEquals(", statusStr='", student0.getDisabilities());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(125, student0.getMandatoryHours());
      assertEquals(8247, student0.getEnrolledCredits());
      assertEquals("Functions.constant(", student0.getRace());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", statusStr='", student0.getAffirmativePolicy());
      assertEquals(">!1L1 ", student0.getMaritalStatus());
      assertEquals("", student0.getEmail());
      assertEquals(653.654255099155, student0.getGpa(), 0.01);
      assertEquals("Functions.constant(", student0.getSecondarySchoolGraduationYear());
      assertEquals(2361, student0.getOptionalHours());
      assertEquals("", student0.getName());
      assertEquals(8247, student0.getComplementaryHours());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getCountry());
      assertEquals("$e7WZ", student0.getCurriculumCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getPlaceOfBirth());
      assertEquals((-1177), student0.getComplementaryCredits());
      assertEquals(", statusStr='", student0.getCourseCode());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(539, student0.getOptionalCredits());
      assertEquals("<@]kX]48waqpt%", student0.getStatusStr());
      assertEquals(40, student0.getSuspendedTerms());
      assertEquals("l0v*2@N]{O]%3_:", student0.getSecondarySchool());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(539.0, student0.getIea(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals("&],", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(", statusStr='", student0.getAdmissionTerm());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("", "", "", "", "", "", "jm9LYy~6jaj-&", "", "jm9LYy~6jaj-&", "", "com.google.common.base.Predicates$IsEqualToPredicate", "com.google.common.base.Predicates$IsEqualToPredicate", studentStatus0, "CONCLUIDO - NAO COLOU GRAU", "", "", "", "com.google.common.base.Predicates$IsEqualToPredicate", "", "", "CONCLUIDO - NAO COLOU GRAU", "BF&4} D7", (Curriculum) null, (-545), (-545), 0, (-545), (-545), (-545), 0, (-1.0), (-1.0), 0, 0, (-545), 0, 0, (-545), 0);
      assertEquals("", student0.getDisabilities());
      assertEquals("jm9LYy~6jaj-&", student0.getCountry());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getRace());
      assertEquals((-545), student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-545), student0.getComplementaryHours());
      assertEquals("", student0.getName());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getAffirmativePolicy());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getStatusTerm());
      assertEquals("", student0.getBirthDate());
      assertEquals((-545), student0.getComplementaryCredits());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-545), student0.getMandatoryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getStatusStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("jm9LYy~6jaj-&", student0.getMaritalStatus());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-545), student0.getSuspendedTerms());
      assertEquals("", student0.getNationality());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getCourseCode());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getNationalId());
      assertEquals((-545), student0.getOptionalCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-1635), student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("BF&4} D7", student0.getCurriculumCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-545), student0.getMandatoryHours());
      assertEquals("", student0.getGender());
      assertNotNull(student0);
      
      boolean boolean0 = student0.isAlumnus();
      assertEquals("", student0.getDisabilities());
      assertEquals("jm9LYy~6jaj-&", student0.getCountry());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getRace());
      assertEquals((-545), student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-545), student0.getComplementaryHours());
      assertEquals("", student0.getName());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getAffirmativePolicy());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getStatusTerm());
      assertEquals("", student0.getBirthDate());
      assertEquals((-545), student0.getComplementaryCredits());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-545), student0.getMandatoryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getStatusStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("jm9LYy~6jaj-&", student0.getMaritalStatus());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-545), student0.getSuspendedTerms());
      assertEquals("", student0.getNationality());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getCourseCode());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getNationalId());
      assertEquals((-545), student0.getOptionalCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-1635), student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("BF&4} D7", student0.getCurriculumCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-545), student0.getMandatoryHours());
      assertEquals("", student0.getGender());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("%/WK|j)?4[ov", "", "%/WK|j)?4[ov", "INACCURATE", "", "CANCELAMENTO P/ MUDANCA CURSO", "CANCELAMENTO P/ MUDANCA CURSO", "INACCURATE", (String) null, ", gpa=", (String) null, "c,T@CuHrR.", studentStatus0, (String) null, "KdREA-n=g]", (String) null, (String) null, (String) null, "c,T@CuHrR.", (String) null, "INACCURATE", "Vu/;I", (Curriculum) null, 133, 133, (-1934), 1571, 0, 1571, 0, 0.0, (-1934), 0, 1571, 0, 133, 0, 0, 133);
      assertEquals(0, student0.getEnrolledCredits());
      assertNull(student0.getRace());
      assertEquals(133, student0.getMandatoryHours());
      assertEquals((-1934.0), student0.getMc(), 0.01);
      assertEquals("c,T@CuHrR.", student0.getSecondarySchool());
      assertEquals(133, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(133, student0.getMandatoryCredits());
      assertEquals("INACCURATE", student0.getBirthDate());
      assertEquals("", student0.getEmail());
      assertEquals("%/WK|j)?4[ov", student0.getName());
      assertEquals(1571, student0.getComplementaryCredits());
      assertEquals("Vu/;I", student0.getCurriculumCode());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-1934), student0.getOptionalHours());
      assertEquals(133.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getDisabilities());
      assertEquals(3275, student0.getCompletedCredits());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getMaritalStatus());
      assertEquals("KdREA-n=g]", student0.getAdmissionStr());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("c,T@CuHrR.", student0.getStatusStr());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(", gpa=", student0.getPlaceOfBirth());
      assertNull(student0.getStatusTerm());
      assertEquals("INACCURATE", student0.getNationality());
      assertEquals(1571, student0.getCompletedTerms());
      assertNull(student0.getAffirmativePolicy());
      assertEquals("INACCURATE", student0.getCourseCode());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationalId());
      assertEquals(1571, student0.getOptionalCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getGender());
      assertNull(student0.getCountry());
      assertNotNull(student0);
      
      boolean boolean0 = student0.isActive();
      assertEquals(0, student0.getEnrolledCredits());
      assertNull(student0.getRace());
      assertEquals(133, student0.getMandatoryHours());
      assertEquals((-1934.0), student0.getMc(), 0.01);
      assertEquals("c,T@CuHrR.", student0.getSecondarySchool());
      assertEquals(133, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(133, student0.getMandatoryCredits());
      assertEquals("INACCURATE", student0.getBirthDate());
      assertEquals("", student0.getEmail());
      assertEquals("%/WK|j)?4[ov", student0.getName());
      assertEquals(1571, student0.getComplementaryCredits());
      assertEquals("Vu/;I", student0.getCurriculumCode());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-1934), student0.getOptionalHours());
      assertEquals(133.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getDisabilities());
      assertEquals(3275, student0.getCompletedCredits());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getMaritalStatus());
      assertEquals("KdREA-n=g]", student0.getAdmissionStr());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("c,T@CuHrR.", student0.getStatusStr());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(", gpa=", student0.getPlaceOfBirth());
      assertNull(student0.getStatusTerm());
      assertEquals("INACCURATE", student0.getNationality());
      assertEquals(1571, student0.getCompletedTerms());
      assertNull(student0.getAffirmativePolicy());
      assertEquals("INACCURATE", student0.getCourseCode());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationalId());
      assertEquals(1571, student0.getOptionalCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getGender());
      assertNull(student0.getCountry());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("5W/ Te*xNoI1rsm", "com.google.common.base.Suppliers$SupplierFunctionImpl", "", "", "org.apache.commons.io.filefilter.CanReadFileFilter", "", "AK-%rWFzIu3`4", "", "v=jVu9Dt'd#~(SzY]u", "org.apache.commons.io.filefilter.CanReadFileFilter", "AK-%rWFzIu3`4", "com.google.common.collect.AbstractMultimap", studentStatus0, (String) null, "", "6[hFtlF`5", "Cdy9s:@r_`;:", "&xu%[!-Gsu {ONR:", "com.google.common.base.CharMatcher$BitSetMatcher", "", "v=jVu9Dt'd#~(SzY]u", "", (Curriculum) null, (-3046), (-1175), 0, (-3046), 0, 0, 0, 0, 0.0, (-423.5107941948), (-352), 0, 0, 953, (-1175), 953);
      assertEquals("", student0.getName());
      assertEquals("org.apache.commons.io.filefilter.CanReadFileFilter", student0.getEmail());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$BitSetMatcher", student0.getSecondarySchool());
      assertEquals((-4221), student0.getCompletedCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-423.5107941948), student0.getIea(), 0.01);
      assertEquals((-3046), student0.getMandatoryHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1175), student0.getEnrolledCredits());
      assertEquals((-3046), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals(953, student0.getMobilityTerms());
      assertEquals((-352), student0.getCompletedTerms());
      assertEquals("&xu%[!-Gsu {ONR:", student0.getAffirmativePolicy());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("com.google.common.base.Suppliers$SupplierFunctionImpl", student0.getNationalId());
      assertEquals("v=jVu9Dt'd#~(SzY]u", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("AK-%rWFzIu3`4", student0.getMaritalStatus());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNull(student0.getStatusTerm());
      assertEquals("AK-%rWFzIu3`4", student0.getRace());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("6[hFtlF`5", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("org.apache.commons.io.filefilter.CanReadFileFilter", student0.getPlaceOfBirth());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getStatusStr());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("v=jVu9Dt'd#~(SzY]u", student0.getCountry());
      assertEquals((-1175), student0.getMandatoryCredits());
      assertEquals("Cdy9s:@r_`;:", student0.getDisabilities());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(953.0, student0.getAdmissionGrade(), 0.01);
      assertNotNull(student0);
      
      int int0 = student0.getSuspendedTerms();
      assertEquals("", student0.getName());
      assertEquals("org.apache.commons.io.filefilter.CanReadFileFilter", student0.getEmail());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$BitSetMatcher", student0.getSecondarySchool());
      assertEquals((-4221), student0.getCompletedCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-423.5107941948), student0.getIea(), 0.01);
      assertEquals((-3046), student0.getMandatoryHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1175), student0.getEnrolledCredits());
      assertEquals((-3046), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals(953, student0.getMobilityTerms());
      assertEquals((-352), student0.getCompletedTerms());
      assertEquals("&xu%[!-Gsu {ONR:", student0.getAffirmativePolicy());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("com.google.common.base.Suppliers$SupplierFunctionImpl", student0.getNationalId());
      assertEquals("v=jVu9Dt'd#~(SzY]u", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("AK-%rWFzIu3`4", student0.getMaritalStatus());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNull(student0.getStatusTerm());
      assertEquals("AK-%rWFzIu3`4", student0.getRace());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("6[hFtlF`5", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("org.apache.commons.io.filefilter.CanReadFileFilter", student0.getPlaceOfBirth());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getStatusStr());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("v=jVu9Dt'd#~(SzY]u", student0.getCountry());
      assertEquals((-1175), student0.getMandatoryCredits());
      assertEquals("Cdy9s:@r_`;:", student0.getDisabilities());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(953.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("Ints.stringConverter()", "c5q-A]VuJ;koP3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 493, 0, 493, 0, 0, 5901, 577, 5901, (-263), treeSet0, treeSet0, priorityQueue0, treeSet0, priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertFalse(treeSet0.contains("c5q-A]VuJ;koP3"));
      assertFalse(priorityQueue0.contains("c5q-A]VuJ;koP3"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "", "=Mho18%K^ZsL!", "(Blf6+pNT)9EP)cCC", "\"", "9aUyR0C2Wf6S,#;4", "g-ju2N3g", "(Blf6+pNT)9EP)cCC", "*a", "", "1{Kr1h?=6=zE'gSH3_", studentStatus0, ", name='", "c5q-A]VuJ;koP3", "", "", "?NqD-", "=Mho18%K^ZsL!", (String) null, "?NqD-", "./ew~aB<fIwIEItTX.", curriculum0, (-2363), Integer.MIN_VALUE, 0, 0, 493, 493, 0, 577, Integer.MIN_VALUE, (-3537.7237676461), Integer.MIN_VALUE, Integer.MIN_VALUE, 493, (-921), (-2363), (-2363));
      assertEquals(0, priorityQueue0.size());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("?NqD-", student0.getAffirmativePolicy());
      assertEquals(577.0, student0.getGpa(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals((-2363.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-2147483155), student0.getCompletedCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(Integer.MIN_VALUE, student0.getMandatoryCredits());
      assertEquals("\"", student0.getGender());
      assertEquals("1{Kr1h?=6=zE'gSH3_", student0.getStatusStr());
      assertEquals("*a", student0.getPlaceOfBirth());
      assertEquals(493, student0.getComplementaryCredits());
      assertEquals(Integer.MIN_VALUE, student0.getSuspendedTerms());
      assertEquals((-2363), student0.getEnrolledCredits());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals((-2363), student0.getMandatoryHours());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals((-2.147483648E9), student0.getMc(), 0.01);
      assertEquals((-3537.7237676461), student0.getIea(), 0.01);
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals("", student0.getName());
      assertEquals("?NqD-", student0.getCourseCode());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals(", name='", student0.getStatusTerm());
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals(493, student0.getComplementaryHours());
      assertEquals(Integer.MIN_VALUE, student0.getCompletedTerms());
      assertEquals("./ew~aB<fIwIEItTX.", student0.getCurriculumCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(493, student0.getInstitutionalEnrollments());
      assertEquals("g-ju2N3g", student0.getNationality());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getOptionalCredits());
      assertFalse(treeSet0.contains("\""));
      assertFalse(priorityQueue0.contains("\""));
      assertNotNull(student0);
      
      int int0 = student0.getSuspendedTerms();
      assertEquals(0, priorityQueue0.size());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("?NqD-", student0.getAffirmativePolicy());
      assertEquals(577.0, student0.getGpa(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals((-2363.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-2147483155), student0.getCompletedCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(Integer.MIN_VALUE, student0.getMandatoryCredits());
      assertEquals("\"", student0.getGender());
      assertEquals("1{Kr1h?=6=zE'gSH3_", student0.getStatusStr());
      assertEquals("*a", student0.getPlaceOfBirth());
      assertEquals(493, student0.getComplementaryCredits());
      assertEquals(Integer.MIN_VALUE, student0.getSuspendedTerms());
      assertEquals((-2363), student0.getEnrolledCredits());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals((-2363), student0.getMandatoryHours());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals((-2.147483648E9), student0.getMc(), 0.01);
      assertEquals((-3537.7237676461), student0.getIea(), 0.01);
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals("", student0.getName());
      assertEquals("?NqD-", student0.getCourseCode());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals(", name='", student0.getStatusTerm());
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals(493, student0.getComplementaryHours());
      assertEquals(Integer.MIN_VALUE, student0.getCompletedTerms());
      assertEquals("./ew~aB<fIwIEItTX.", student0.getCurriculumCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(493, student0.getInstitutionalEnrollments());
      assertEquals("g-ju2N3g", student0.getNationality());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getOptionalCredits());
      assertFalse(treeSet0.contains("\""));
      assertFalse(priorityQueue0.contains("\""));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("CANCELADO REPROVOU TODAS POR FALTAS", "#TX50j7X-8IKt", "V$jv+\"{_)c{WK[9", "", (String) null, "", "#TX50j7X-8IKt", "", "CANCELADO REPROVOU TODAS POR FALTAS", "#TX50j7X-8IKt", "com.google.common.collect.Maps$BiMapConverter", "", studentStatus0, (String) null, (String) null, "bs67L<cVFgTR5Ot", "", "", "", (String) null, "com.google.common.collect.Maps$BiMapConverter", "", (Curriculum) null, 4374, (-1899), 4374, 4374, (-260), (-555), (-1), 0.0, (-555), 894.72192561, (-260), 1, 39, 0, 0, 0);
      assertEquals("", student0.getBirthDate());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertNull(student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(4374, student0.getMandatoryHours());
      assertEquals((-555), student0.getComplementaryCredits());
      assertEquals("", student0.getCurriculumCode());
      assertNull(student0.getAdmissionStr());
      assertEquals("", student0.getStatusStr());
      assertEquals("#TX50j7X-8IKt", student0.getPlaceOfBirth());
      assertEquals(4374, student0.getOptionalCredits());
      assertEquals((-260), student0.getCompletedTerms());
      assertEquals("V$jv+\"{_)c{WK[9", student0.getName());
      assertEquals((-555.0), student0.getMc(), 0.01);
      assertEquals(894.72192561, student0.getIea(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getNationality());
      assertNull(student0.getStatusTerm());
      assertEquals(39, student0.getInstitutionalEnrollments());
      assertEquals("#TX50j7X-8IKt", student0.getNationalId());
      assertEquals(4374, student0.getOptionalHours());
      assertEquals((-260), student0.getComplementaryHours());
      assertEquals((-1899), student0.getMandatoryCredits());
      assertEquals("com.google.common.collect.Maps$BiMapConverter", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("bs67L<cVFgTR5Ot", student0.getAdmissionTerm());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-1), student0.getAttemptedCredits());
      assertEquals("com.google.common.collect.Maps$BiMapConverter", student0.getRace());
      assertEquals("#TX50j7X-8IKt", student0.getMaritalStatus());
      assertEquals(1, student0.getSuspendedTerms());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getCountry());
      assertEquals(1920, student0.getCompletedCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertNotNull(student0);
      
      String string0 = student0.getStatusTerm();
      assertEquals("", student0.getBirthDate());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertNull(student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(4374, student0.getMandatoryHours());
      assertEquals((-555), student0.getComplementaryCredits());
      assertEquals("", student0.getCurriculumCode());
      assertNull(student0.getAdmissionStr());
      assertEquals("", student0.getStatusStr());
      assertEquals("#TX50j7X-8IKt", student0.getPlaceOfBirth());
      assertEquals(4374, student0.getOptionalCredits());
      assertEquals((-260), student0.getCompletedTerms());
      assertEquals("V$jv+\"{_)c{WK[9", student0.getName());
      assertEquals((-555.0), student0.getMc(), 0.01);
      assertEquals(894.72192561, student0.getIea(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getNationality());
      assertNull(student0.getStatusTerm());
      assertEquals(39, student0.getInstitutionalEnrollments());
      assertEquals("#TX50j7X-8IKt", student0.getNationalId());
      assertEquals(4374, student0.getOptionalHours());
      assertEquals((-260), student0.getComplementaryHours());
      assertEquals((-1899), student0.getMandatoryCredits());
      assertEquals("com.google.common.collect.Maps$BiMapConverter", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("bs67L<cVFgTR5Ot", student0.getAdmissionTerm());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-1), student0.getAttemptedCredits());
      assertEquals("com.google.common.collect.Maps$BiMapConverter", student0.getRace());
      assertEquals("#TX50j7X-8IKt", student0.getMaritalStatus());
      assertEquals(1, student0.getSuspendedTerms());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getCountry());
      assertEquals(1920, student0.getCompletedCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("%B5!4@", "0q?jb", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 2003, 2003, (-159), 41, (-159), 2003, 8, 0, 41, 2003, vector0, vector0, vector0, vector0, vector0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(2003));
      assertFalse(vector0.contains("%B5!4@"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "A j7db", "", "", ", mandatoryCredits=", "com.google.common.base.Functions$ToStringFunction", "com.google.common.base.Functions$ToStringFunction", ".:sO?%sXA", ".:sO?%sXA", "A j7db", ".:sO?%sXA", "", studentStatus0, "", "B=", ", mandatoryCredits=", "0q?jb", "g&VJ", "~:&km4@iZ", "0q?jb", "A j7db", "", curriculum0, 0, 822, 262, 2003, 0, 8, 0, (-1353.549466524), 0.0, 822, 822, 2003, 822, 0, 795, 41);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals(262, student0.getOptionalHours());
      assertEquals(795, student0.getEnrolledCredits());
      assertEquals(", mandatoryCredits=", student0.getEmail());
      assertEquals(2003, student0.getOptionalCredits());
      assertEquals(2833, student0.getCompletedCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("A j7db", student0.getNationalId());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getGender());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getMaritalStatus());
      assertEquals("A j7db", student0.getCourseCode());
      assertEquals(822, student0.getInstitutionalEnrollments());
      assertEquals(".:sO?%sXA", student0.getCountry());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(".:sO?%sXA", student0.getRace());
      assertEquals(8, student0.getComplementaryCredits());
      assertEquals((-1353.549466524), student0.getGpa(), 0.01);
      assertEquals("0q?jb", student0.getSecondarySchoolGraduationYear());
      assertEquals(822.0, student0.getIea(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(822, student0.getCompletedTerms());
      assertEquals("B=", student0.getAdmissionStr());
      assertEquals("~:&km4@iZ", student0.getSecondarySchool());
      assertEquals(2003, student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("g&VJ", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusTerm());
      assertEquals(", mandatoryCredits=", student0.getAdmissionTerm());
      assertEquals("A j7db", student0.getPlaceOfBirth());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("0q?jb", student0.getDisabilities());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(".:sO?%sXA", student0.getNationality());
      assertEquals("", student0.getName());
      assertEquals(41.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(822, student0.getMandatoryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertFalse(arrayList0.contains(41));
      assertFalse(vector0.contains(""));
      assertNotNull(student0);
      
      String string0 = student0.getStatusTerm();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals(262, student0.getOptionalHours());
      assertEquals(795, student0.getEnrolledCredits());
      assertEquals(", mandatoryCredits=", student0.getEmail());
      assertEquals(2003, student0.getOptionalCredits());
      assertEquals(2833, student0.getCompletedCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("A j7db", student0.getNationalId());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getGender());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getMaritalStatus());
      assertEquals("A j7db", student0.getCourseCode());
      assertEquals(822, student0.getInstitutionalEnrollments());
      assertEquals(".:sO?%sXA", student0.getCountry());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(".:sO?%sXA", student0.getRace());
      assertEquals(8, student0.getComplementaryCredits());
      assertEquals((-1353.549466524), student0.getGpa(), 0.01);
      assertEquals("0q?jb", student0.getSecondarySchoolGraduationYear());
      assertEquals(822.0, student0.getIea(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(822, student0.getCompletedTerms());
      assertEquals("B=", student0.getAdmissionStr());
      assertEquals("~:&km4@iZ", student0.getSecondarySchool());
      assertEquals(2003, student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("g&VJ", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusTerm());
      assertEquals(", mandatoryCredits=", student0.getAdmissionTerm());
      assertEquals("A j7db", student0.getPlaceOfBirth());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("0q?jb", student0.getDisabilities());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(".:sO?%sXA", student0.getNationality());
      assertEquals("", student0.getName());
      assertEquals(41.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(822, student0.getMandatoryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertFalse(arrayList0.contains(41));
      assertFalse(vector0.contains(""));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "F__file", "F__file", "k", "F__file", "F__file", "F__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", ", minMandatoryCreditsNeeded=", (String) null, studentStatus0, "", "", "", "F__file", (String) null, "T/];x/Gzx(r@(", "=B_MS", "", "k", (Curriculum) null, 669, 669, 669, 96, 3, 669, 669, 0.0, 0.0, 0.0, 96, 3047, 3, 3, 3, 0.0);
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals("F__file", student0.getNationalId());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals("k", student0.getBirthDate());
      assertEquals(", ", student0.getCountry());
      assertEquals("F__file", student0.getGender());
      assertEquals(669, student0.getOptionalHours());
      assertEquals(669, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals(669, student0.getAttemptedCredits());
      assertEquals(1434, student0.getCompletedCredits());
      assertEquals(96, student0.getOptionalCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertNull(student0.getStatusStr());
      assertEquals("F__file", student0.getDisabilities());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(3047, student0.getSuspendedTerms());
      assertEquals("=B_MS", student0.getSecondarySchoolGraduationYear());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(", minMandatoryCreditsNeeded=", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(669, student0.getMandatoryHours());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("F__file", student0.getMaritalStatus());
      assertEquals("", student0.getStatusTerm());
      assertEquals(96, student0.getCompletedTerms());
      assertEquals(669, student0.getMandatoryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals("F__file", student0.getEmail());
      assertNull(student0.getAffirmativePolicy());
      assertEquals("F__file", student0.getName());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNotNull(student0);
      
      String string0 = student0.getStatusStr();
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals("F__file", student0.getNationalId());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals("k", student0.getBirthDate());
      assertEquals(", ", student0.getCountry());
      assertEquals("F__file", student0.getGender());
      assertEquals(669, student0.getOptionalHours());
      assertEquals(669, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals(669, student0.getAttemptedCredits());
      assertEquals(1434, student0.getCompletedCredits());
      assertEquals(96, student0.getOptionalCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertNull(student0.getStatusStr());
      assertEquals("F__file", student0.getDisabilities());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(3047, student0.getSuspendedTerms());
      assertEquals("=B_MS", student0.getSecondarySchoolGraduationYear());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(", minMandatoryCreditsNeeded=", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(669, student0.getMandatoryHours());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("F__file", student0.getMaritalStatus());
      assertEquals("", student0.getStatusTerm());
      assertEquals(96, student0.getCompletedTerms());
      assertEquals(669, student0.getMandatoryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals("F__file", student0.getEmail());
      assertNull(student0.getAffirmativePolicy());
      assertEquals("F__file", student0.getName());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", ", country='", "X&oy A&09n", ", country='", ", country='", "#?~M']3mrGJ", "", "#?~M']3mrGJ", "", studentStatus0, "", "SENSITIVE", "", "", "", "#?~M']3mrGJ", "", "xE", "org.apache.commons.io.filefilter.DirectoryFileFilter", (Curriculum) null, 0, 0, 1099, 0, 0, Integer.MAX_VALUE, 0, (-2840.882315319278), 0, 0.5, 1099, 0, 0, (-2634), 450, (-1058.0495254042));
      assertEquals("", student0.getStatusStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-1058.0495254042), student0.getAdmissionGrade(), 0.01);
      assertEquals(0.5, student0.getIea(), 0.01);
      assertEquals(Integer.MAX_VALUE, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("#?~M']3mrGJ", student0.getCountry());
      assertEquals("#?~M']3mrGJ", student0.getRace());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1099, student0.getOptionalHours());
      assertEquals(", country='", student0.getNationality());
      assertEquals("SENSITIVE", student0.getAdmissionStr());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("X&oy A&09n", student0.getGender());
      assertEquals("org.apache.commons.io.filefilter.DirectoryFileFilter", student0.getCurriculumCode());
      assertEquals(450, student0.getEnrolledCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryCredits());
      assertEquals((-2634), student0.getMobilityTerms());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-2840.882315319278), student0.getGpa(), 0.01);
      assertEquals("xE", student0.getCourseCode());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", country='", student0.getEmail());
      assertEquals(1099, student0.getCompletedTerms());
      assertEquals("", student0.getName());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getNationalId());
      assertEquals(", country='", student0.getMaritalStatus());
      assertEquals("#?~M']3mrGJ", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertNotNull(student0);
      
      String string0 = student0.getStatusStr();
      assertEquals("", student0.getStatusStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-1058.0495254042), student0.getAdmissionGrade(), 0.01);
      assertEquals(0.5, student0.getIea(), 0.01);
      assertEquals(Integer.MAX_VALUE, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("#?~M']3mrGJ", student0.getCountry());
      assertEquals("#?~M']3mrGJ", student0.getRace());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1099, student0.getOptionalHours());
      assertEquals(", country='", student0.getNationality());
      assertEquals("SENSITIVE", student0.getAdmissionStr());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("X&oy A&09n", student0.getGender());
      assertEquals("org.apache.commons.io.filefilter.DirectoryFileFilter", student0.getCurriculumCode());
      assertEquals(450, student0.getEnrolledCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryCredits());
      assertEquals((-2634), student0.getMobilityTerms());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-2840.882315319278), student0.getGpa(), 0.01);
      assertEquals("xE", student0.getCourseCode());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", country='", student0.getEmail());
      assertEquals(1099, student0.getCompletedTerms());
      assertEquals("", student0.getName());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getNationalId());
      assertEquals(", country='", student0.getMaritalStatus());
      assertEquals("#?~M']3mrGJ", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("Ints.stringConverter()", "c5q-A]VuJ;koP3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 493, 0, 493, 0, 0, 5901, 577, 5901, (-263), treeSet0, treeSet0, priorityQueue0, treeSet0, priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(treeSet0.contains("Ints.stringConverter()"));
      assertFalse(priorityQueue0.contains("Ints.stringConverter()"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "", "=Mho18%K^ZsL!", "(Blf6+pNT)9EP)cCC", "\"", "9aUyR0C2Wf6S,#;4", "g-ju2N3g", "(Blf6+pNT)9EP)cCC", "*a", "", "1{Kr1h?=6=zE'gSH3_", studentStatus0, ", name='", "c5q-A]VuJ;koP3", "", "", "?NqD-", "=Mho18%K^ZsL!", (String) null, "?NqD-", "./ew~aB<fIwIEItTX.", curriculum0, (-2363), Integer.MIN_VALUE, 0, 0, 493, 493, 0, 577, Integer.MIN_VALUE, (-3537.7237676461), Integer.MIN_VALUE, Integer.MIN_VALUE, 493, (-921), (-2363), (-2363));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(577.0, student0.getGpa(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("?NqD-", student0.getAffirmativePolicy());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(493, student0.getInstitutionalEnrollments());
      assertEquals((-2363), student0.getEnrolledCredits());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals("g-ju2N3g", student0.getNationality());
      assertEquals(Integer.MIN_VALUE, student0.getSuspendedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(Integer.MIN_VALUE, student0.getCompletedTerms());
      assertEquals(", name='", student0.getStatusTerm());
      assertEquals(493, student0.getComplementaryCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("\"", student0.getGender());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals((-2363.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals((-2363), student0.getMandatoryHours());
      assertEquals("", student0.getRace());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals((-3537.7237676461), student0.getIea(), 0.01);
      assertEquals((-2.147483648E9), student0.getMc(), 0.01);
      assertEquals("*a", student0.getPlaceOfBirth());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("?NqD-", student0.getCourseCode());
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals("1{Kr1h?=6=zE'gSH3_", student0.getStatusStr());
      assertEquals(Integer.MIN_VALUE, student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("./ew~aB<fIwIEItTX.", student0.getCurriculumCode());
      assertEquals("", student0.getName());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals(493, student0.getComplementaryHours());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals((-2147483155), student0.getCompletedCredits());
      assertFalse(treeSet0.contains("g-ju2N3g"));
      assertFalse(priorityQueue0.contains("g-ju2N3g"));
      assertNotNull(student0);
      
      String string0 = student0.getSecondarySchoolGraduationYear();
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(577.0, student0.getGpa(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("?NqD-", student0.getAffirmativePolicy());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(493, student0.getInstitutionalEnrollments());
      assertEquals((-2363), student0.getEnrolledCredits());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals("g-ju2N3g", student0.getNationality());
      assertEquals(Integer.MIN_VALUE, student0.getSuspendedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(Integer.MIN_VALUE, student0.getCompletedTerms());
      assertEquals(", name='", student0.getStatusTerm());
      assertEquals(493, student0.getComplementaryCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("\"", student0.getGender());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals((-2363.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals((-2363), student0.getMandatoryHours());
      assertEquals("", student0.getRace());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals((-3537.7237676461), student0.getIea(), 0.01);
      assertEquals((-2.147483648E9), student0.getMc(), 0.01);
      assertEquals("*a", student0.getPlaceOfBirth());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("?NqD-", student0.getCourseCode());
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals("1{Kr1h?=6=zE'gSH3_", student0.getStatusStr());
      assertEquals(Integer.MIN_VALUE, student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("./ew~aB<fIwIEItTX.", student0.getCurriculumCode());
      assertEquals("", student0.getName());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals(493, student0.getComplementaryHours());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals((-2147483155), student0.getCompletedCredits());
      assertFalse(treeSet0.contains("g-ju2N3g"));
      assertFalse(priorityQueue0.contains("g-ju2N3g"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Curriculum curriculum0 = new Curriculum("cAvl 3{``D-6Buq3", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 4, (-3990), 0, (-1629), 1692, 9, (-1), 0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-3986.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1692, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1629), curriculum0.getMinNumberOfTerms());
      assertEquals("cAvl 3{``D-6Buq3", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(9, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedList0.contains("cAvl 3{``D-6Buq3"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "", "", "", "", (String) null, "&K", "&K", "eru#:E5NRsl{V", "xy", "xy", studentStatus0, "", (String) null, "", "", ", institutionalTerms=", "xy", "eru#:E5NRsl{V", (String) null, "", curriculum0, (-1629), 1016, 1754, 1009, 9, 0, 5, 0.0, 0.0, 1016, 1692, 1016, 1009, 1692, 0, 0.0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-3986.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1692, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1629), curriculum0.getMinNumberOfTerms());
      assertEquals("cAvl 3{``D-6Buq3", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(9, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("&K", student0.getNationality());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals((-1629), student0.getMandatoryHours());
      assertEquals(2025, student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(1009, student0.getInstitutionalEnrollments());
      assertEquals(1692, student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("xy", student0.getSecondarySchool());
      assertEquals(1016.0, student0.getIea(), 0.01);
      assertEquals("xy", student0.getRace());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getDisabilities());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("eru#:E5NRsl{V", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getMaritalStatus());
      assertEquals(9, student0.getComplementaryHours());
      assertEquals(", institutionalTerms=", student0.getAffirmativePolicy());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(1692, student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("xy", student0.getStatusStr());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(5, student0.getAttemptedCredits());
      assertNull(student0.getCourseCode());
      assertEquals(1754, student0.getOptionalHours());
      assertEquals("&K", student0.getCountry());
      assertEquals("eru#:E5NRsl{V", student0.getPlaceOfBirth());
      assertEquals(1016, student0.getSuspendedTerms());
      assertEquals("", student0.getName());
      assertNull(student0.getAdmissionStr());
      assertEquals(1016, student0.getMandatoryCredits());
      assertEquals(1009, student0.getOptionalCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedList0.contains("xy"));
      assertNotNull(student0);
      
      String string0 = student0.getSecondarySchoolGraduationYear();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-3986.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1692, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1629), curriculum0.getMinNumberOfTerms());
      assertEquals("cAvl 3{``D-6Buq3", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(9, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3990), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("&K", student0.getNationality());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals((-1629), student0.getMandatoryHours());
      assertEquals(2025, student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(1009, student0.getInstitutionalEnrollments());
      assertEquals(1692, student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("xy", student0.getSecondarySchool());
      assertEquals(1016.0, student0.getIea(), 0.01);
      assertEquals("xy", student0.getRace());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getDisabilities());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("eru#:E5NRsl{V", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getMaritalStatus());
      assertEquals(9, student0.getComplementaryHours());
      assertEquals(", institutionalTerms=", student0.getAffirmativePolicy());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(1692, student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("xy", student0.getStatusStr());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(5, student0.getAttemptedCredits());
      assertNull(student0.getCourseCode());
      assertEquals(1754, student0.getOptionalHours());
      assertEquals("&K", student0.getCountry());
      assertEquals("eru#:E5NRsl{V", student0.getPlaceOfBirth());
      assertEquals(1016, student0.getSuspendedTerms());
      assertEquals("", student0.getName());
      assertNull(student0.getAdmissionStr());
      assertEquals(1016, student0.getMandatoryCredits());
      assertEquals(1009, student0.getOptionalCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedList0.contains("xy"));
      assertEquals("eru#:E5NRsl{V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", "", "", ", curriculum='", "", "", "Jr1{H", "", "Jr1{H", studentStatus0, "wiozM1RZq^{/ti+g", "hDB2 P0;K", "overflow", "overflow", "wiozM1RZq^{/ti+g", "Key '%s' not present in map", "overflow", "Key '%s' not present in map", "Nr>Pwms<5hEa] ", (Curriculum) null, 11, 11, 11, 5, 5, 11, 11, 0.0, 4.0, 0.0, 5, 11, 14, (-1112), 3590, 0.0);
      assertEquals("", student0.getName());
      assertEquals("Jr1{H", student0.getPlaceOfBirth());
      assertEquals(5, student0.getOptionalCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("Key '%s' not present in map", student0.getCourseCode());
      assertEquals("wiozM1RZq^{/ti+g", student0.getAffirmativePolicy());
      assertEquals("hDB2 P0;K", student0.getAdmissionStr());
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals(", curriculum='", student0.getMaritalStatus());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("overflow", student0.getDisabilities());
      assertEquals(3590, student0.getEnrolledCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(27, student0.getCompletedCredits());
      assertEquals("Jr1{H", student0.getStatusStr());
      assertEquals("", student0.getGender());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getRace());
      assertEquals("Key '%s' not present in map", student0.getSecondarySchool());
      assertEquals("", student0.getCountry());
      assertEquals(11, student0.getMandatoryCredits());
      assertEquals(11, student0.getSuspendedTerms());
      assertEquals("Nr>Pwms<5hEa] ", student0.getCurriculumCode());
      assertEquals("overflow", student0.getAdmissionTerm());
      assertEquals("overflow", student0.getSecondarySchoolGraduationYear());
      assertEquals(11, student0.getAttemptedCredits());
      assertEquals("wiozM1RZq^{/ti+g", student0.getStatusTerm());
      assertEquals(5, student0.getCompletedTerms());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals(5, student0.getComplementaryHours());
      assertEquals(11, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-1112), student0.getMobilityTerms());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(11, student0.getOptionalHours());
      assertNotNull(student0);
      
      String string0 = student0.getSecondarySchool();
      assertEquals("", student0.getName());
      assertEquals("Jr1{H", student0.getPlaceOfBirth());
      assertEquals(5, student0.getOptionalCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("Key '%s' not present in map", student0.getCourseCode());
      assertEquals("wiozM1RZq^{/ti+g", student0.getAffirmativePolicy());
      assertEquals("hDB2 P0;K", student0.getAdmissionStr());
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals(", curriculum='", student0.getMaritalStatus());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("overflow", student0.getDisabilities());
      assertEquals(3590, student0.getEnrolledCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(27, student0.getCompletedCredits());
      assertEquals("Jr1{H", student0.getStatusStr());
      assertEquals("", student0.getGender());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getRace());
      assertEquals("Key '%s' not present in map", student0.getSecondarySchool());
      assertEquals("", student0.getCountry());
      assertEquals(11, student0.getMandatoryCredits());
      assertEquals(11, student0.getSuspendedTerms());
      assertEquals("Nr>Pwms<5hEa] ", student0.getCurriculumCode());
      assertEquals("overflow", student0.getAdmissionTerm());
      assertEquals("overflow", student0.getSecondarySchoolGraduationYear());
      assertEquals(11, student0.getAttemptedCredits());
      assertEquals("wiozM1RZq^{/ti+g", student0.getStatusTerm());
      assertEquals(5, student0.getCompletedTerms());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals(5, student0.getComplementaryHours());
      assertEquals(11, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-1112), student0.getMobilityTerms());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(11, student0.getOptionalHours());
      assertEquals("Key '%s' not present in map", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("p Zw1", "p Zw1", "JF*ELhw;sk2b)tC(d", "p Zw1", "", "p Zw1", "", "", "", "p Zw1", "Yn9$Ow@=PD", "", studentStatus0, "=18g.)A %gljy4=^z& ", "", "Yn9$Ow@=PD", "=18g.)A %gljy4=^z& ", "Yn9$Ow@=PD", "", ".0Q`I,?}MZ", ", completedTerms=", "D~%TeNFfK]qCZ=uy", (Curriculum) null, (-271), (-1795), 2515, (-271), (-1795), 2515, 0, 0, 448.72360527581, 2515, (-1795), 0, (-271), (-2688), (-1795), 448.72360527581);
      assertEquals(2515, student0.getComplementaryCredits());
      assertEquals("", student0.getEmail());
      assertEquals(".0Q`I,?}MZ", student0.getSecondarySchoolGraduationYear());
      assertEquals("=18g.)A %gljy4=^z& ", student0.getStatusTerm());
      assertEquals("p Zw1", student0.getGender());
      assertEquals("p Zw1", student0.getNationalId());
      assertEquals("", student0.getCountry());
      assertEquals(449, student0.getCompletedCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", completedTerms=", student0.getCourseCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("p Zw1", student0.getPlaceOfBirth());
      assertEquals((-1795), student0.getCompletedTerms());
      assertEquals((-1795), student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("Yn9$Ow@=PD", student0.getAdmissionTerm());
      assertEquals((-271), student0.getOptionalCredits());
      assertEquals(448.72360527581, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-1795), student0.getEnrolledCredits());
      assertEquals((-271), student0.getMandatoryHours());
      assertEquals("", student0.getNationality());
      assertEquals(2515.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2688), student0.getMobilityTerms());
      assertEquals((-271), student0.getInstitutionalEnrollments());
      assertEquals("=18g.)A %gljy4=^z& ", student0.getDisabilities());
      assertEquals("D~%TeNFfK]qCZ=uy", student0.getCurriculumCode());
      assertEquals(448.72360527581, student0.getMc(), 0.01);
      assertEquals("JF*ELhw;sk2b)tC(d", student0.getName());
      assertEquals("Yn9$Ow@=PD", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusStr());
      assertEquals("p Zw1", student0.getBirthDate());
      assertEquals("Yn9$Ow@=PD", student0.getRace());
      assertEquals((-1795), student0.getMandatoryCredits());
      assertEquals(2515, student0.getOptionalHours());
      assertNotNull(student0);
      
      String string0 = student0.getSecondarySchool();
      assertEquals(2515, student0.getComplementaryCredits());
      assertEquals("", student0.getEmail());
      assertEquals(".0Q`I,?}MZ", student0.getSecondarySchoolGraduationYear());
      assertEquals("=18g.)A %gljy4=^z& ", student0.getStatusTerm());
      assertEquals("p Zw1", student0.getGender());
      assertEquals("p Zw1", student0.getNationalId());
      assertEquals("", student0.getCountry());
      assertEquals(449, student0.getCompletedCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", completedTerms=", student0.getCourseCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("p Zw1", student0.getPlaceOfBirth());
      assertEquals((-1795), student0.getCompletedTerms());
      assertEquals((-1795), student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("Yn9$Ow@=PD", student0.getAdmissionTerm());
      assertEquals((-271), student0.getOptionalCredits());
      assertEquals(448.72360527581, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-1795), student0.getEnrolledCredits());
      assertEquals((-271), student0.getMandatoryHours());
      assertEquals("", student0.getNationality());
      assertEquals(2515.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2688), student0.getMobilityTerms());
      assertEquals((-271), student0.getInstitutionalEnrollments());
      assertEquals("=18g.)A %gljy4=^z& ", student0.getDisabilities());
      assertEquals("D~%TeNFfK]qCZ=uy", student0.getCurriculumCode());
      assertEquals(448.72360527581, student0.getMc(), 0.01);
      assertEquals("JF*ELhw;sk2b)tC(d", student0.getName());
      assertEquals("Yn9$Ow@=PD", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusStr());
      assertEquals("p Zw1", student0.getBirthDate());
      assertEquals("Yn9$Ow@=PD", student0.getRace());
      assertEquals((-1795), student0.getMandatoryCredits());
      assertEquals(2515, student0.getOptionalHours());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ", disabilities='", ", disabilities='", ", disabilities='", "{5-Zb`R|", "{5-Zb`R|", "B[%", "", studentStatus0, "B[%", "B[%", "", "0LzRj5H", ", disabilities='", "cxo^vN!;<%3", "", "", "", (Curriculum) null, 0, 0, 0, 0, 0, 0, 0, 203.24446603172936, 0, 474.793453, 0, 264, 2, 677, 784, 2);
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(", status=", student0.getEmail());
      assertEquals("{5-Zb`R|", student0.getCountry());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getCourseCode());
      assertEquals("B[%", student0.getRace());
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals("{5-Zb`R|", student0.getPlaceOfBirth());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getBirthDate());
      assertNotNull(student0);
      
      student0.setRegistration((Registration) null);
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(", status=", student0.getEmail());
      assertEquals("{5-Zb`R|", student0.getCountry());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getCourseCode());
      assertEquals("B[%", student0.getRace());
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals("{5-Zb`R|", student0.getPlaceOfBirth());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getBirthDate());
      
      Registration registration0 = student0.getRegistration();
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(", status=", student0.getEmail());
      assertEquals("{5-Zb`R|", student0.getCountry());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getCourseCode());
      assertEquals("B[%", student0.getRace());
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals("{5-Zb`R|", student0.getPlaceOfBirth());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getBirthDate());
      assertNull(registration0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(1892);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Curriculum curriculum0 = new Curriculum("|", "CharMatcher.javaLetter()", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 7, 7, 7, 7, 7, 1417, 3449, 1892, 0, 2260, list0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(28.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1892, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("|", curriculum0.getCourseCode());
      assertEquals(7, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3449, curriculum0.getMaxNumberOfTerms());
      assertEquals(7, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("CharMatcher.javaLetter()", curriculum0.getCurriculumCode());
      assertEquals(2260, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1417, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMinActivitiesNeeded());
      assertFalse(list0.contains("|"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("com.google.common.cache.LocalCache$LoadingSerializationProxy", "com.google.common.cache.LocalCache$LoadingSerializationProxy", "", "com.google.common.cache.LocalCache$LoadingSerializationProxy", "CharMatcher.javaLetter()", "", "|", "", "", "", (String) null, "Hn-0c", studentStatus0, "", "", ", admissionGrade=", "CharMatcher.javaLetter()", (String) null, "CharMatcher.javaLetter()", "fromIterable", "|", "w$|k_oYL", curriculum0, 127, 2260, 1417, 127, 1892, 1417, (-1869), (-1680.27198809293), 7, 3449, 1507, (-601), 127, 3449, (-373), (-373));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(28.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1892, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("|", curriculum0.getCourseCode());
      assertEquals(7, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3449, curriculum0.getMaxNumberOfTerms());
      assertEquals(7, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("CharMatcher.javaLetter()", curriculum0.getCurriculumCode());
      assertEquals(2260, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1417, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMinActivitiesNeeded());
      assertEquals(3449.0, student0.getIea(), 0.01);
      assertEquals("CharMatcher.javaLetter()", student0.getDisabilities());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1869), student0.getAttemptedCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(127, student0.getOptionalCredits());
      assertEquals("w$|k_oYL", student0.getCurriculumCode());
      assertEquals((-373), student0.getEnrolledCredits());
      assertEquals("|", student0.getMaritalStatus());
      assertEquals(7.0, student0.getMc(), 0.01);
      assertEquals((-601), student0.getSuspendedTerms());
      assertEquals(127, student0.getMandatoryHours());
      assertEquals((-373.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(1417, student0.getOptionalHours());
      assertEquals("Hn-0c", student0.getStatusStr());
      assertEquals(3449, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(2260, student0.getMandatoryCredits());
      assertEquals("com.google.common.cache.LocalCache$LoadingSerializationProxy", student0.getBirthDate());
      assertEquals(1892, student0.getComplementaryHours());
      assertEquals(", admissionGrade=", student0.getAdmissionTerm());
      assertEquals("fromIterable", student0.getSecondarySchoolGraduationYear());
      assertEquals(3804, student0.getCompletedCredits());
      assertEquals("|", student0.getCourseCode());
      assertEquals(1507, student0.getCompletedTerms());
      assertEquals("", student0.getNationality());
      assertEquals(127, student0.getInstitutionalEnrollments());
      assertNull(student0.getAffirmativePolicy());
      assertEquals((-1680.27198809293), student0.getGpa(), 0.01);
      assertEquals(1417, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getName());
      assertEquals("", student0.getCountry());
      assertEquals("CharMatcher.javaLetter()", student0.getEmail());
      assertEquals("", student0.getPlaceOfBirth());
      assertNull(student0.getRace());
      assertEquals("com.google.common.cache.LocalCache$LoadingSerializationProxy", student0.getNationalId());
      assertEquals("CharMatcher.javaLetter()", student0.getSecondarySchool());
      assertFalse(list0.contains("CharMatcher.javaLetter()"));
      assertNotNull(student0);
      
      String string0 = student0.getRace();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(28.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1892, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(7, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(7, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("|", curriculum0.getCourseCode());
      assertEquals(7, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3449, curriculum0.getMaxNumberOfTerms());
      assertEquals(7, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("CharMatcher.javaLetter()", curriculum0.getCurriculumCode());
      assertEquals(2260, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1417, curriculum0.getMinNumberOfTerms());
      assertEquals(7, curriculum0.getMinActivitiesNeeded());
      assertEquals(3449.0, student0.getIea(), 0.01);
      assertEquals("CharMatcher.javaLetter()", student0.getDisabilities());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1869), student0.getAttemptedCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(127, student0.getOptionalCredits());
      assertEquals("w$|k_oYL", student0.getCurriculumCode());
      assertEquals((-373), student0.getEnrolledCredits());
      assertEquals("|", student0.getMaritalStatus());
      assertEquals(7.0, student0.getMc(), 0.01);
      assertEquals((-601), student0.getSuspendedTerms());
      assertEquals(127, student0.getMandatoryHours());
      assertEquals((-373.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(1417, student0.getOptionalHours());
      assertEquals("Hn-0c", student0.getStatusStr());
      assertEquals(3449, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(2260, student0.getMandatoryCredits());
      assertEquals("com.google.common.cache.LocalCache$LoadingSerializationProxy", student0.getBirthDate());
      assertEquals(1892, student0.getComplementaryHours());
      assertEquals(", admissionGrade=", student0.getAdmissionTerm());
      assertEquals("fromIterable", student0.getSecondarySchoolGraduationYear());
      assertEquals(3804, student0.getCompletedCredits());
      assertEquals("|", student0.getCourseCode());
      assertEquals(1507, student0.getCompletedTerms());
      assertEquals("", student0.getNationality());
      assertEquals(127, student0.getInstitutionalEnrollments());
      assertNull(student0.getAffirmativePolicy());
      assertEquals((-1680.27198809293), student0.getGpa(), 0.01);
      assertEquals(1417, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getName());
      assertEquals("", student0.getCountry());
      assertEquals("CharMatcher.javaLetter()", student0.getEmail());
      assertEquals("", student0.getPlaceOfBirth());
      assertNull(student0.getRace());
      assertEquals("com.google.common.cache.LocalCache$LoadingSerializationProxy", student0.getNationalId());
      assertEquals("CharMatcher.javaLetter()", student0.getSecondarySchool());
      assertFalse(list0.contains("CharMatcher.javaLetter()"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student((String) null, "", "=j>@YdDbBr", ", birthDate='", "CANCELAMENTO P/ SOLICITACAO ALUNO", (String) null, ", birthDate='", "", ", birthDate='", "IdkoesF!&q]]KOb", "", "", studentStatus0, "IdkoesF!&q]]KOb", ", birthDate='", "IdkoesF!&q]]KOb", "\n{a%1@", ", birthDate='", (String) null, "", "Ek", "vq{|#sT$#:", (Curriculum) null, 0, 1369, 0, (-1951), 0, (-673), (-673), 0.0, (-1908.298401882), 0.0, 0, (-1951), (-1951), 1, 0, (-1908.298401882));
      assertEquals(", birthDate='", student0.getAffirmativePolicy());
      assertEquals("IdkoesF!&q]]KOb", student0.getPlaceOfBirth());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", birthDate='", student0.getAdmissionStr());
      assertEquals((-673), student0.getAttemptedCredits());
      assertEquals(1, student0.getMobilityTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", birthDate='", student0.getCountry());
      assertEquals((-673), student0.getComplementaryCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-1951), student0.getSuspendedTerms());
      assertNull(student0.getSecondarySchool());
      assertEquals((-1908.298401882), student0.getAdmissionGrade(), 0.01);
      assertEquals("IdkoesF!&q]]KOb", student0.getStatusTerm());
      assertEquals("Ek", student0.getCourseCode());
      assertEquals((-1951), student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("\n{a%1@", student0.getDisabilities());
      assertEquals("vq{|#sT$#:", student0.getCurriculumCode());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(1369, student0.getMandatoryCredits());
      assertEquals((-1951), student0.getInstitutionalEnrollments());
      assertEquals(", birthDate='", student0.getMaritalStatus());
      assertEquals("=j>@YdDbBr", student0.getName());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("IdkoesF!&q]]KOb", student0.getAdmissionTerm());
      assertEquals((-1908.298401882), student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getEmail());
      assertEquals(0, student0.getMandatoryHours());
      assertNull(student0.getGender());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(", birthDate='", student0.getBirthDate());
      assertEquals((-1255), student0.getCompletedCredits());
      assertNotNull(student0);
      
      String string0 = student0.getRace();
      assertEquals(", birthDate='", student0.getAffirmativePolicy());
      assertEquals("IdkoesF!&q]]KOb", student0.getPlaceOfBirth());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", birthDate='", student0.getAdmissionStr());
      assertEquals((-673), student0.getAttemptedCredits());
      assertEquals(1, student0.getMobilityTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", birthDate='", student0.getCountry());
      assertEquals((-673), student0.getComplementaryCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-1951), student0.getSuspendedTerms());
      assertNull(student0.getSecondarySchool());
      assertEquals((-1908.298401882), student0.getAdmissionGrade(), 0.01);
      assertEquals("IdkoesF!&q]]KOb", student0.getStatusTerm());
      assertEquals("Ek", student0.getCourseCode());
      assertEquals((-1951), student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("\n{a%1@", student0.getDisabilities());
      assertEquals("vq{|#sT$#:", student0.getCurriculumCode());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(1369, student0.getMandatoryCredits());
      assertEquals((-1951), student0.getInstitutionalEnrollments());
      assertEquals(", birthDate='", student0.getMaritalStatus());
      assertEquals("=j>@YdDbBr", student0.getName());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("IdkoesF!&q]]KOb", student0.getAdmissionTerm());
      assertEquals((-1908.298401882), student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getEmail());
      assertEquals(0, student0.getMandatoryHours());
      assertNull(student0.getGender());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(", birthDate='", student0.getBirthDate());
      assertEquals((-1255), student0.getCompletedCredits());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("_l", "com.google.common.base.CharMatcher$None", "_l", ", optionalHours=", "", "cf|I!wp=I-<IysQO_;", "cf|I!wp=I-<IysQO_;", "", ", status=", (String) null, "S}g0'cIPL6))7Q_", (String) null, studentStatus0, "_l", "S}g0'cIPL6))7Q_", "f'oSn=Bg.a", "I+0*TQUv-zJO8Y%AQo", "g0V6eN98yi*6cFms#_", "", ", statusStr='", "com.google.common.base.CharMatcher$None", "", (Curriculum) null, 0, 0, 0, 954, 954, (-437), 1423, (-676.009), 3181.63, 0.0, 10, (-1392), 1980, 343, 10, (-352.928379));
      assertEquals(343, student0.getMobilityTerms());
      assertEquals("S}g0'cIPL6))7Q_", student0.getAdmissionStr());
      assertEquals(", optionalHours=", student0.getBirthDate());
      assertEquals(954, student0.getComplementaryHours());
      assertEquals(", status=", student0.getCountry());
      assertEquals("_l", student0.getName());
      assertEquals(3181.63, student0.getMc(), 0.01);
      assertEquals("com.google.common.base.CharMatcher$None", student0.getCourseCode());
      assertEquals((-1392), student0.getSuspendedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("g0V6eN98yi*6cFms#_", student0.getAffirmativePolicy());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(517, student0.getCompletedCredits());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("cf|I!wp=I-<IysQO_;", student0.getMaritalStatus());
      assertEquals(1980, student0.getInstitutionalEnrollments());
      assertEquals((-676.009), student0.getGpa(), 0.01);
      assertEquals((-352.928379), student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getPlaceOfBirth());
      assertEquals("_l", student0.getStatusTerm());
      assertEquals(", statusStr='", student0.getSecondarySchoolGraduationYear());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertNull(student0.getStatusStr());
      assertEquals(1423, student0.getAttemptedCredits());
      assertEquals("com.google.common.base.CharMatcher$None", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("I+0*TQUv-zJO8Y%AQo", student0.getDisabilities());
      assertEquals("S}g0'cIPL6))7Q_", student0.getRace());
      assertEquals("f'oSn=Bg.a", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("cf|I!wp=I-<IysQO_;", student0.getGender());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(954, student0.getOptionalCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(10, student0.getEnrolledCredits());
      assertEquals(10, student0.getCompletedTerms());
      assertEquals((-437), student0.getComplementaryCredits());
      assertNotNull(student0);
      
      String string0 = student0.getPlaceOfBirth();
      assertEquals(343, student0.getMobilityTerms());
      assertEquals("S}g0'cIPL6))7Q_", student0.getAdmissionStr());
      assertEquals(", optionalHours=", student0.getBirthDate());
      assertEquals(954, student0.getComplementaryHours());
      assertEquals(", status=", student0.getCountry());
      assertEquals("_l", student0.getName());
      assertEquals(3181.63, student0.getMc(), 0.01);
      assertEquals("com.google.common.base.CharMatcher$None", student0.getCourseCode());
      assertEquals((-1392), student0.getSuspendedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("g0V6eN98yi*6cFms#_", student0.getAffirmativePolicy());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(517, student0.getCompletedCredits());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("cf|I!wp=I-<IysQO_;", student0.getMaritalStatus());
      assertEquals(1980, student0.getInstitutionalEnrollments());
      assertEquals((-676.009), student0.getGpa(), 0.01);
      assertEquals((-352.928379), student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getPlaceOfBirth());
      assertEquals("_l", student0.getStatusTerm());
      assertEquals(", statusStr='", student0.getSecondarySchoolGraduationYear());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertNull(student0.getStatusStr());
      assertEquals(1423, student0.getAttemptedCredits());
      assertEquals("com.google.common.base.CharMatcher$None", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("I+0*TQUv-zJO8Y%AQo", student0.getDisabilities());
      assertEquals("S}g0'cIPL6))7Q_", student0.getRace());
      assertEquals("f'oSn=Bg.a", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("cf|I!wp=I-<IysQO_;", student0.getGender());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(954, student0.getOptionalCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(10, student0.getEnrolledCredits());
      assertEquals(10, student0.getCompletedTerms());
      assertEquals((-437), student0.getComplementaryCredits());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "", "k", "", "", "", "", "k", "", ", admissionTerm='", "", studentStatus0, (String) null, "", "]#YsSeO", "TR =-@ZY@q2 v.", "", "`*npC%7OfmINi;&:", "]#YsSeO", "TR =-@ZY@q2 v.", "kH<@/t*(`uko/+", (Curriculum) null, 0, 6, 8199, 0, (-1503), (-3831), 299, (-3831), 8199, 299, 0, 357, 8, 8199, (-205), 8);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals((-3831), student0.getComplementaryCredits());
      assertEquals(357, student0.getSuspendedTerms());
      assertEquals(299.0, student0.getIea(), 0.01);
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-3831.0), student0.getGpa(), 0.01);
      assertEquals(8199, student0.getOptionalHours());
      assertEquals("", student0.getEmail());
      assertEquals("]#YsSeO", student0.getAdmissionTerm());
      assertEquals("TR =-@ZY@q2 v.", student0.getDisabilities());
      assertEquals((-3825), student0.getCompletedCredits());
      assertEquals(8, student0.getInstitutionalEnrollments());
      assertEquals("kH<@/t*(`uko/+", student0.getCurriculumCode());
      assertEquals("TR =-@ZY@q2 v.", student0.getCourseCode());
      assertEquals(", admissionTerm='", student0.getRace());
      assertEquals(8199, student0.getMobilityTerms());
      assertEquals(299, student0.getAttemptedCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals("k", student0.getCountry());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("]#YsSeO", student0.getSecondarySchoolGraduationYear());
      assertEquals(6, student0.getMandatoryCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(8.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-1503), student0.getComplementaryHours());
      assertNull(student0.getStatusTerm());
      assertEquals(8199.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals("k", student0.getBirthDate());
      assertEquals("`*npC%7OfmINi;&:", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals((-205), student0.getEnrolledCredits());
      assertEquals("", student0.getName());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getAffirmativePolicy());
      assertNotNull(student0);
      
      String string0 = student0.getPlaceOfBirth();
      assertEquals(0, student0.getCompletedTerms());
      assertEquals((-3831), student0.getComplementaryCredits());
      assertEquals(357, student0.getSuspendedTerms());
      assertEquals(299.0, student0.getIea(), 0.01);
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-3831.0), student0.getGpa(), 0.01);
      assertEquals(8199, student0.getOptionalHours());
      assertEquals("", student0.getEmail());
      assertEquals("]#YsSeO", student0.getAdmissionTerm());
      assertEquals("TR =-@ZY@q2 v.", student0.getDisabilities());
      assertEquals((-3825), student0.getCompletedCredits());
      assertEquals(8, student0.getInstitutionalEnrollments());
      assertEquals("kH<@/t*(`uko/+", student0.getCurriculumCode());
      assertEquals("TR =-@ZY@q2 v.", student0.getCourseCode());
      assertEquals(", admissionTerm='", student0.getRace());
      assertEquals(8199, student0.getMobilityTerms());
      assertEquals(299, student0.getAttemptedCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals("k", student0.getCountry());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("]#YsSeO", student0.getSecondarySchoolGraduationYear());
      assertEquals(6, student0.getMandatoryCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(8.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-1503), student0.getComplementaryHours());
      assertNull(student0.getStatusTerm());
      assertEquals(8199.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals("k", student0.getBirthDate());
      assertEquals("`*npC%7OfmINi;&:", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals((-205), student0.getEnrolledCredits());
      assertEquals("", student0.getName());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", "L9", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 14, 14, (-862048943), (-2403), (-2403), 14, 1636, (-1532), (-862048943), (-1617), arrayList0, arrayList0, set0, arrayList0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals((-1532), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-862048943), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-8.62051318E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2403), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(14, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(14, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(14, curriculum0.getMinNumberOfTerms());
      assertEquals(1636, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1617), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2403), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("L9", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(""));
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("L9", "", "com.google.common.base.CharMatcher$And", "60%E! I/%:M", "L9", "", "", "com.google.common.collect.AbstractMultimap", "com.google.common.base.CharMatcher$And", "", "[QBd'|5c{r4 ", "AWWV_yY=a", studentStatus0, "com.google.common.base.CharMatcher$And", "L9", "", "", "[QBd'|5c{r4 ", "com.google.common.base.CharMatcher$And", "com.google.common.collect.AbstractMultimap", "", "", curriculum0, 1263, 14, 0, 365, (-1532), (-1532), (-398), (-398), 1636, 545.1285949261, 14, 3, (-1532), 13, 1263, 1263);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals((-1532), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-862048943), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-8.62051318E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2403), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(14, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(14, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(14, curriculum0.getMinNumberOfTerms());
      assertEquals(1636, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1617), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2403), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("L9", curriculum0.getCurriculumCode());
      assertEquals(545.1285949261, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals((-398), student0.getAttemptedCredits());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals(365, student0.getOptionalCredits());
      assertEquals(1263.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getNationalId());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getSecondarySchool());
      assertEquals((-1532), student0.getInstitutionalEnrollments());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(1263, student0.getMandatoryHours());
      assertEquals(1636.0, student0.getMc(), 0.01);
      assertEquals("com.google.common.base.CharMatcher$And", student0.getStatusTerm());
      assertEquals("AWWV_yY=a", student0.getStatusStr());
      assertEquals("L9", student0.getAdmissionStr());
      assertEquals((-1153), student0.getCompletedCredits());
      assertEquals((-1532), student0.getComplementaryCredits());
      assertEquals("60%E! I/%:M", student0.getBirthDate());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getSecondarySchoolGraduationYear());
      assertEquals((-398.0), student0.getGpa(), 0.01);
      assertEquals("L9", student0.getEmail());
      assertEquals("[QBd'|5c{r4 ", student0.getRace());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getNationality());
      assertEquals(13, student0.getMobilityTerms());
      assertEquals("[QBd'|5c{r4 ", student0.getAffirmativePolicy());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getName());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1263, student0.getEnrolledCredits());
      assertEquals(14, student0.getCompletedTerms());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getCountry());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-1532), student0.getComplementaryHours());
      assertEquals(3, student0.getSuspendedTerms());
      assertFalse(arrayList0.contains(""));
      assertFalse(set0.contains(""));
      assertNotNull(student0);
      
      int int0 = student0.getOptionalHours();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals((-1532), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-862048943), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-8.62051318E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2403), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(14, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(14, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(14, curriculum0.getMinNumberOfTerms());
      assertEquals(1636, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1617), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2403), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("L9", curriculum0.getCurriculumCode());
      assertEquals(545.1285949261, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals((-398), student0.getAttemptedCredits());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals(365, student0.getOptionalCredits());
      assertEquals(1263.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getNationalId());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getSecondarySchool());
      assertEquals((-1532), student0.getInstitutionalEnrollments());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(1263, student0.getMandatoryHours());
      assertEquals(1636.0, student0.getMc(), 0.01);
      assertEquals("com.google.common.base.CharMatcher$And", student0.getStatusTerm());
      assertEquals("AWWV_yY=a", student0.getStatusStr());
      assertEquals("L9", student0.getAdmissionStr());
      assertEquals((-1153), student0.getCompletedCredits());
      assertEquals((-1532), student0.getComplementaryCredits());
      assertEquals("60%E! I/%:M", student0.getBirthDate());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getSecondarySchoolGraduationYear());
      assertEquals((-398.0), student0.getGpa(), 0.01);
      assertEquals("L9", student0.getEmail());
      assertEquals("[QBd'|5c{r4 ", student0.getRace());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getNationality());
      assertEquals(13, student0.getMobilityTerms());
      assertEquals("[QBd'|5c{r4 ", student0.getAffirmativePolicy());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getName());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1263, student0.getEnrolledCredits());
      assertEquals(14, student0.getCompletedTerms());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getCountry());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-1532), student0.getComplementaryHours());
      assertEquals(3, student0.getSuspendedTerms());
      assertFalse(arrayList0.contains(""));
      assertFalse(set0.contains(""));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("CANCELADO REPROVOU TODAS POR FALTAS", "+F clsz!W8D!-%rr", "", "+F clsz!W8D!-%rr", "t", "", ", curriculum='", "(VTK", "5d]$h[l:u&dL<", "t", "", "CANCELAMENTO P/ DECISAO JUDICIAL", studentStatus0, "", "", "CANCELAMENTO P/ DECISAO JUDICIAL", "!Nddq?]_To", "", "", "", "kL0TJP>({Jm~nAf/", "5d]$h[l:u&dL<", (Curriculum) null, 0, 0, (-4866), 1210, 0, (-4866), 0, 1519.0, 0, 1.0, (-4866), 1210, 0, 0, 1210, 1210);
      assertEquals((-4866), student0.getCompletedTerms());
      assertEquals("", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("!Nddq?]_To", student0.getDisabilities());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("t", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals("(VTK", student0.getNationality());
      assertEquals("kL0TJP>({Jm~nAf/", student0.getCourseCode());
      assertEquals("5d]$h[l:u&dL<", student0.getCurriculumCode());
      assertEquals((-4866), student0.getComplementaryCredits());
      assertEquals(1210, student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getStatusStr());
      assertEquals("", student0.getStatusTerm());
      assertEquals("+F clsz!W8D!-%rr", student0.getBirthDate());
      assertEquals(", curriculum='", student0.getMaritalStatus());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(1210, student0.getOptionalCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAdmissionTerm());
      assertEquals(1210.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("5d]$h[l:u&dL<", student0.getCountry());
      assertEquals("", student0.getRace());
      assertEquals(1.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(1519.0, student0.getGpa(), 0.01);
      assertEquals(1210, student0.getEnrolledCredits());
      assertEquals("t", student0.getPlaceOfBirth());
      assertEquals((-4866), student0.getOptionalHours());
      assertEquals(5, student0.getStatusIndex());
      assertEquals("+F clsz!W8D!-%rr", student0.getNationalId());
      assertEquals((-3656), student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertNotNull(student0);
      
      int int0 = student0.getOptionalHours();
      assertEquals((-4866), student0.getCompletedTerms());
      assertEquals("", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("!Nddq?]_To", student0.getDisabilities());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("t", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals("(VTK", student0.getNationality());
      assertEquals("kL0TJP>({Jm~nAf/", student0.getCourseCode());
      assertEquals("5d]$h[l:u&dL<", student0.getCurriculumCode());
      assertEquals((-4866), student0.getComplementaryCredits());
      assertEquals(1210, student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getStatusStr());
      assertEquals("", student0.getStatusTerm());
      assertEquals("+F clsz!W8D!-%rr", student0.getBirthDate());
      assertEquals(", curriculum='", student0.getMaritalStatus());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(1210, student0.getOptionalCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAdmissionTerm());
      assertEquals(1210.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("5d]$h[l:u&dL<", student0.getCountry());
      assertEquals("", student0.getRace());
      assertEquals(1.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(1519.0, student0.getGpa(), 0.01);
      assertEquals(1210, student0.getEnrolledCredits());
      assertEquals("t", student0.getPlaceOfBirth());
      assertEquals((-4866), student0.getOptionalHours());
      assertEquals(5, student0.getStatusIndex());
      assertEquals("+F clsz!W8D!-%rr", student0.getNationalId());
      assertEquals((-3656), student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals((-4866), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "k+;!vUeBpWW", "", "k+;!vUeBpWW", "k+;!vUeBpWW", "kZ=4'!r R+1h", "", "bI6C+PGqo'P-bv7JW", "bI6C+PGqo'P-bv7JW", "kZ=4'!r R+1h", "bI6C+PGqo'P-bv7JW", "bI6C+PGqo'P-bv7JW", studentStatus0, "k+;!vUeBpWW", "k+;!vUeBpWW", "", "com.google.common.collect.Range", "/bm`C9a\"ir3u", "u)6=kVp", "", "kZ=4'!r R+1h", (String) null, (Curriculum) null, (-1739), 770, 473, 0, 473, 2900, 2900, 473, (-459.48583944162), (-67.3342870374516), 1682554634, 1682554634, 0, 1682554634, 0, 3579.556419);
      assertEquals(3579.556419, student0.getAdmissionGrade(), 0.01);
      assertEquals("com.google.common.collect.Range", student0.getDisabilities());
      assertEquals(473, student0.getOptionalHours());
      assertNull(student0.getCurriculumCode());
      assertEquals("k+;!vUeBpWW", student0.getStatusTerm());
      assertEquals((-459.48583944162), student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getCountry());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getRace());
      assertEquals(1682554634, student0.getSuspendedTerms());
      assertEquals(473, student0.getComplementaryHours());
      assertEquals(2900, student0.getAttemptedCredits());
      assertEquals((-67.3342870374516), student0.getIea(), 0.01);
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(473.0, student0.getGpa(), 0.01);
      assertEquals(770, student0.getMandatoryCredits());
      assertEquals("k+;!vUeBpWW", student0.getAdmissionStr());
      assertEquals("u)6=kVp", student0.getSecondarySchool());
      assertEquals("kZ=4'!r R+1h", student0.getCourseCode());
      assertEquals("kZ=4'!r R+1h", student0.getGender());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getNationality());
      assertEquals("/bm`C9a\"ir3u", student0.getAffirmativePolicy());
      assertEquals(2900, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("k+;!vUeBpWW", student0.getBirthDate());
      assertEquals("k+;!vUeBpWW", student0.getEmail());
      assertEquals("k+;!vUeBpWW", student0.getNationalId());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(1682554634, student0.getCompletedTerms());
      assertEquals(3670, student0.getCompletedCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-1739), student0.getMandatoryHours());
      assertEquals("kZ=4'!r R+1h", student0.getPlaceOfBirth());
      assertEquals(1682554634, student0.getMobilityTerms());
      assertNotNull(student0);
      
      int int0 = student0.getOptionalCredits();
      assertEquals(3579.556419, student0.getAdmissionGrade(), 0.01);
      assertEquals("com.google.common.collect.Range", student0.getDisabilities());
      assertEquals(473, student0.getOptionalHours());
      assertNull(student0.getCurriculumCode());
      assertEquals("k+;!vUeBpWW", student0.getStatusTerm());
      assertEquals((-459.48583944162), student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getCountry());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getRace());
      assertEquals(1682554634, student0.getSuspendedTerms());
      assertEquals(473, student0.getComplementaryHours());
      assertEquals(2900, student0.getAttemptedCredits());
      assertEquals((-67.3342870374516), student0.getIea(), 0.01);
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(473.0, student0.getGpa(), 0.01);
      assertEquals(770, student0.getMandatoryCredits());
      assertEquals("k+;!vUeBpWW", student0.getAdmissionStr());
      assertEquals("u)6=kVp", student0.getSecondarySchool());
      assertEquals("kZ=4'!r R+1h", student0.getCourseCode());
      assertEquals("kZ=4'!r R+1h", student0.getGender());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getNationality());
      assertEquals("/bm`C9a\"ir3u", student0.getAffirmativePolicy());
      assertEquals(2900, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("k+;!vUeBpWW", student0.getBirthDate());
      assertEquals("k+;!vUeBpWW", student0.getEmail());
      assertEquals("k+;!vUeBpWW", student0.getNationalId());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(1682554634, student0.getCompletedTerms());
      assertEquals(3670, student0.getCompletedCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-1739), student0.getMandatoryHours());
      assertEquals("kZ=4'!r R+1h", student0.getPlaceOfBirth());
      assertEquals(1682554634, student0.getMobilityTerms());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("com.google.common.collect.Interners$InternerFunction", "org.apache.commons.io.filefilter.NameFileFilter", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1146), 0, (-1146), 0, 0, 0, 821, 1872, 821, 0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1146), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2292.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1146), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("org.apache.commons.io.filefilter.NameFileFilter", curriculum0.getCurriculumCode());
      assertEquals(821, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("com.google.common.collect.Interners$InternerFunction", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(821, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(1872, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(linkedHashSet0.contains("org.apache.commons.io.filefilter.NameFileFilter"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "", (String) null, "", "com.google.common.collect.Interners$InternerFunction", "", "fromIterable", ":2T^", (String) null, "fromIterable", "h?", studentStatus0, "", "com.google.common.collect.Interners$InternerFunction", ":2T^", ", mandatoryCredits=", (String) null, "", "y|JJNZ[uH~", ")H=_C'M{[#i.k", (String) null, curriculum0, 0, 6, 0, (-3295), (-3295), (-2572), 8192, 0, (-1146), 0.03, 1872, (-869), 20, (-1691), 0, (-3295));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1146), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2292.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1146), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("org.apache.commons.io.filefilter.NameFileFilter", curriculum0.getCurriculumCode());
      assertEquals(821, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("com.google.common.collect.Interners$InternerFunction", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(821, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(1872, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("fromIterable", student0.getRace());
      assertNull(student0.getCurriculumCode());
      assertEquals(20, student0.getInstitutionalEnrollments());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals("y|JJNZ[uH~", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationalId());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(8192, student0.getAttemptedCredits());
      assertEquals((-869), student0.getSuspendedTerms());
      assertEquals("", student0.getEmail());
      assertEquals(":2T^", student0.getAdmissionTerm());
      assertEquals(6, student0.getMandatoryCredits());
      assertNull(student0.getBirthDate());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("h?", student0.getStatusStr());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("com.google.common.collect.Interners$InternerFunction", student0.getAdmissionStr());
      assertEquals(":2T^", student0.getCountry());
      assertEquals(", mandatoryCredits=", student0.getDisabilities());
      assertEquals((-3295), student0.getOptionalCredits());
      assertEquals("com.google.common.collect.Interners$InternerFunction", student0.getGender());
      assertEquals("", student0.getStatusTerm());
      assertEquals((-5861), student0.getCompletedCredits());
      assertEquals((-3295), student0.getComplementaryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-1146.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getName());
      assertEquals(1872, student0.getCompletedTerms());
      assertEquals("fromIterable", student0.getNationality());
      assertEquals((-3295.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(")H=_C'M{[#i.k", student0.getCourseCode());
      assertNull(student0.getPlaceOfBirth());
      assertEquals((-1691), student0.getMobilityTerms());
      assertNull(student0.getAffirmativePolicy());
      assertEquals((-2572), student0.getComplementaryCredits());
      assertFalse(linkedHashSet0.contains("fromIterable"));
      assertNotNull(student0);
      
      int int0 = student0.getOptionalCredits();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1146), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2292.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1146), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("org.apache.commons.io.filefilter.NameFileFilter", curriculum0.getCurriculumCode());
      assertEquals(821, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("com.google.common.collect.Interners$InternerFunction", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(821, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(1872, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("fromIterable", student0.getRace());
      assertNull(student0.getCurriculumCode());
      assertEquals(20, student0.getInstitutionalEnrollments());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals("y|JJNZ[uH~", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationalId());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(8192, student0.getAttemptedCredits());
      assertEquals((-869), student0.getSuspendedTerms());
      assertEquals("", student0.getEmail());
      assertEquals(":2T^", student0.getAdmissionTerm());
      assertEquals(6, student0.getMandatoryCredits());
      assertNull(student0.getBirthDate());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("h?", student0.getStatusStr());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("com.google.common.collect.Interners$InternerFunction", student0.getAdmissionStr());
      assertEquals(":2T^", student0.getCountry());
      assertEquals(", mandatoryCredits=", student0.getDisabilities());
      assertEquals((-3295), student0.getOptionalCredits());
      assertEquals("com.google.common.collect.Interners$InternerFunction", student0.getGender());
      assertEquals("", student0.getStatusTerm());
      assertEquals((-5861), student0.getCompletedCredits());
      assertEquals((-3295), student0.getComplementaryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-1146.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getName());
      assertEquals(1872, student0.getCompletedTerms());
      assertEquals("fromIterable", student0.getNationality());
      assertEquals((-3295.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(")H=_C'M{[#i.k", student0.getCourseCode());
      assertNull(student0.getPlaceOfBirth());
      assertEquals((-1691), student0.getMobilityTerms());
      assertNull(student0.getAffirmativePolicy());
      assertEquals((-2572), student0.getComplementaryCredits());
      assertFalse(linkedHashSet0.contains("fromIterable"));
      assertEquals((-3295), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("yfLQ-q", "yfLQ-q", "yfLQ-q", "yfLQ-q", (String) null, "U87", "", (String) null, "~moS93DSr\"spzm`JEf", "U87", "~moS93DSr\"spzm`JEf", (String) null, studentStatus0, "yfLQ-q", "9=d`19", "CANCELAMENTO P/ MUDANCA CURSO", "CANCELAMENTO P/ MUDANCA CURSO", "yfLQ-q", "", "r\"1Xf?^d78_V:Dx^[", "com.google.common.base.Predicates$AndPredicate", "9=d`19", (Curriculum) null, (-4012), (-4012), 0, (-4012), 0, 0, 0, 0, (-706.55123156647), 0, (-1865), 0, 0, 0, (-4012), (-760.47));
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-760.47), student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("r\"1Xf?^d78_V:Dx^[", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("com.google.common.base.Predicates$AndPredicate", student0.getCourseCode());
      assertEquals("yfLQ-q", student0.getStatusTerm());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getAdmissionTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("yfLQ-q", student0.getBirthDate());
      assertEquals("U87", student0.getPlaceOfBirth());
      assertNull(student0.getNationality());
      assertEquals((-4012), student0.getMandatoryCredits());
      assertEquals((-8024), student0.getCompletedCredits());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("U87", student0.getGender());
      assertEquals((-4012), student0.getMandatoryHours());
      assertNull(student0.getStatusStr());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getDisabilities());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("~moS93DSr\"spzm`JEf", student0.getRace());
      assertEquals("~moS93DSr\"spzm`JEf", student0.getCountry());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("9=d`19", student0.getCurriculumCode());
      assertEquals("yfLQ-q", student0.getNationalId());
      assertEquals("yfLQ-q", student0.getAffirmativePolicy());
      assertNull(student0.getEmail());
      assertEquals((-4012), student0.getOptionalCredits());
      assertEquals((-706.55123156647), student0.getMc(), 0.01);
      assertEquals("9=d`19", student0.getAdmissionStr());
      assertEquals("yfLQ-q", student0.getName());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-4012), student0.getEnrolledCredits());
      assertEquals((-1865), student0.getCompletedTerms());
      assertNotNull(student0);
      
      String string0 = student0.getNationality();
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-760.47), student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("r\"1Xf?^d78_V:Dx^[", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("com.google.common.base.Predicates$AndPredicate", student0.getCourseCode());
      assertEquals("yfLQ-q", student0.getStatusTerm());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getAdmissionTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("yfLQ-q", student0.getBirthDate());
      assertEquals("U87", student0.getPlaceOfBirth());
      assertNull(student0.getNationality());
      assertEquals((-4012), student0.getMandatoryCredits());
      assertEquals((-8024), student0.getCompletedCredits());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("U87", student0.getGender());
      assertEquals((-4012), student0.getMandatoryHours());
      assertNull(student0.getStatusStr());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getDisabilities());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("~moS93DSr\"spzm`JEf", student0.getRace());
      assertEquals("~moS93DSr\"spzm`JEf", student0.getCountry());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("9=d`19", student0.getCurriculumCode());
      assertEquals("yfLQ-q", student0.getNationalId());
      assertEquals("yfLQ-q", student0.getAffirmativePolicy());
      assertNull(student0.getEmail());
      assertEquals((-4012), student0.getOptionalCredits());
      assertEquals((-706.55123156647), student0.getMc(), 0.01);
      assertEquals("9=d`19", student0.getAdmissionStr());
      assertEquals("yfLQ-q", student0.getName());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-4012), student0.getEnrolledCredits());
      assertEquals((-1865), student0.getCompletedTerms());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum(", complementaryCredits=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-102), (-102), (-252), 0, 0, 0, (-69), 0, 0, 0, hashSet0, hashSet0, hashSet0, (Collection<String>) null, arrayDeque0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals((-456.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-102), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-252), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(", complementaryCredits=", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-69), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-252)));
      assertFalse(hashSet0.contains(", complementaryCredits="));
      assertFalse(arrayDeque0.contains(", complementaryCredits="));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "u?~9#.v8?", "", "", "", "IS_FILE", "", "", "", "", "", studentStatus0, "u?~9#.v8?", "", "", "u?~9#.v8?", ", complementaryCredits=", "", (String) null, ", suspendedTerms=", ", complementaryCredits=", curriculum0, (-430), (-2673), (-2673), 880, 0, 0, 0, (-102), 0.0, (-102), (-430), 0, 0, (-1578), (-430), (-102));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals((-456.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-102), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-252), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(", complementaryCredits=", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-69), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("u?~9#.v8?", student0.getDisabilities());
      assertEquals(880, student0.getOptionalCredits());
      assertEquals("IS_FILE", student0.getMaritalStatus());
      assertEquals("u?~9#.v8?", student0.getName());
      assertEquals("", student0.getCountry());
      assertEquals((-2673), student0.getMandatoryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-430), student0.getEnrolledCredits());
      assertEquals((-430), student0.getCompletedTerms());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getNationality());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getBirthDate());
      assertEquals((-102.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-102.0), student0.getIea(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals((-2673), student0.getOptionalHours());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("u?~9#.v8?", student0.getStatusTerm());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-102.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals(", suspendedTerms=", student0.getCourseCode());
      assertEquals("", student0.getNationalId());
      assertEquals((-1793), student0.getCompletedCredits());
      assertEquals((-430), student0.getMandatoryHours());
      assertEquals(", complementaryCredits=", student0.getCurriculumCode());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-1578), student0.getMobilityTerms());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(", complementaryCredits=", student0.getAffirmativePolicy());
      assertFalse(arrayList0.contains(0));
      assertFalse(hashSet0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(student0);
      
      String string0 = student0.getNationality();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals((-456.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-102), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-252), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(", complementaryCredits=", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-69), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("u?~9#.v8?", student0.getDisabilities());
      assertEquals(880, student0.getOptionalCredits());
      assertEquals("IS_FILE", student0.getMaritalStatus());
      assertEquals("u?~9#.v8?", student0.getName());
      assertEquals("", student0.getCountry());
      assertEquals((-2673), student0.getMandatoryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-430), student0.getEnrolledCredits());
      assertEquals((-430), student0.getCompletedTerms());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getNationality());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getBirthDate());
      assertEquals((-102.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-102.0), student0.getIea(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals((-2673), student0.getOptionalHours());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("u?~9#.v8?", student0.getStatusTerm());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-102.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals(", suspendedTerms=", student0.getCourseCode());
      assertEquals("", student0.getNationalId());
      assertEquals((-1793), student0.getCompletedCredits());
      assertEquals((-430), student0.getMandatoryHours());
      assertEquals(", complementaryCredits=", student0.getCurriculumCode());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-1578), student0.getMobilityTerms());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(", complementaryCredits=", student0.getAffirmativePolicy());
      assertFalse(arrayList0.contains(0));
      assertFalse(hashSet0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("com.google.common.base.Predicates$SubtypeOfPredicate", "A!mj#6XIb", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 612, 612, 612, 8199, 612, 0, 0, 8199, (-729), 3044, vector0, vector0, vector0, vector0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("A!mj#6XIb", curriculum0.getCurriculumCode());
      assertEquals(612, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-729), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(612, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(3044, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(612, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(612, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("com.google.common.base.Predicates$SubtypeOfPredicate", curriculum0.getCourseCode());
      assertEquals(8199, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(10035.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(8199, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(vector0.contains("A!mj#6XIb"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student((String) null, (String) null, (String) null, "y:Jk~E5", (String) null, "y:Jk~E5", "y:Jk~E5", "", "", "y:Jk~E5", "", "`b", studentStatus0, "r}t", "", "", (String) null, "", "", "", "A!mj#6XIb", "UNFEASIBLE", curriculum0, 0, (-1533), 8199, 0, 1141, 0, (-3599), 904.8377135486, 4.0, (-1902.5819344154), 612, 0, (-3599), (-1533), (-1118), (-3088.6));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("A!mj#6XIb", curriculum0.getCurriculumCode());
      assertEquals(612, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-729), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(612, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(3044, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(612, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(612, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("com.google.common.base.Predicates$SubtypeOfPredicate", curriculum0.getCourseCode());
      assertEquals(8199, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(10035.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(8199, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-3599), student0.getInstitutionalEnrollments());
      assertEquals("y:Jk~E5", student0.getPlaceOfBirth());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(8199, student0.getOptionalHours());
      assertNull(student0.getNationalId());
      assertEquals("y:Jk~E5", student0.getGender());
      assertEquals((-1118), student0.getEnrolledCredits());
      assertNull(student0.getName());
      assertNull(student0.getEmail());
      assertEquals("r}t", student0.getStatusTerm());
      assertEquals((-1533), student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("y:Jk~E5", student0.getBirthDate());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getRace());
      assertEquals(1141, student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(904.8377135486, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals((-3088.6), student0.getAdmissionGrade(), 0.01);
      assertEquals("A!mj#6XIb", student0.getCourseCode());
      assertEquals((-1902.5819344154), student0.getIea(), 0.01);
      assertEquals((-3599), student0.getAttemptedCredits());
      assertEquals("y:Jk~E5", student0.getMaritalStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals("UNFEASIBLE", student0.getCurriculumCode());
      assertEquals(612, student0.getCompletedTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getNationality());
      assertNull(student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-1533), student0.getCompletedCredits());
      assertEquals((-1533), student0.getMobilityTerms());
      assertEquals("`b", student0.getStatusStr());
      assertFalse(vector0.contains(""));
      assertNotNull(student0);
      
      String string0 = student0.getNationalId();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("A!mj#6XIb", curriculum0.getCurriculumCode());
      assertEquals(612, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-729), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(612, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(3044, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(612, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(612, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("com.google.common.base.Predicates$SubtypeOfPredicate", curriculum0.getCourseCode());
      assertEquals(8199, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(10035.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(8199, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-3599), student0.getInstitutionalEnrollments());
      assertEquals("y:Jk~E5", student0.getPlaceOfBirth());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(8199, student0.getOptionalHours());
      assertNull(student0.getNationalId());
      assertEquals("y:Jk~E5", student0.getGender());
      assertEquals((-1118), student0.getEnrolledCredits());
      assertNull(student0.getName());
      assertNull(student0.getEmail());
      assertEquals("r}t", student0.getStatusTerm());
      assertEquals((-1533), student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("y:Jk~E5", student0.getBirthDate());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getRace());
      assertEquals(1141, student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(904.8377135486, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals((-3088.6), student0.getAdmissionGrade(), 0.01);
      assertEquals("A!mj#6XIb", student0.getCourseCode());
      assertEquals((-1902.5819344154), student0.getIea(), 0.01);
      assertEquals((-3599), student0.getAttemptedCredits());
      assertEquals("y:Jk~E5", student0.getMaritalStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals("UNFEASIBLE", student0.getCurriculumCode());
      assertEquals(612, student0.getCompletedTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getNationality());
      assertNull(student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-1533), student0.getCompletedCredits());
      assertEquals((-1533), student0.getMobilityTerms());
      assertEquals("`b", student0.getStatusStr());
      assertFalse(vector0.contains(""));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", studentStatus0, "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", (Curriculum) null, 14, 14, 14, 1592, 1592, 14, 14, 14, 5379.97808, (-1866.5970733057043), 1592, (-1761), 14, 14, 1592, 14);
      assertEquals("oe_", student0.getEmail());
      assertEquals("oe_", student0.getBirthDate());
      assertEquals("oe_", student0.getNationalId());
      assertEquals("oe_", student0.getDisabilities());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getStatusStr());
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getName());
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals("oe_", student0.getGender());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-1866.5970733057043), student0.getIea(), 0.01);
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals("oe_", student0.getNationality());
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals(14, student0.getOptionalHours());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals(14, student0.getMandatoryHours());
      assertNotNull(student0);
      
      String string0 = student0.getNationalId();
      assertEquals("oe_", student0.getEmail());
      assertEquals("oe_", student0.getBirthDate());
      assertEquals("oe_", student0.getNationalId());
      assertEquals("oe_", student0.getDisabilities());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getStatusStr());
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getName());
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals("oe_", student0.getGender());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-1866.5970733057043), student0.getIea(), 0.01);
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals("oe_", student0.getNationality());
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals(14, student0.getOptionalHours());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals(14, student0.getMandatoryHours());
      assertEquals("oe_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student((String) null, (String) null, (String) null, "KNpK", "KNpK", "KNpK", (String) null, "KNpK", (String) null, "", "", (String) null, studentStatus0, "", (String) null, "KNpK", "D-K~+\"k", "", "KNpK", "KNpK", "#", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), 0, 0, (-3786), 407.070019434, 0, (-1844), 0, 0, 1, 0.0);
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("KNpK", student0.getNationality());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-1844), student0.getCompletedCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("KNpK", student0.getSecondarySchool());
      assertEquals("#", student0.getCourseCode());
      assertNull(student0.getStatusStr());
      assertEquals(1, student0.getEnrolledCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNull(student0.getMaritalStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals("KNpK", student0.getAdmissionTerm());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getName());
      assertEquals("KNpK", student0.getEmail());
      assertEquals("KNpK", student0.getBirthDate());
      assertEquals("KNpK", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-1844), student0.getSuspendedTerms());
      assertEquals("", student0.getAffirmativePolicy());
      assertNull(student0.getCountry());
      assertEquals("D-K~+\"k", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertNull(student0.getAdmissionStr());
      assertNull(student0.getNationalId());
      assertEquals((-3786), student0.getComplementaryHours());
      assertEquals("KNpK", student0.getGender());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals((-3786), student0.getMandatoryHours());
      assertEquals(0, student0.getMobilityTerms());
      assertNotNull(student0);
      
      String string0 = student0.getName();
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("KNpK", student0.getNationality());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-1844), student0.getCompletedCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("KNpK", student0.getSecondarySchool());
      assertEquals("#", student0.getCourseCode());
      assertNull(student0.getStatusStr());
      assertEquals(1, student0.getEnrolledCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNull(student0.getMaritalStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals("KNpK", student0.getAdmissionTerm());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getName());
      assertEquals("KNpK", student0.getEmail());
      assertEquals("KNpK", student0.getBirthDate());
      assertEquals("KNpK", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-1844), student0.getSuspendedTerms());
      assertEquals("", student0.getAffirmativePolicy());
      assertNull(student0.getCountry());
      assertEquals("D-K~+\"k", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertNull(student0.getAdmissionStr());
      assertNull(student0.getNationalId());
      assertEquals((-3786), student0.getComplementaryHours());
      assertEquals("KNpK", student0.getGender());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals((-3786), student0.getMandatoryHours());
      assertEquals(0, student0.getMobilityTerms());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("BdwqvtE", ", placeOfBirth='", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, Integer.MAX_VALUE, 0, 0, Integer.MAX_VALUE, 6, 6, 0, 0, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2.147483647E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(6, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinNumberOfTerms());
      assertEquals(", placeOfBirth='", curriculum0.getCurriculumCode());
      assertEquals(6, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("BdwqvtE", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(Integer.MAX_VALUE));
      assertFalse(treeSet0.contains("BdwqvtE"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "", "G1=rXr@[9j", "R4,}w4tTLt~v", "", ", complementarySubjectsList=", (String) null, (String) null, "!QXLlHxD-", "should never be called", "G1=rXr@[9j", studentStatus0, ", complementarySubjectsList=", "", ", complementarySubjectsList=", ", complementarySubjectsList=", "", (String) null, "", "ALWAYS_FALSE", "expectedSize", curriculum0, 0, 6, 240, 255, 67, (-2120), 0, 3.0, 3.0, 0.0, 87855567, 0, 0, 1754, 6, 0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2.147483647E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(6, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinNumberOfTerms());
      assertEquals(", placeOfBirth='", curriculum0.getCurriculumCode());
      assertEquals(6, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("BdwqvtE", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("R4,}w4tTLt~v", student0.getEmail());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertEquals("G1=rXr@[9j", student0.getStatusStr());
      assertEquals("!QXLlHxD-", student0.getPlaceOfBirth());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("expectedSize", student0.getCurriculumCode());
      assertEquals(6, student0.getMandatoryCredits());
      assertEquals(1754, student0.getMobilityTerms());
      assertNull(student0.getNationality());
      assertEquals("should never be called", student0.getRace());
      assertEquals(", complementarySubjectsList=", student0.getDisabilities());
      assertEquals("G1=rXr@[9j", student0.getBirthDate());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(", complementarySubjectsList=", student0.getMaritalStatus());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(6, student0.getEnrolledCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", complementarySubjectsList=", student0.getStatusTerm());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertNull(student0.getCountry());
      assertEquals("ALWAYS_FALSE", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", complementarySubjectsList=", student0.getAdmissionTerm());
      assertEquals((-2120), student0.getComplementaryCredits());
      assertEquals("", student0.getName());
      assertEquals(87855567, student0.getCompletedTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getNationalId());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-1859), student0.getCompletedCredits());
      assertEquals(240, student0.getOptionalHours());
      assertNull(student0.getSecondarySchool());
      assertEquals(67, student0.getComplementaryHours());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(255, student0.getOptionalCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(treeSet0.contains("BdwqvtE"));
      assertNotNull(student0);
      
      String string0 = student0.getName();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2.147483647E9, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(6, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinNumberOfTerms());
      assertEquals(", placeOfBirth='", curriculum0.getCurriculumCode());
      assertEquals(6, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("BdwqvtE", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("R4,}w4tTLt~v", student0.getEmail());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertEquals("G1=rXr@[9j", student0.getStatusStr());
      assertEquals("!QXLlHxD-", student0.getPlaceOfBirth());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("expectedSize", student0.getCurriculumCode());
      assertEquals(6, student0.getMandatoryCredits());
      assertEquals(1754, student0.getMobilityTerms());
      assertNull(student0.getNationality());
      assertEquals("should never be called", student0.getRace());
      assertEquals(", complementarySubjectsList=", student0.getDisabilities());
      assertEquals("G1=rXr@[9j", student0.getBirthDate());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(", complementarySubjectsList=", student0.getMaritalStatus());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(6, student0.getEnrolledCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", complementarySubjectsList=", student0.getStatusTerm());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertNull(student0.getCountry());
      assertEquals("ALWAYS_FALSE", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", complementarySubjectsList=", student0.getAdmissionTerm());
      assertEquals((-2120), student0.getComplementaryCredits());
      assertEquals("", student0.getName());
      assertEquals(87855567, student0.getCompletedTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getNationalId());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-1859), student0.getCompletedCredits());
      assertEquals(240, student0.getOptionalHours());
      assertNull(student0.getSecondarySchool());
      assertEquals(67, student0.getComplementaryHours());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(255, student0.getOptionalCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(treeSet0.contains("BdwqvtE"));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("%B5!4@", "0q?jb", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 2003, 2003, (-159), 41, (-159), 2003, 8, 0, 41, 2003, vector0, vector0, vector0, vector0, vector0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(41));
      assertFalse(vector0.contains("%B5!4@"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "A j7db", "", "", ", mandatoryCredits=", "com.google.common.base.Functions$ToStringFunction", "com.google.common.base.Functions$ToStringFunction", ".:sO?%sXA", ".:sO?%sXA", "A j7db", ".:sO?%sXA", "", studentStatus0, "", "B=", ", mandatoryCredits=", "0q?jb", "g&VJ", "~:&km4@iZ", "0q?jb", "A j7db", "", curriculum0, 0, 822, 262, 2003, 0, 8, 0, (-1353.549466524), 0.0, 822, 822, 2003, 822, 0, 795, 41);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", mandatoryCredits=", student0.getEmail());
      assertEquals(795, student0.getEnrolledCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getBirthDate());
      assertEquals(41.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getName());
      assertEquals(822, student0.getMandatoryCredits());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getGender());
      assertEquals(2833, student0.getCompletedCredits());
      assertEquals(2003, student0.getOptionalCredits());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getMaritalStatus());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("0q?jb", student0.getDisabilities());
      assertEquals(".:sO?%sXA", student0.getNationality());
      assertEquals("g&VJ", student0.getAffirmativePolicy());
      assertEquals(262, student0.getOptionalHours());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(2003, student0.getSuspendedTerms());
      assertEquals("~:&km4@iZ", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals(", mandatoryCredits=", student0.getAdmissionTerm());
      assertEquals(822, student0.getCompletedTerms());
      assertEquals("A j7db", student0.getPlaceOfBirth());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(822, student0.getInstitutionalEnrollments());
      assertEquals(8, student0.getComplementaryCredits());
      assertEquals((-1353.549466524), student0.getGpa(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals("B=", student0.getAdmissionStr());
      assertEquals(".:sO?%sXA", student0.getRace());
      assertEquals(".:sO?%sXA", student0.getCountry());
      assertEquals("A j7db", student0.getNationalId());
      assertEquals("0q?jb", student0.getSecondarySchoolGraduationYear());
      assertEquals(822.0, student0.getIea(), 0.01);
      assertEquals("A j7db", student0.getCourseCode());
      assertFalse(arrayList0.contains(822));
      assertFalse(vector0.contains(".:sO?%sXA"));
      assertNotNull(student0);
      
      int int0 = student0.getMobilityTerms();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", mandatoryCredits=", student0.getEmail());
      assertEquals(795, student0.getEnrolledCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getBirthDate());
      assertEquals(41.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getName());
      assertEquals(822, student0.getMandatoryCredits());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getGender());
      assertEquals(2833, student0.getCompletedCredits());
      assertEquals(2003, student0.getOptionalCredits());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getMaritalStatus());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("0q?jb", student0.getDisabilities());
      assertEquals(".:sO?%sXA", student0.getNationality());
      assertEquals("g&VJ", student0.getAffirmativePolicy());
      assertEquals(262, student0.getOptionalHours());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(2003, student0.getSuspendedTerms());
      assertEquals("~:&km4@iZ", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals(", mandatoryCredits=", student0.getAdmissionTerm());
      assertEquals(822, student0.getCompletedTerms());
      assertEquals("A j7db", student0.getPlaceOfBirth());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(822, student0.getInstitutionalEnrollments());
      assertEquals(8, student0.getComplementaryCredits());
      assertEquals((-1353.549466524), student0.getGpa(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals("B=", student0.getAdmissionStr());
      assertEquals(".:sO?%sXA", student0.getRace());
      assertEquals(".:sO?%sXA", student0.getCountry());
      assertEquals("A j7db", student0.getNationalId());
      assertEquals("0q?jb", student0.getSecondarySchoolGraduationYear());
      assertEquals(822.0, student0.getIea(), 0.01);
      assertEquals("A j7db", student0.getCourseCode());
      assertFalse(arrayList0.contains(822));
      assertFalse(vector0.contains(".:sO?%sXA"));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", ", country='", "X&oy A&09n", ", country='", ", country='", "#?~M']3mrGJ", "", "#?~M']3mrGJ", "", studentStatus0, "", "SENSITIVE", "", "", "", "#?~M']3mrGJ", "", "xE", "org.apache.commons.io.filefilter.DirectoryFileFilter", (Curriculum) null, 0, 0, 1099, 0, 0, Integer.MAX_VALUE, 0, (-2840.882315319278), 0, 0.5, 1099, 0, 0, (-2634), 450, (-1058.0495254042));
      assertEquals((-2840.882315319278), student0.getGpa(), 0.01);
      assertEquals(1099, student0.getCompletedTerms());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("xE", student0.getCourseCode());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(", country='", student0.getEmail());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-1058.0495254042), student0.getAdmissionGrade(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryCredits());
      assertEquals("X&oy A&09n", student0.getGender());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals((-2634), student0.getMobilityTerms());
      assertEquals(450, student0.getEnrolledCredits());
      assertEquals("org.apache.commons.io.filefilter.DirectoryFileFilter", student0.getCurriculumCode());
      assertEquals("", student0.getName());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("SENSITIVE", student0.getAdmissionStr());
      assertEquals(0.5, student0.getIea(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getStatusStr());
      assertEquals("#?~M']3mrGJ", student0.getCountry());
      assertEquals(", country='", student0.getNationality());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("#?~M']3mrGJ", student0.getRace());
      assertEquals(1099, student0.getOptionalHours());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedCredits());
      assertEquals(", country='", student0.getMaritalStatus());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("#?~M']3mrGJ", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getSuspendedTerms());
      assertNotNull(student0);
      
      int int0 = student0.getMobilityTerms();
      assertEquals((-2840.882315319278), student0.getGpa(), 0.01);
      assertEquals(1099, student0.getCompletedTerms());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("xE", student0.getCourseCode());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(", country='", student0.getEmail());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-1058.0495254042), student0.getAdmissionGrade(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryCredits());
      assertEquals("X&oy A&09n", student0.getGender());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals((-2634), student0.getMobilityTerms());
      assertEquals(450, student0.getEnrolledCredits());
      assertEquals("org.apache.commons.io.filefilter.DirectoryFileFilter", student0.getCurriculumCode());
      assertEquals("", student0.getName());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("SENSITIVE", student0.getAdmissionStr());
      assertEquals(0.5, student0.getIea(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getStatusStr());
      assertEquals("#?~M']3mrGJ", student0.getCountry());
      assertEquals(", country='", student0.getNationality());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("#?~M']3mrGJ", student0.getRace());
      assertEquals(1099, student0.getOptionalHours());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedCredits());
      assertEquals(", country='", student0.getMaritalStatus());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("#?~M']3mrGJ", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-2634), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("%B5!4@", "0q?jb", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 2003, 2003, (-159), 41, (-159), 2003, 8, 0, 41, 2003, vector0, vector0, vector0, vector0, vector0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertFalse(arrayList0.contains(2003));
      assertFalse(vector0.contains("0q?jb"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "A j7db", "", "", ", mandatoryCredits=", "com.google.common.base.Functions$ToStringFunction", "com.google.common.base.Functions$ToStringFunction", ".:sO?%sXA", ".:sO?%sXA", "A j7db", ".:sO?%sXA", "", studentStatus0, "", "B=", ", mandatoryCredits=", "0q?jb", "g&VJ", "~:&km4@iZ", "0q?jb", "A j7db", "", curriculum0, 0, 822, 262, 2003, 0, 8, 0, (-1353.549466524), 0.0, 822, 822, 2003, 822, 0, 795, 41);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("0q?jb", student0.getSecondarySchoolGraduationYear());
      assertEquals(822, student0.getMandatoryCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(41.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(2003, student0.getOptionalCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(2833, student0.getCompletedCredits());
      assertEquals(".:sO?%sXA", student0.getCountry());
      assertEquals(8, student0.getComplementaryCredits());
      assertEquals(".:sO?%sXA", student0.getRace());
      assertEquals(795, student0.getEnrolledCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getMaritalStatus());
      assertEquals(822.0, student0.getIea(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals("A j7db", student0.getNationalId());
      assertEquals(", mandatoryCredits=", student0.getAdmissionTerm());
      assertEquals("", student0.getBirthDate());
      assertEquals(", mandatoryCredits=", student0.getEmail());
      assertEquals("A j7db", student0.getCourseCode());
      assertEquals(822, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-1353.549466524), student0.getGpa(), 0.01);
      assertEquals("B=", student0.getAdmissionStr());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("A j7db", student0.getPlaceOfBirth());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(822, student0.getCompletedTerms());
      assertEquals("g&VJ", student0.getAffirmativePolicy());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getGender());
      assertEquals("~:&km4@iZ", student0.getSecondarySchool());
      assertEquals("", student0.getName());
      assertEquals("0q?jb", student0.getDisabilities());
      assertEquals(262, student0.getOptionalHours());
      assertEquals(2003, student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(".:sO?%sXA", student0.getNationality());
      assertFalse(arrayList0.contains(822));
      assertFalse(vector0.contains(".:sO?%sXA"));
      assertNotNull(student0);
      
      double double0 = student0.getMc();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("%B5!4@", curriculum0.getCourseCode());
      assertEquals(41, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2003, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2003, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-159), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3888.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2003, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(8, curriculum0.getMaxNumberOfTerms());
      assertEquals((-159), curriculum0.getMinActivitiesNeeded());
      assertEquals("0q?jb", curriculum0.getCurriculumCode());
      assertEquals(2003, curriculum0.getMinNumberOfTerms());
      assertEquals(41, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("0q?jb", student0.getSecondarySchoolGraduationYear());
      assertEquals(822, student0.getMandatoryCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(41.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(2003, student0.getOptionalCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(2833, student0.getCompletedCredits());
      assertEquals(".:sO?%sXA", student0.getCountry());
      assertEquals(8, student0.getComplementaryCredits());
      assertEquals(".:sO?%sXA", student0.getRace());
      assertEquals(795, student0.getEnrolledCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getMaritalStatus());
      assertEquals(822.0, student0.getIea(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals("A j7db", student0.getNationalId());
      assertEquals(", mandatoryCredits=", student0.getAdmissionTerm());
      assertEquals("", student0.getBirthDate());
      assertEquals(", mandatoryCredits=", student0.getEmail());
      assertEquals("A j7db", student0.getCourseCode());
      assertEquals(822, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-1353.549466524), student0.getGpa(), 0.01);
      assertEquals("B=", student0.getAdmissionStr());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("A j7db", student0.getPlaceOfBirth());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(822, student0.getCompletedTerms());
      assertEquals("g&VJ", student0.getAffirmativePolicy());
      assertEquals("com.google.common.base.Functions$ToStringFunction", student0.getGender());
      assertEquals("~:&km4@iZ", student0.getSecondarySchool());
      assertEquals("", student0.getName());
      assertEquals("0q?jb", student0.getDisabilities());
      assertEquals(262, student0.getOptionalHours());
      assertEquals(2003, student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(".:sO?%sXA", student0.getNationality());
      assertFalse(arrayList0.contains(822));
      assertFalse(vector0.contains(".:sO?%sXA"));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student((String) null, (String) null, "'e; @xb", (String) null, "", "p8TRtt(6pc`r_`4x", "", "b]=~TxG2cExIu6", "", "09@XFQJ~vkH_S3", "p8TRtt(6pc`r_`4x", ".t1}s9zP", studentStatus0, "", "", (String) null, "", "CANCELAMENTO POR ABANDONO", (String) null, "", "", "b]=~TxG2cExIu6", (Curriculum) null, 5, 5, 5, 1281, 4138, 5, 5, 1281, 4138, 0.0, 5, 5, 5, 2184, 4138, 0.0);
      assertEquals("b]=~TxG2cExIu6", student0.getNationality());
      assertEquals("p8TRtt(6pc`r_`4x", student0.getRace());
      assertEquals(4138, student0.getEnrolledCredits());
      assertEquals(5, student0.getOptionalHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("09@XFQJ~vkH_S3", student0.getPlaceOfBirth());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(1281, student0.getOptionalCredits());
      assertEquals(5, student0.getAttemptedCredits());
      assertEquals(2184, student0.getMobilityTerms());
      assertNull(student0.getSecondarySchool());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("p8TRtt(6pc`r_`4x", student0.getGender());
      assertEquals(5, student0.getCompletedTerms());
      assertEquals("", student0.getStatusTerm());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertNull(student0.getNationalId());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(5, student0.getMandatoryHours());
      assertEquals(1291, student0.getCompletedCredits());
      assertEquals(5, student0.getMandatoryCredits());
      assertEquals(4138, student0.getComplementaryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("'e; @xb", student0.getName());
      assertEquals("b]=~TxG2cExIu6", student0.getCurriculumCode());
      assertEquals(5, student0.getSuspendedTerms());
      assertEquals(1281.0, student0.getGpa(), 0.01);
      assertEquals(4138.0, student0.getMc(), 0.01);
      assertEquals(5, student0.getComplementaryCredits());
      assertNull(student0.getAdmissionTerm());
      assertEquals(".t1}s9zP", student0.getStatusStr());
      assertNull(student0.getBirthDate());
      assertNotNull(student0);
      
      double double0 = student0.getMc();
      assertEquals("b]=~TxG2cExIu6", student0.getNationality());
      assertEquals("p8TRtt(6pc`r_`4x", student0.getRace());
      assertEquals(4138, student0.getEnrolledCredits());
      assertEquals(5, student0.getOptionalHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("09@XFQJ~vkH_S3", student0.getPlaceOfBirth());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(1281, student0.getOptionalCredits());
      assertEquals(5, student0.getAttemptedCredits());
      assertEquals(2184, student0.getMobilityTerms());
      assertNull(student0.getSecondarySchool());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("p8TRtt(6pc`r_`4x", student0.getGender());
      assertEquals(5, student0.getCompletedTerms());
      assertEquals("", student0.getStatusTerm());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertNull(student0.getNationalId());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(5, student0.getMandatoryHours());
      assertEquals(1291, student0.getCompletedCredits());
      assertEquals(5, student0.getMandatoryCredits());
      assertEquals(4138, student0.getComplementaryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("'e; @xb", student0.getName());
      assertEquals("b]=~TxG2cExIu6", student0.getCurriculumCode());
      assertEquals(5, student0.getSuspendedTerms());
      assertEquals(1281.0, student0.getGpa(), 0.01);
      assertEquals(4138.0, student0.getMc(), 0.01);
      assertEquals(5, student0.getComplementaryCredits());
      assertNull(student0.getAdmissionTerm());
      assertEquals(".t1}s9zP", student0.getStatusStr());
      assertNull(student0.getBirthDate());
      assertEquals(4138.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("b9T6sk% Q9yk&60u#", "b9T6sk% Q9yk&60u#", "", "b9T6sk% Q9yk&60u#", "_$R<P/oB?C;5[razaw", "b9T6sk% Q9yk&60u#", "_$R<P/oB?C;5[razaw", "b9T6sk% Q9yk&60u#", "", "_$R<P/oB?C;5[razaw", "", "m[Pl&=Q.i4u", studentStatus0, "m[Pl&=Q.i4u", "", "", ", placeOfBirth='", "com.google.common.cache.LocalCache", "m[Pl&=Q.i4u", "m[Pl&=Q.i4u", "_$R<P/oB?C;5[razaw", "com.google.common.cache.LocalCache", (Curriculum) null, 0, (-1112), (-4021), (-200), (-1112), (-200), 7, (-1112), 0, (-304.0), 31, 0, 6, 0, 935, 0);
      assertEquals("com.google.common.cache.LocalCache", student0.getAffirmativePolicy());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getBirthDate());
      assertEquals((-4021), student0.getOptionalHours());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getCourseCode());
      assertEquals("m[Pl&=Q.i4u", student0.getSecondarySchoolGraduationYear());
      assertEquals("com.google.common.cache.LocalCache", student0.getCurriculumCode());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getPlaceOfBirth());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1112), student0.getComplementaryHours());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("m[Pl&=Q.i4u", student0.getStatusStr());
      assertEquals(7, student0.getAttemptedCredits());
      assertEquals("m[Pl&=Q.i4u", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getName());
      assertEquals((-1512), student0.getCompletedCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", placeOfBirth='", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getCountry());
      assertEquals((-200), student0.getComplementaryCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1112.0), student0.getGpa(), 0.01);
      assertEquals("m[Pl&=Q.i4u", student0.getStatusTerm());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getNationality());
      assertEquals((-304.0), student0.getIea(), 0.01);
      assertEquals(935, student0.getEnrolledCredits());
      assertEquals((-1112), student0.getMandatoryCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getGender());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getEmail());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getMaritalStatus());
      assertEquals((-200), student0.getOptionalCredits());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getNationalId());
      assertEquals(31, student0.getCompletedTerms());
      assertEquals(6, student0.getInstitutionalEnrollments());
      assertNotNull(student0);
      
      String string0 = student0.getMaritalStatus();
      assertEquals("com.google.common.cache.LocalCache", student0.getAffirmativePolicy());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getBirthDate());
      assertEquals((-4021), student0.getOptionalHours());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getCourseCode());
      assertEquals("m[Pl&=Q.i4u", student0.getSecondarySchoolGraduationYear());
      assertEquals("com.google.common.cache.LocalCache", student0.getCurriculumCode());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getPlaceOfBirth());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1112), student0.getComplementaryHours());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("m[Pl&=Q.i4u", student0.getStatusStr());
      assertEquals(7, student0.getAttemptedCredits());
      assertEquals("m[Pl&=Q.i4u", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getName());
      assertEquals((-1512), student0.getCompletedCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", placeOfBirth='", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getCountry());
      assertEquals((-200), student0.getComplementaryCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1112.0), student0.getGpa(), 0.01);
      assertEquals("m[Pl&=Q.i4u", student0.getStatusTerm());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getNationality());
      assertEquals((-304.0), student0.getIea(), 0.01);
      assertEquals(935, student0.getEnrolledCredits());
      assertEquals((-1112), student0.getMandatoryCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getGender());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getEmail());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("_$R<P/oB?C;5[razaw", student0.getMaritalStatus());
      assertEquals((-200), student0.getOptionalCredits());
      assertEquals("b9T6sk% Q9yk&60u#", student0.getNationalId());
      assertEquals(31, student0.getCompletedTerms());
      assertEquals(6, student0.getInstitutionalEnrollments());
      assertEquals("_$R<P/oB?C;5[razaw", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("WVxO8.[7pXZjfDvODK", "WVxO8.[7pXZjfDvODK", "", "WVxO8.[7pXZjfDvODK", "", "PII|S<<.]2SBglX1,dA", "", "CANCELADO REPROVOU TODAS POR FALTAS", " dataLength: ", "CANCELADO REPROVOU TODAS POR FALTAS", "PII|S<<.]2SBglX1,dA", " dataLength: ", studentStatus0, "CANCELADO REPROVOU TODAS POR FALTAS", "WVxO8.[7pXZjfDvODK", "", "", "", "", "WVxO8.[7pXZjfDvODK", "Predicates.contains(", "YeU`EE\"|uZ)", (Curriculum) null, (-1146), (-1146), 2787, 2787, 2787, (-91), 2787, 0.0, 0.0, 0.0, 2787, 2787, 518, (-1146), 518, 0.0);
      assertEquals("Predicates.contains(", student0.getCourseCode());
      assertEquals(2787, student0.getOptionalHours());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(518, student0.getEnrolledCredits());
      assertEquals(" dataLength: ", student0.getCountry());
      assertEquals("PII|S<<.]2SBglX1,dA", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getBirthDate());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getNationality());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-1146), student0.getMobilityTerms());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(2787, student0.getOptionalCredits());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getSecondarySchoolGraduationYear());
      assertEquals("YeU`EE\"|uZ)", student0.getCurriculumCode());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getPlaceOfBirth());
      assertEquals(2787, student0.getComplementaryHours());
      assertEquals(518, student0.getInstitutionalEnrollments());
      assertEquals(2787, student0.getCompletedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1146), student0.getMandatoryHours());
      assertEquals(1550, student0.getCompletedCredits());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(2787, student0.getAttemptedCredits());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getAdmissionStr());
      assertEquals("PII|S<<.]2SBglX1,dA", student0.getGender());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getNationalId());
      assertEquals(" dataLength: ", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals((-1146), student0.getMandatoryCredits());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getStatusTerm());
      assertEquals((-91), student0.getComplementaryCredits());
      assertEquals(2787, student0.getSuspendedTerms());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getEmail());
      assertNotNull(student0);
      
      String string0 = student0.getMaritalStatus();
      assertEquals("Predicates.contains(", student0.getCourseCode());
      assertEquals(2787, student0.getOptionalHours());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(518, student0.getEnrolledCredits());
      assertEquals(" dataLength: ", student0.getCountry());
      assertEquals("PII|S<<.]2SBglX1,dA", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getBirthDate());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getNationality());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-1146), student0.getMobilityTerms());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(2787, student0.getOptionalCredits());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getSecondarySchoolGraduationYear());
      assertEquals("YeU`EE\"|uZ)", student0.getCurriculumCode());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getPlaceOfBirth());
      assertEquals(2787, student0.getComplementaryHours());
      assertEquals(518, student0.getInstitutionalEnrollments());
      assertEquals(2787, student0.getCompletedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1146), student0.getMandatoryHours());
      assertEquals(1550, student0.getCompletedCredits());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(2787, student0.getAttemptedCredits());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getAdmissionStr());
      assertEquals("PII|S<<.]2SBglX1,dA", student0.getGender());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("WVxO8.[7pXZjfDvODK", student0.getNationalId());
      assertEquals(" dataLength: ", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals((-1146), student0.getMandatoryCredits());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getStatusTerm());
      assertEquals((-91), student0.getComplementaryCredits());
      assertEquals(2787, student0.getSuspendedTerms());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", "L9", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 14, 14, (-862048943), (-2403), (-2403), 14, 1636, (-1532), (-862048943), (-1617), arrayList0, arrayList0, set0, arrayList0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-2403), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(14, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-8.62051318E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(14, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1617), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1636, curriculum0.getMaxNumberOfTerms());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-2403), curriculum0.getMinActivitiesNeeded());
      assertEquals("L9", curriculum0.getCurriculumCode());
      assertEquals((-1532), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-862048943), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(14, curriculum0.getMinNumberOfTerms());
      assertFalse(arrayList0.contains(""));
      assertFalse(set0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("L9", "", "com.google.common.base.CharMatcher$And", "60%E! I/%:M", "L9", "", "", "com.google.common.collect.AbstractMultimap", "com.google.common.base.CharMatcher$And", "", "[QBd'|5c{r4 ", "AWWV_yY=a", studentStatus0, "com.google.common.base.CharMatcher$And", "L9", "", "", "[QBd'|5c{r4 ", "com.google.common.base.CharMatcher$And", "com.google.common.collect.AbstractMultimap", "", "", curriculum0, 1263, 14, 0, 365, (-1532), (-1532), (-398), (-398), 1636, 545.1285949261, 14, 3, (-1532), 13, 1263, 1263);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-2403), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(14, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-8.62051318E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(14, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1617), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1636, curriculum0.getMaxNumberOfTerms());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-2403), curriculum0.getMinActivitiesNeeded());
      assertEquals("L9", curriculum0.getCurriculumCode());
      assertEquals((-1532), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-862048943), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(14, curriculum0.getMinNumberOfTerms());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getStatusTerm());
      assertEquals("AWWV_yY=a", student0.getStatusStr());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(1636.0, student0.getMc(), 0.01);
      assertEquals(13, student0.getMobilityTerms());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(14, student0.getCompletedTerms());
      assertEquals("[QBd'|5c{r4 ", student0.getAffirmativePolicy());
      assertEquals("[QBd'|5c{r4 ", student0.getRace());
      assertEquals("L9", student0.getEmail());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getSecondarySchoolGraduationYear());
      assertEquals((-1153), student0.getCompletedCredits());
      assertEquals("", student0.getNationalId());
      assertEquals((-398), student0.getAttemptedCredits());
      assertEquals("L9", student0.getAdmissionStr());
      assertEquals("60%E! I/%:M", student0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getSecondarySchool());
      assertEquals(1263, student0.getMandatoryHours());
      assertEquals((-1532), student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getName());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-1532), student0.getInstitutionalEnrollments());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(365, student0.getOptionalCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getNationality());
      assertEquals(1263, student0.getEnrolledCredits());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(545.1285949261, student0.getIea(), 0.01);
      assertEquals((-398.0), student0.getGpa(), 0.01);
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals((-1532), student0.getComplementaryHours());
      assertEquals(1263.0, student0.getAdmissionGrade(), 0.01);
      assertFalse(arrayList0.contains(""));
      assertFalse(set0.contains(""));
      assertNotNull(student0);
      
      int int0 = student0.getMandatoryHours();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-2403), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(14, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-8.62051318E8), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(14, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1617), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1636, curriculum0.getMaxNumberOfTerms());
      assertEquals((-862048943), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-2403), curriculum0.getMinActivitiesNeeded());
      assertEquals("L9", curriculum0.getCurriculumCode());
      assertEquals((-1532), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-862048943), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(14, curriculum0.getMinNumberOfTerms());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getStatusTerm());
      assertEquals("AWWV_yY=a", student0.getStatusStr());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(1636.0, student0.getMc(), 0.01);
      assertEquals(13, student0.getMobilityTerms());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(14, student0.getCompletedTerms());
      assertEquals("[QBd'|5c{r4 ", student0.getAffirmativePolicy());
      assertEquals("[QBd'|5c{r4 ", student0.getRace());
      assertEquals("L9", student0.getEmail());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getSecondarySchoolGraduationYear());
      assertEquals((-1153), student0.getCompletedCredits());
      assertEquals("", student0.getNationalId());
      assertEquals((-398), student0.getAttemptedCredits());
      assertEquals("L9", student0.getAdmissionStr());
      assertEquals("60%E! I/%:M", student0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getSecondarySchool());
      assertEquals(1263, student0.getMandatoryHours());
      assertEquals((-1532), student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getName());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-1532), student0.getInstitutionalEnrollments());
      assertEquals("com.google.common.base.CharMatcher$And", student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(365, student0.getOptionalCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getNationality());
      assertEquals(1263, student0.getEnrolledCredits());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(545.1285949261, student0.getIea(), 0.01);
      assertEquals((-398.0), student0.getGpa(), 0.01);
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals((-1532), student0.getComplementaryHours());
      assertEquals(1263.0, student0.getAdmissionGrade(), 0.01);
      assertFalse(arrayList0.contains(""));
      assertFalse(set0.contains(""));
      assertEquals(1263, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "n1e,oP=|lyi\u0000Eok|<", "com.google.common.collect.ForwardingObject", ", placeOfBirth='", ", placeOfBirth='", "", "", "n1e,oP=|lyi\u0000Eok|<", ", placeOfBirth='", "", studentStatus0, ", nationality='", "n1e,oP=|lyi\u0000Eok|<", ", nationality='", "com.google.common.collect.ForwardingObject", "+!c]^l<^<p7vhW~", "`y(HBvPe\"\"2p|l", "M-QuHmS", "", "", (Curriculum) null, (-862048943), (-862048943), (-862048943), (-862048943), (-862048943), (-862048943), 4065, 0.5, (-862048943), (-862048943), 533, (-3904), (-3904), (-306), 533, 0.0);
      assertEquals("n1e,oP=|lyi\u0000Eok|<", student0.getAdmissionStr());
      assertEquals("+!c]^l<^<p7vhW~", student0.getAffirmativePolicy());
      assertEquals((-862048943), student0.getOptionalHours());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals(", placeOfBirth='", student0.getMaritalStatus());
      assertEquals((-306), student0.getMobilityTerms());
      assertEquals((-3904), student0.getInstitutionalEnrollments());
      assertEquals("", student0.getCountry());
      assertEquals(0.5, student0.getGpa(), 0.01);
      assertEquals(", nationality='", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("n1e,oP=|lyi\u0000Eok|<", student0.getBirthDate());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getStatusStr());
      assertEquals((-862048943), student0.getOptionalCredits());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals("", student0.getNationalId());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals(533, student0.getCompletedTerms());
      assertEquals(", nationality='", student0.getStatusTerm());
      assertEquals("com.google.common.collect.ForwardingObject", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals((-862048943), student0.getMandatoryHours());
      assertEquals(533, student0.getEnrolledCredits());
      assertEquals("M-QuHmS", student0.getSecondarySchoolGraduationYear());
      assertEquals(", placeOfBirth='", student0.getGender());
      assertEquals("n1e,oP=|lyi\u0000Eok|<", student0.getPlaceOfBirth());
      assertEquals("`y(HBvPe\"\"2p|l", student0.getSecondarySchool());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("com.google.common.collect.ForwardingObject", student0.getDisabilities());
      assertEquals(4065, student0.getAttemptedCredits());
      assertEquals((-8.62048943E8), student0.getMc(), 0.01);
      assertEquals((-3904), student0.getSuspendedTerms());
      assertEquals(1708820467, student0.getCompletedCredits());
      assertEquals((-862048943), student0.getComplementaryCredits());
      assertNotNull(student0);
      
      int int0 = student0.getMandatoryHours();
      assertEquals("n1e,oP=|lyi\u0000Eok|<", student0.getAdmissionStr());
      assertEquals("+!c]^l<^<p7vhW~", student0.getAffirmativePolicy());
      assertEquals((-862048943), student0.getOptionalHours());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals(", placeOfBirth='", student0.getMaritalStatus());
      assertEquals((-306), student0.getMobilityTerms());
      assertEquals((-3904), student0.getInstitutionalEnrollments());
      assertEquals("", student0.getCountry());
      assertEquals(0.5, student0.getGpa(), 0.01);
      assertEquals(", nationality='", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("n1e,oP=|lyi\u0000Eok|<", student0.getBirthDate());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getStatusStr());
      assertEquals((-862048943), student0.getOptionalCredits());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals("", student0.getNationalId());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals(533, student0.getCompletedTerms());
      assertEquals(", nationality='", student0.getStatusTerm());
      assertEquals("com.google.common.collect.ForwardingObject", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals((-862048943), student0.getMandatoryHours());
      assertEquals(533, student0.getEnrolledCredits());
      assertEquals("M-QuHmS", student0.getSecondarySchoolGraduationYear());
      assertEquals(", placeOfBirth='", student0.getGender());
      assertEquals("n1e,oP=|lyi\u0000Eok|<", student0.getPlaceOfBirth());
      assertEquals("`y(HBvPe\"\"2p|l", student0.getSecondarySchool());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("com.google.common.collect.ForwardingObject", student0.getDisabilities());
      assertEquals(4065, student0.getAttemptedCredits());
      assertEquals((-8.62048943E8), student0.getMc(), 0.01);
      assertEquals((-3904), student0.getSuspendedTerms());
      assertEquals(1708820467, student0.getCompletedCredits());
      assertEquals((-862048943), student0.getComplementaryCredits());
      assertEquals((-862048943), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ";W", ";W", ", disabilities='", "", "", "B[%", "", studentStatus0, "B[%", "B[%", "", "0LzRj5H", ", disabilities='", "cxo^vN!;<%3", "Student{registration='", "", "", (Curriculum) null, 0, 0, 0, 0, (-6), 0, 0, 204.169800553793, 0, 474.793453, 0, 264, 2, 677, 784, 2);
      assertEquals("B[%", student0.getRace());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(204.169800553793, student0.getGpa(), 0.01);
      assertEquals((-6), student0.getComplementaryHours());
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(";W", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getCountry());
      assertEquals(";W", student0.getGender());
      assertEquals("Student{registration='", student0.getSecondarySchoolGraduationYear());
      assertEquals(", status=", student0.getEmail());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertNotNull(student0);
      
      int int0 = student0.getMandatoryCredits();
      assertEquals("B[%", student0.getRace());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(204.169800553793, student0.getGpa(), 0.01);
      assertEquals((-6), student0.getComplementaryHours());
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(";W", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getCountry());
      assertEquals(";W", student0.getGender());
      assertEquals("Student{registration='", student0.getSecondarySchoolGraduationYear());
      assertEquals(", status=", student0.getEmail());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("org.apache.commons.io.filefilter.DelegateFileFilter", "org.apache.commons.io.filefilter.DelegateFileFilter", "org.apache.commons.io.filefilter.DelegateFileFilter", "", "", "", "", "", "", "", "", "org.apache.commons.io.filefilter.DelegateFileFilter", studentStatus0, "", "", "I.~QF/#hcrh", "", "&&x^~Cu+%Z/jeS", "com.google.common.base.CharMatcher$SingleWidth", "", (String) null, ", mc=", (Curriculum) null, 39, 39, 39, 39, 0, 0, 3356, 39, 0.0, 3356, 5, 7, 3356, 0, 0, 0.03);
      assertEquals(3356, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getEmail());
      assertEquals("&&x^~Cu+%Z/jeS", student0.getAffirmativePolicy());
      assertEquals("", student0.getBirthDate());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getStatusStr());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getNationalId());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(3356.0, student0.getIea(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getNationality());
      assertEquals(39, student0.getOptionalCredits());
      assertEquals(39, student0.getMandatoryCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(7, student0.getSuspendedTerms());
      assertEquals("I.~QF/#hcrh", student0.getAdmissionTerm());
      assertEquals(39.0, student0.getGpa(), 0.01);
      assertEquals(3356, student0.getAttemptedCredits());
      assertEquals(", mc=", student0.getCurriculumCode());
      assertEquals(5, student0.getCompletedTerms());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getSecondarySchool());
      assertNull(student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(39, student0.getOptionalHours());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getName());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals(0.03, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(39, student0.getMandatoryHours());
      assertEquals("", student0.getRace());
      assertNotNull(student0);
      
      int int0 = student0.getMandatoryCredits();
      assertEquals(3356, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getEmail());
      assertEquals("&&x^~Cu+%Z/jeS", student0.getAffirmativePolicy());
      assertEquals("", student0.getBirthDate());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getStatusStr());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getNationalId());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(3356.0, student0.getIea(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getNationality());
      assertEquals(39, student0.getOptionalCredits());
      assertEquals(39, student0.getMandatoryCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(7, student0.getSuspendedTerms());
      assertEquals("I.~QF/#hcrh", student0.getAdmissionTerm());
      assertEquals(39.0, student0.getGpa(), 0.01);
      assertEquals(3356, student0.getAttemptedCredits());
      assertEquals(", mc=", student0.getCurriculumCode());
      assertEquals(5, student0.getCompletedTerms());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getSecondarySchool());
      assertNull(student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(39, student0.getOptionalHours());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getName());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals(0.03, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(39, student0.getMandatoryHours());
      assertEquals("", student0.getRace());
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("", "UEx$.n[[lQW-", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 8202, 8202, 8202, 8202, 0, 0, 0, 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(8202, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("UEx$.n[[lQW-", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(8202, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(32808.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(8202, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains(0));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("b=P~1=lf^", "com.google.common.base.CharMatcher$JavaIsoControl", "UEx$.n[[lQW-", "", "_)XCrfKgj", "kU<Oq>?Alci^W (", "", "CharMatcher.invisible()", "r@8tN\"G UIX", "}E& F", "}E& F", "", studentStatus0, "com.google.common.base.CharMatcher$JavaIsoControl", "com.google.common.base.CharMatcher$JavaIsoControl", "", "XQ'xMwai[)N'Q5", "&A3$S", "}E& F", ", curriculum='", "com.google.common.base.CharMatcher$JavaIsoControl", "0U;RRc=q", curriculum0, 8202, 0, (-1825), 4, (-339), 0, 133, 4.0, (-1825), 4, 593, 0, 0, 8202, 2204, 0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(8202, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("UEx$.n[[lQW-", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(8202, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(32808.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(8202, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("0U;RRc=q", student0.getCurriculumCode());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals(4, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(133, student0.getAttemptedCredits());
      assertEquals((-339), student0.getComplementaryHours());
      assertEquals(8202, student0.getMobilityTerms());
      assertEquals(2204, student0.getEnrolledCredits());
      assertEquals((-1825.0), student0.getMc(), 0.01);
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("&A3$S", student0.getAffirmativePolicy());
      assertEquals("}E& F", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getAdmissionStr());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getNationalId());
      assertEquals(8202, student0.getMandatoryHours());
      assertEquals("kU<Oq>?Alci^W (", student0.getGender());
      assertEquals("XQ'xMwai[)N'Q5", student0.getDisabilities());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getCourseCode());
      assertEquals("}E& F", student0.getRace());
      assertEquals("}E& F", student0.getPlaceOfBirth());
      assertEquals(", curriculum='", student0.getSecondarySchoolGraduationYear());
      assertEquals((-1825), student0.getOptionalHours());
      assertEquals("", student0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getStatusTerm());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("UEx$.n[[lQW-", student0.getName());
      assertEquals("CharMatcher.invisible()", student0.getNationality());
      assertEquals("", student0.getStatusStr());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("_)XCrfKgj", student0.getEmail());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(593, student0.getCompletedTerms());
      assertEquals(4.0, student0.getIea(), 0.01);
      assertFalse(arrayList0.contains(0));
      assertNotNull(student0);
      
      int int0 = student0.getInstitutionalEnrollments();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(8202, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("UEx$.n[[lQW-", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(8202, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(8202, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(32808.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(8202, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("0U;RRc=q", student0.getCurriculumCode());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals(4, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(133, student0.getAttemptedCredits());
      assertEquals((-339), student0.getComplementaryHours());
      assertEquals(8202, student0.getMobilityTerms());
      assertEquals(2204, student0.getEnrolledCredits());
      assertEquals((-1825.0), student0.getMc(), 0.01);
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("&A3$S", student0.getAffirmativePolicy());
      assertEquals("}E& F", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getAdmissionStr());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getNationalId());
      assertEquals(8202, student0.getMandatoryHours());
      assertEquals("kU<Oq>?Alci^W (", student0.getGender());
      assertEquals("XQ'xMwai[)N'Q5", student0.getDisabilities());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getCourseCode());
      assertEquals("}E& F", student0.getRace());
      assertEquals("}E& F", student0.getPlaceOfBirth());
      assertEquals(", curriculum='", student0.getSecondarySchoolGraduationYear());
      assertEquals((-1825), student0.getOptionalHours());
      assertEquals("", student0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$JavaIsoControl", student0.getStatusTerm());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("UEx$.n[[lQW-", student0.getName());
      assertEquals("CharMatcher.invisible()", student0.getNationality());
      assertEquals("", student0.getStatusStr());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("_)XCrfKgj", student0.getEmail());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(593, student0.getCompletedTerms());
      assertEquals(4.0, student0.getIea(), 0.01);
      assertFalse(arrayList0.contains(0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("g[)yFq_[:dQ'U^xM", "g[)yFq_[:dQ'U^xM", "g[)yFq_[:dQ'U^xM", "g[)yFq_[:dQ'U^xM", "g[)yFq_[:dQ'U^xM", "g[)yFq_[:dQ'U^xM", "g[)yFq_[:dQ'U^xM", "g[)yFq_[:dQ'U^xM", "<&GF W", "com.google.common.base.CharMatcher$AnyOf", "com.google.common.base.CharMatcher$AnyOf", "<&GF W", studentStatus0, (String) null, ", admissionStr='", "com.google.common.base.Predicates", "M%9n", "com.google.common.base.CharMatcher$AnyOf", ", admissionStr='", "R_K", "M%9n", ", optionalCredits=", (Curriculum) null, 108, 826, (-652), 0, 3529, 0, (-652), 3243.23135389918, 0, 3243.23135389918, 0, 0, 826, (-652), 826, 3243.23135389918);
      assertEquals("<&GF W", student0.getCountry());
      assertNull(student0.getStatusTerm());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getBirthDate());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getNationalId());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", student0.getAffirmativePolicy());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getEmail());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(826, student0.getInstitutionalEnrollments());
      assertEquals("com.google.common.base.Predicates", student0.getAdmissionTerm());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getName());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(3243.23135389918, student0.getAdmissionGrade(), 0.01);
      assertEquals(108, student0.getMandatoryHours());
      assertEquals(826, student0.getCompletedCredits());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getGender());
      assertEquals("M%9n", student0.getCourseCode());
      assertEquals((-652), student0.getMobilityTerms());
      assertEquals(826, student0.getEnrolledCredits());
      assertEquals((-652), student0.getOptionalHours());
      assertEquals(3243.23135389918, student0.getGpa(), 0.01);
      assertEquals(3243.23135389918, student0.getIea(), 0.01);
      assertEquals("R_K", student0.getSecondarySchoolGraduationYear());
      assertEquals(3529, student0.getComplementaryHours());
      assertEquals("M%9n", student0.getDisabilities());
      assertEquals(", optionalCredits=", student0.getCurriculumCode());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getNationality());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", student0.getRace());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", admissionStr='", student0.getAdmissionStr());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", student0.getPlaceOfBirth());
      assertEquals((-652), student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getMaritalStatus());
      assertEquals("<&GF W", student0.getStatusStr());
      assertEquals(826, student0.getMandatoryCredits());
      assertEquals(", admissionStr='", student0.getSecondarySchool());
      assertNotNull(student0);
      
      int int0 = student0.getInstitutionalEnrollments();
      assertEquals("<&GF W", student0.getCountry());
      assertNull(student0.getStatusTerm());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getBirthDate());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getNationalId());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", student0.getAffirmativePolicy());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getEmail());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(826, student0.getInstitutionalEnrollments());
      assertEquals("com.google.common.base.Predicates", student0.getAdmissionTerm());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getName());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(3243.23135389918, student0.getAdmissionGrade(), 0.01);
      assertEquals(108, student0.getMandatoryHours());
      assertEquals(826, student0.getCompletedCredits());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getGender());
      assertEquals("M%9n", student0.getCourseCode());
      assertEquals((-652), student0.getMobilityTerms());
      assertEquals(826, student0.getEnrolledCredits());
      assertEquals((-652), student0.getOptionalHours());
      assertEquals(3243.23135389918, student0.getGpa(), 0.01);
      assertEquals(3243.23135389918, student0.getIea(), 0.01);
      assertEquals("R_K", student0.getSecondarySchoolGraduationYear());
      assertEquals(3529, student0.getComplementaryHours());
      assertEquals("M%9n", student0.getDisabilities());
      assertEquals(", optionalCredits=", student0.getCurriculumCode());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getNationality());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", student0.getRace());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", admissionStr='", student0.getAdmissionStr());
      assertEquals("com.google.common.base.CharMatcher$AnyOf", student0.getPlaceOfBirth());
      assertEquals((-652), student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("g[)yFq_[:dQ'U^xM", student0.getMaritalStatus());
      assertEquals("<&GF W", student0.getStatusStr());
      assertEquals(826, student0.getMandatoryCredits());
      assertEquals(", admissionStr='", student0.getSecondarySchool());
      assertEquals(826, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum((String) null, "com.google.common.collect.BoundType", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, Integer.MAX_VALUE, 0, 1, 0, 0, (-1929), Integer.MAX_VALUE, 20, (-1929), 1, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1929), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("com.google.common.collect.BoundType", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1929), curriculum0.getMinNumberOfTerms());
      assertEquals((-2.147483648E9), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertFalse(linkedHashSet0.contains("com.google.common.collect.BoundType"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "com.google.common.collect.BoundType", "CANCELADO NOVO INGRESSO OUTRO CURSO", (String) null, "com.google.common.collect.BoundType", "com.google.common.collect.BoundType", "com.google.common.collect.BoundType", "`vv_R 5mYV3W,g~", "com.google.common.collect.BoundType", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", studentStatus0, "", "\u0007'3W/&", "`vv_R 5mYV3W,g~", "`vv_R 5mYV3W,g~", ")u]]c`gTvNV%x&", "", "", "", (String) null, curriculum0, 2031, 3, 7497, 3, 0, 63, 0, (-1.0), 0.0, 0, 0, 13, Integer.MAX_VALUE, 0, 0, 13);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1929), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("com.google.common.collect.BoundType", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1929), curriculum0.getMinNumberOfTerms());
      assertEquals((-2.147483648E9), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals(69, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals("\u0007'3W/&", student0.getAdmissionStr());
      assertNull(student0.getEmail());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getCurriculumCode());
      assertEquals(2031, student0.getMandatoryHours());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("com.google.common.collect.BoundType", student0.getGender());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals("`vv_R 5mYV3W,g~", student0.getDisabilities());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("com.google.common.collect.BoundType", student0.getNationality());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(2, student0.getStatusIndex());
      assertEquals("`vv_R 5mYV3W,g~", student0.getAdmissionTerm());
      assertEquals("", student0.getStatusTerm());
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals("com.google.common.collect.BoundType", student0.getMaritalStatus());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(63, student0.getComplementaryCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals("", student0.getRace());
      assertEquals("com.google.common.collect.BoundType", student0.getName());
      assertEquals("`vv_R 5mYV3W,g~", student0.getCountry());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("com.google.common.collect.BoundType", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(")u]]c`gTvNV%x&", student0.getAffirmativePolicy());
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertFalse(linkedHashSet0.contains("`vv_R 5mYV3W,g~"));
      assertNotNull(student0);
      
      double double0 = student0.getIea();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1929), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("com.google.common.collect.BoundType", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1929), curriculum0.getMinNumberOfTerms());
      assertEquals((-2.147483648E9), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals(69, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals("\u0007'3W/&", student0.getAdmissionStr());
      assertNull(student0.getEmail());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getCurriculumCode());
      assertEquals(2031, student0.getMandatoryHours());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("com.google.common.collect.BoundType", student0.getGender());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals("`vv_R 5mYV3W,g~", student0.getDisabilities());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("com.google.common.collect.BoundType", student0.getNationality());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(2, student0.getStatusIndex());
      assertEquals("`vv_R 5mYV3W,g~", student0.getAdmissionTerm());
      assertEquals("", student0.getStatusTerm());
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals("com.google.common.collect.BoundType", student0.getMaritalStatus());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(63, student0.getComplementaryCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals("", student0.getRace());
      assertEquals("com.google.common.collect.BoundType", student0.getName());
      assertEquals("`vv_R 5mYV3W,g~", student0.getCountry());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("com.google.common.collect.BoundType", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(")u]]c`gTvNV%x&", student0.getAffirmativePolicy());
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertFalse(linkedHashSet0.contains("`vv_R 5mYV3W,g~"));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("|}t9", "|}t9", "", "CANCELAMENTO POR ABANDONO", "w}tLK>&", "|}t9", "", "w}tLK>&", "Q@?42NhXxZFz", "", "Q@?42NhXxZFz", "w}tLK>&", studentStatus0, "l[m]KqQB#k>?$$w;,", "", "", "Q@?42NhXxZFz", "|}t9", "", "TKbK", "z+~{[#6k3TPJ7i]", "Q@?42NhXxZFz", (Curriculum) null, (-231), 0, 0, 0, 0, 0, 1883, 0, (-1.0), (-231), 125, (-1514), 1315, 2, 2, 0);
      assertEquals("Q@?42NhXxZFz", student0.getCurriculumCode());
      assertEquals("", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-231.0), student0.getIea(), 0.01);
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getBirthDate());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(1883, student0.getAttemptedCredits());
      assertEquals("|}t9", student0.getGender());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-1514), student0.getSuspendedTerms());
      assertEquals("w}tLK>&", student0.getNationality());
      assertEquals(1315, student0.getInstitutionalEnrollments());
      assertEquals("w}tLK>&", student0.getStatusStr());
      assertEquals("Q@?42NhXxZFz", student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("z+~{[#6k3TPJ7i]", student0.getCourseCode());
      assertEquals("TKbK", student0.getSecondarySchoolGraduationYear());
      assertEquals((-231), student0.getMandatoryHours());
      assertEquals("l[m]KqQB#k>?$$w;,", student0.getStatusTerm());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(125, student0.getCompletedTerms());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(2, student0.getEnrolledCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("|}t9", student0.getNationalId());
      assertEquals("Q@?42NhXxZFz", student0.getCountry());
      assertEquals("|}t9", student0.getAffirmativePolicy());
      assertEquals("Q@?42NhXxZFz", student0.getRace());
      assertEquals("w}tLK>&", student0.getEmail());
      assertEquals(2, student0.getMobilityTerms());
      assertEquals("", student0.getPlaceOfBirth());
      assertNotNull(student0);
      
      double double0 = student0.getIea();
      assertEquals("Q@?42NhXxZFz", student0.getCurriculumCode());
      assertEquals("", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-231.0), student0.getIea(), 0.01);
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getBirthDate());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(1883, student0.getAttemptedCredits());
      assertEquals("|}t9", student0.getGender());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-1514), student0.getSuspendedTerms());
      assertEquals("w}tLK>&", student0.getNationality());
      assertEquals(1315, student0.getInstitutionalEnrollments());
      assertEquals("w}tLK>&", student0.getStatusStr());
      assertEquals("Q@?42NhXxZFz", student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("z+~{[#6k3TPJ7i]", student0.getCourseCode());
      assertEquals("TKbK", student0.getSecondarySchoolGraduationYear());
      assertEquals((-231), student0.getMandatoryHours());
      assertEquals("l[m]KqQB#k>?$$w;,", student0.getStatusTerm());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(125, student0.getCompletedTerms());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(2, student0.getEnrolledCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("|}t9", student0.getNationalId());
      assertEquals("Q@?42NhXxZFz", student0.getCountry());
      assertEquals("|}t9", student0.getAffirmativePolicy());
      assertEquals("Q@?42NhXxZFz", student0.getRace());
      assertEquals("w}tLK>&", student0.getEmail());
      assertEquals(2, student0.getMobilityTerms());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-231.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("Ints.stringConverter()", "c5q-A]VuJ;koP3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 493, 0, 493, 0, 0, 5901, 577, 5901, (-263), treeSet0, treeSet0, priorityQueue0, treeSet0, priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(treeSet0.contains("Ints.stringConverter()"));
      assertFalse(priorityQueue0.contains("Ints.stringConverter()"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "", "=Mho18%K^ZsL!", "(Blf6+pNT)9EP)cCC", "\"", "9aUyR0C2Wf6S,#;4", "g-ju2N3g", "(Blf6+pNT)9EP)cCC", "*a", "", "1{Kr1h?=6=zE'gSH3_", studentStatus0, ", name='", "c5q-A]VuJ;koP3", "", "", "?NqD-", "=Mho18%K^ZsL!", (String) null, "?NqD-", "./ew~aB<fIwIEItTX.", curriculum0, (-2363), Integer.MIN_VALUE, 0, 0, 493, 493, 0, 577, Integer.MIN_VALUE, (-3537.7237676461), Integer.MIN_VALUE, Integer.MIN_VALUE, 493, (-921), (-2363), (-2363));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("*a", student0.getPlaceOfBirth());
      assertEquals("", student0.getName());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("./ew~aB<fIwIEItTX.", student0.getCurriculumCode());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals(Integer.MIN_VALUE, student0.getCompletedTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals(Integer.MIN_VALUE, student0.getSuspendedTerms());
      assertEquals((-3537.7237676461), student0.getIea(), 0.01);
      assertEquals("1{Kr1h?=6=zE'gSH3_", student0.getStatusStr());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2147483155), student0.getCompletedCredits());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals("", student0.getRace());
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals(493, student0.getComplementaryHours());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(493, student0.getComplementaryCredits());
      assertEquals("?NqD-", student0.getCourseCode());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals("?NqD-", student0.getAffirmativePolicy());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals(", name='", student0.getStatusTerm());
      assertEquals("g-ju2N3g", student0.getNationality());
      assertEquals(Integer.MIN_VALUE, student0.getMandatoryCredits());
      assertEquals(493, student0.getInstitutionalEnrollments());
      assertEquals((-2363.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2363), student0.getEnrolledCredits());
      assertEquals("\"", student0.getGender());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-2363), student0.getMandatoryHours());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals(577.0, student0.getGpa(), 0.01);
      assertEquals((-2.147483648E9), student0.getMc(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertFalse(treeSet0.contains("br.edu.ufcg.computacao.eureca.backend.core.models.Registration"));
      assertFalse(priorityQueue0.contains("br.edu.ufcg.computacao.eureca.backend.core.models.Registration"));
      assertNotNull(student0);
      
      double double0 = student0.getGpa();
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(493, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(5901, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(493, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(577, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Ints.stringConverter()", curriculum0.getCourseCode());
      assertEquals(986.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(5901, curriculum0.getMaxNumberOfTerms());
      assertEquals((-263), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("*a", student0.getPlaceOfBirth());
      assertEquals("", student0.getName());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("./ew~aB<fIwIEItTX.", student0.getCurriculumCode());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals(Integer.MIN_VALUE, student0.getCompletedTerms());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals(Integer.MIN_VALUE, student0.getSuspendedTerms());
      assertEquals((-3537.7237676461), student0.getIea(), 0.01);
      assertEquals("1{Kr1h?=6=zE'gSH3_", student0.getStatusStr());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2147483155), student0.getCompletedCredits());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals("", student0.getRace());
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals(493, student0.getComplementaryHours());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(493, student0.getComplementaryCredits());
      assertEquals("?NqD-", student0.getCourseCode());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals("?NqD-", student0.getAffirmativePolicy());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals(", name='", student0.getStatusTerm());
      assertEquals("g-ju2N3g", student0.getNationality());
      assertEquals(Integer.MIN_VALUE, student0.getMandatoryCredits());
      assertEquals(493, student0.getInstitutionalEnrollments());
      assertEquals((-2363.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2363), student0.getEnrolledCredits());
      assertEquals("\"", student0.getGender());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-2363), student0.getMandatoryHours());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals(577.0, student0.getGpa(), 0.01);
      assertEquals((-2.147483648E9), student0.getMc(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertFalse(treeSet0.contains("br.edu.ufcg.computacao.eureca.backend.core.models.Registration"));
      assertFalse(priorityQueue0.contains("br.edu.ufcg.computacao.eureca.backend.core.models.Registration"));
      assertEquals(577.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-1), (-1), (-1), 289, 289, 289, (-490), 289, 0, 0, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(289, curriculum0.getMinNumberOfTerms());
      assertEquals(286.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(289, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(289, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals(289, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains((-1)));
      assertFalse(treeSet0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "", "ET5T|CR;?mOC%NO", "", "", "k_", "", "CANCELADO REPROVOU TODAS POR FALTAS", "*Es9l,P?2J7~SV!,`", "m!;Ot9L!nHqx7=9l_L", "s[|tTcZ)>:Aj=R", studentStatus0, "", "", "CANCELADO REPROVOU TODAS POR FALTAS", ", mobilityTerms=", "m!;Ot9L!nHqx7=9l_L", "", "o|=", "System", "~li).1]E@OH", curriculum0, 0, 0, 0, 1162, 0, (-1408), 0, (-490), 0.0, 0.0, (-1057), 39, 39, 2, 0, 0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(289, curriculum0.getMinNumberOfTerms());
      assertEquals(286.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(289, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(289, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals(289, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("m!;Ot9L!nHqx7=9l_L", student0.getAffirmativePolicy());
      assertEquals((-1057), student0.getCompletedTerms());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(39, student0.getSuspendedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-490.0), student0.getGpa(), 0.01);
      assertEquals("~li).1]E@OH", student0.getCurriculumCode());
      assertEquals(", mobilityTerms=", student0.getDisabilities());
      assertEquals("System", student0.getCourseCode());
      assertEquals("", student0.getName());
      assertEquals("m!;Ot9L!nHqx7=9l_L", student0.getRace());
      assertEquals("", student0.getEmail());
      assertEquals((-1408), student0.getComplementaryCredits());
      assertEquals("s[|tTcZ)>:Aj=R", student0.getStatusStr());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("ET5T|CR;?mOC%NO", student0.getBirthDate());
      assertEquals(2, student0.getMobilityTerms());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getAdmissionTerm());
      assertEquals("o|=", student0.getSecondarySchoolGraduationYear());
      assertEquals(1162, student0.getOptionalCredits());
      assertEquals((-246), student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("*Es9l,P?2J7~SV!,`", student0.getPlaceOfBirth());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getCountry());
      assertEquals(39, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getNationality());
      assertEquals("k_", student0.getMaritalStatus());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertFalse(arrayList0.contains(289));
      assertFalse(treeSet0.contains(""));
      assertNotNull(student0);
      
      double double0 = student0.getGpa();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(289, curriculum0.getMinNumberOfTerms());
      assertEquals(286.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(289, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(289, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-490), curriculum0.getMaxNumberOfTerms());
      assertEquals(289, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("m!;Ot9L!nHqx7=9l_L", student0.getAffirmativePolicy());
      assertEquals((-1057), student0.getCompletedTerms());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(39, student0.getSuspendedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-490.0), student0.getGpa(), 0.01);
      assertEquals("~li).1]E@OH", student0.getCurriculumCode());
      assertEquals(", mobilityTerms=", student0.getDisabilities());
      assertEquals("System", student0.getCourseCode());
      assertEquals("", student0.getName());
      assertEquals("m!;Ot9L!nHqx7=9l_L", student0.getRace());
      assertEquals("", student0.getEmail());
      assertEquals((-1408), student0.getComplementaryCredits());
      assertEquals("s[|tTcZ)>:Aj=R", student0.getStatusStr());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("ET5T|CR;?mOC%NO", student0.getBirthDate());
      assertEquals(2, student0.getMobilityTerms());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getAdmissionTerm());
      assertEquals("o|=", student0.getSecondarySchoolGraduationYear());
      assertEquals(1162, student0.getOptionalCredits());
      assertEquals((-246), student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("*Es9l,P?2J7~SV!,`", student0.getPlaceOfBirth());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getCountry());
      assertEquals(39, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getNationality());
      assertEquals("k_", student0.getMaritalStatus());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertFalse(arrayList0.contains(289));
      assertFalse(treeSet0.contains(""));
      assertEquals((-490.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("", "<^50:lT?", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 4, 4, 4, 92, 0, 0, 4, 0, 92, (-2048), priorityQueue0, priorityQueue0, priorityQueue0, priorityQueue0, priorityQueue0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals((-2048), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(92, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(4, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(104.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("<^50:lT?", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertFalse(treeSet0.contains(4));
      assertFalse(arrayList0.contains(4));
      assertFalse(priorityQueue0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student((String) null, "C", "C", "C", "B<rc@", (String) null, (String) null, "e\" n]", "H!n", "B<rc@", "C", (String) null, studentStatus0, "H!n", (String) null, "C", (String) null, "J: +N\"cp-cWs9}", (String) null, (String) null, "NOT_NULL", "e\" n]", curriculum0, 4, 0, 0, 0, 4, 1172, 6, 0, 0.0, 4, 4, 1172, 92, 0, 3130, 0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals((-2048), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(92, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(4, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(104.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("<^50:lT?", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("C", student0.getNationalId());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("C", student0.getBirthDate());
      assertNull(student0.getSecondarySchool());
      assertEquals("NOT_NULL", student0.getCourseCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("e\" n]", student0.getCurriculumCode());
      assertEquals("B<rc@", student0.getPlaceOfBirth());
      assertEquals(4, student0.getComplementaryHours());
      assertNull(student0.getMaritalStatus());
      assertNull(student0.getDisabilities());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertNull(student0.getStatusStr());
      assertEquals(1172, student0.getComplementaryCredits());
      assertEquals(3130, student0.getEnrolledCredits());
      assertEquals("C", student0.getName());
      assertEquals(1172, student0.getSuspendedTerms());
      assertEquals("C", student0.getRace());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("C", student0.getAdmissionTerm());
      assertEquals(4, student0.getCompletedTerms());
      assertEquals(92, student0.getInstitutionalEnrollments());
      assertEquals("e\" n]", student0.getNationality());
      assertEquals(6, student0.getAttemptedCredits());
      assertEquals(4.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("H!n", student0.getCountry());
      assertEquals(1172, student0.getCompletedCredits());
      assertEquals(4, student0.getMandatoryHours());
      assertNull(student0.getGender());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("J: +N\"cp-cWs9}", student0.getAffirmativePolicy());
      assertEquals("B<rc@", student0.getEmail());
      assertNull(student0.getAdmissionStr());
      assertEquals("H!n", student0.getStatusTerm());
      assertFalse(treeSet0.contains(4));
      assertFalse(arrayList0.contains(4));
      assertFalse(priorityQueue0.contains("B<rc@"));
      assertNotNull(student0);
      
      String string0 = student0.getGender();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals((-2048), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(92, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(4, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(104.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("<^50:lT?", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("C", student0.getNationalId());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("C", student0.getBirthDate());
      assertNull(student0.getSecondarySchool());
      assertEquals("NOT_NULL", student0.getCourseCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("e\" n]", student0.getCurriculumCode());
      assertEquals("B<rc@", student0.getPlaceOfBirth());
      assertEquals(4, student0.getComplementaryHours());
      assertNull(student0.getMaritalStatus());
      assertNull(student0.getDisabilities());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertNull(student0.getStatusStr());
      assertEquals(1172, student0.getComplementaryCredits());
      assertEquals(3130, student0.getEnrolledCredits());
      assertEquals("C", student0.getName());
      assertEquals(1172, student0.getSuspendedTerms());
      assertEquals("C", student0.getRace());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("C", student0.getAdmissionTerm());
      assertEquals(4, student0.getCompletedTerms());
      assertEquals(92, student0.getInstitutionalEnrollments());
      assertEquals("e\" n]", student0.getNationality());
      assertEquals(6, student0.getAttemptedCredits());
      assertEquals(4.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("H!n", student0.getCountry());
      assertEquals(1172, student0.getCompletedCredits());
      assertEquals(4, student0.getMandatoryHours());
      assertNull(student0.getGender());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("J: +N\"cp-cWs9}", student0.getAffirmativePolicy());
      assertEquals("B<rc@", student0.getEmail());
      assertNull(student0.getAdmissionStr());
      assertEquals("H!n", student0.getStatusTerm());
      assertFalse(treeSet0.contains(4));
      assertFalse(arrayList0.contains(4));
      assertFalse(priorityQueue0.contains("B<rc@"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "", "k", "", "", "", "", "k", "", ", admissionTerm='", "", studentStatus0, (String) null, "", "]#YsSeO", "TR =-@ZY@q2 v.", "", "`*npC%7OfmINi;&:", "]#YsSeO", "TR =-@ZY@q2 v.", "kH<@/t*(`uko/+", (Curriculum) null, 0, 6, 8199, 0, (-1503), (-3831), 299, (-3831), 8199, 299, 0, 357, 8, 8199, (-205), 8);
      assertEquals((-3825), student0.getCompletedCredits());
      assertEquals("", student0.getName());
      assertEquals(299, student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", admissionTerm='", student0.getRace());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("k", student0.getBirthDate());
      assertEquals(8199, student0.getMobilityTerms());
      assertEquals((-3831), student0.getComplementaryCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getStatusStr());
      assertEquals(299.0, student0.getIea(), 0.01);
      assertEquals((-1503), student0.getComplementaryHours());
      assertEquals("", student0.getNationality());
      assertEquals(8, student0.getInstitutionalEnrollments());
      assertEquals("TR =-@ZY@q2 v.", student0.getDisabilities());
      assertEquals("kH<@/t*(`uko/+", student0.getCurriculumCode());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(8199.0, student0.getMc(), 0.01);
      assertEquals(8.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(6, student0.getMandatoryCredits());
      assertNull(student0.getStatusTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("]#YsSeO", student0.getSecondarySchoolGraduationYear());
      assertEquals(8199, student0.getOptionalHours());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("TR =-@ZY@q2 v.", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals(357, student0.getSuspendedTerms());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("]#YsSeO", student0.getAdmissionTerm());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals((-205), student0.getEnrolledCredits());
      assertEquals("", student0.getEmail());
      assertEquals((-3831.0), student0.getGpa(), 0.01);
      assertEquals("k", student0.getCountry());
      assertEquals("", student0.getNationalId());
      assertEquals("`*npC%7OfmINi;&:", student0.getSecondarySchool());
      assertNotNull(student0);
      
      String string0 = student0.getGender();
      assertEquals((-3825), student0.getCompletedCredits());
      assertEquals("", student0.getName());
      assertEquals(299, student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", admissionTerm='", student0.getRace());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("k", student0.getBirthDate());
      assertEquals(8199, student0.getMobilityTerms());
      assertEquals((-3831), student0.getComplementaryCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getStatusStr());
      assertEquals(299.0, student0.getIea(), 0.01);
      assertEquals((-1503), student0.getComplementaryHours());
      assertEquals("", student0.getNationality());
      assertEquals(8, student0.getInstitutionalEnrollments());
      assertEquals("TR =-@ZY@q2 v.", student0.getDisabilities());
      assertEquals("kH<@/t*(`uko/+", student0.getCurriculumCode());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(8199.0, student0.getMc(), 0.01);
      assertEquals(8.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(6, student0.getMandatoryCredits());
      assertNull(student0.getStatusTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("]#YsSeO", student0.getSecondarySchoolGraduationYear());
      assertEquals(8199, student0.getOptionalHours());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("TR =-@ZY@q2 v.", student0.getCourseCode());
      assertEquals("", student0.getGender());
      assertEquals(357, student0.getSuspendedTerms());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("]#YsSeO", student0.getAdmissionTerm());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals((-205), student0.getEnrolledCredits());
      assertEquals("", student0.getEmail());
      assertEquals((-3831.0), student0.getGpa(), 0.01);
      assertEquals("k", student0.getCountry());
      assertEquals("", student0.getNationalId());
      assertEquals("`*npC%7OfmINi;&:", student0.getSecondarySchool());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "c5q-A]VuJ;koP3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-11), (-11), 0, (-11), 0, 0, 5894, 0, 5894, (-11), treeSet0, treeSet0, priorityQueue0, treeSet0, priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals((-11), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(5894, curriculum0.getMaxNumberOfTerms());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals((-33.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5894, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-11), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", curriculum0.getCourseCode());
      assertFalse(treeSet0.contains("c5q-A]VuJ;koP3"));
      assertFalse(priorityQueue0.contains("c5q-A]VuJ;koP3"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "=Mho18%K^ZsL!", "(Blf6+pNT)9EP)cCC", "=Mho18%K^ZsL!", "9aUyR0C2Wf6S,#;4", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "(Blf6+pNT)9EP)cCC", "9aUyR0C2Wf6S,#;4", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "9aUyR0C2Wf6S,#;4", studentStatus0, ", namBe='", "c5q-A]VuJ;koP3", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "=Mho18%K^ZsL!", "=Mho18%K^ZsL!", (String) null, "=Mho18%K^ZsL!", ", namBe='", curriculum0, 0, 5894, 0, 0, (-11), (-11), 0, 5894, 5894, (-3497.969951393752), 5894, 5894, (-11), (-921), 0, 0);
      assertEquals(0, priorityQueue0.size());
      assertEquals((-11), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(5894, curriculum0.getMaxNumberOfTerms());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals((-33.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5894, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-11), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", curriculum0.getCourseCode());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals("=Mho18%K^ZsL!", student0.getCourseCode());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals(5894, student0.getCompletedTerms());
      assertEquals("=Mho18%K^ZsL!", student0.getGender());
      assertEquals(5894, student0.getSuspendedTerms());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("=Mho18%K^ZsL!", student0.getAffirmativePolicy());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals(", namBe='", student0.getStatusTerm());
      assertEquals(5894.0, student0.getMc(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getRace());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getName());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getPlaceOfBirth());
      assertEquals(5883, student0.getCompletedCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(", namBe='", student0.getCurriculumCode());
      assertEquals(5894, student0.getMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getAdmissionTerm());
      assertEquals((-11), student0.getComplementaryCredits());
      assertEquals((-11), student0.getComplementaryHours());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-3497.969951393752), student0.getIea(), 0.01);
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(5894.0, student0.getGpa(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getStatusStr());
      assertEquals((-11), student0.getInstitutionalEnrollments());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getDisabilities());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationality());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertFalse(treeSet0.contains(", namBe='"));
      assertFalse(priorityQueue0.contains(", namBe='"));
      assertNotNull(student0);
      
      int int0 = student0.getEnrolledCredits();
      assertEquals(0, priorityQueue0.size());
      assertEquals((-11), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(5894, curriculum0.getMaxNumberOfTerms());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals((-33.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(5894, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-11), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", curriculum0.getCourseCode());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals("=Mho18%K^ZsL!", student0.getCourseCode());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals(5894, student0.getCompletedTerms());
      assertEquals("=Mho18%K^ZsL!", student0.getGender());
      assertEquals(5894, student0.getSuspendedTerms());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("=Mho18%K^ZsL!", student0.getAffirmativePolicy());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals(", namBe='", student0.getStatusTerm());
      assertEquals(5894.0, student0.getMc(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getRace());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getName());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getPlaceOfBirth());
      assertEquals(5883, student0.getCompletedCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(", namBe='", student0.getCurriculumCode());
      assertEquals(5894, student0.getMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getAdmissionTerm());
      assertEquals((-11), student0.getComplementaryCredits());
      assertEquals((-11), student0.getComplementaryHours());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-3497.969951393752), student0.getIea(), 0.01);
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(5894.0, student0.getGpa(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getStatusStr());
      assertEquals((-11), student0.getInstitutionalEnrollments());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getDisabilities());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationality());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertFalse(treeSet0.contains(", namBe='"));
      assertFalse(priorityQueue0.contains(", namBe='"));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student(", placeOfBirth='", ", placeOfBirth='", "6V~|3O~]w@!|2Yp", ", placeOfBirth='", "", ", placeOfBirth='", "", "", ", placeOfBirth='", "", "G'R/~ c&w+R", "e", studentStatus0, "Rn\"a!MlS9jhSS?o:", " and ", "e", "", ", placeOfBirth='", "", "e", "G'R/~ c&w+R", "DM\"XSuS!G=XhL3#P", (Curriculum) null, 777, 0, 0, 2425, (-2410), 0, (-414), (-969.1), (-414), 0.0, (-2410), 0, (-414), (-592), (-1620), 4100.9786506);
      assertEquals("", student0.getNationality());
      assertEquals("e", student0.getAdmissionTerm());
      assertEquals(", placeOfBirth='", student0.getCountry());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-969.1), student0.getGpa(), 0.01);
      assertEquals((-414.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(", placeOfBirth='", student0.getBirthDate());
      assertEquals(", placeOfBirth='", student0.getAffirmativePolicy());
      assertEquals("", student0.getMaritalStatus());
      assertEquals((-1620), student0.getEnrolledCredits());
      assertEquals("e", student0.getStatusStr());
      assertEquals("G'R/~ c&w+R", student0.getCourseCode());
      assertEquals("6V~|3O~]w@!|2Yp", student0.getName());
      assertEquals("", student0.getDisabilities());
      assertEquals(", placeOfBirth='", student0.getGender());
      assertEquals(777, student0.getMandatoryHours());
      assertEquals("e", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getEmail());
      assertEquals((-592), student0.getMobilityTerms());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(4100.9786506, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals(", placeOfBirth='", student0.getNationalId());
      assertEquals("G'R/~ c&w+R", student0.getRace());
      assertEquals(2425, student0.getCompletedCredits());
      assertEquals(2425, student0.getOptionalCredits());
      assertEquals("Rn\"a!MlS9jhSS?o:", student0.getStatusTerm());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-414), student0.getAttemptedCredits());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(" and ", student0.getAdmissionStr());
      assertEquals((-2410), student0.getComplementaryHours());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("DM\"XSuS!G=XhL3#P", student0.getCurriculumCode());
      assertEquals((-414), student0.getInstitutionalEnrollments());
      assertEquals((-2410), student0.getCompletedTerms());
      assertNotNull(student0);
      
      int int0 = student0.getEnrolledCredits();
      assertEquals("", student0.getNationality());
      assertEquals("e", student0.getAdmissionTerm());
      assertEquals(", placeOfBirth='", student0.getCountry());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-969.1), student0.getGpa(), 0.01);
      assertEquals((-414.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(", placeOfBirth='", student0.getBirthDate());
      assertEquals(", placeOfBirth='", student0.getAffirmativePolicy());
      assertEquals("", student0.getMaritalStatus());
      assertEquals((-1620), student0.getEnrolledCredits());
      assertEquals("e", student0.getStatusStr());
      assertEquals("G'R/~ c&w+R", student0.getCourseCode());
      assertEquals("6V~|3O~]w@!|2Yp", student0.getName());
      assertEquals("", student0.getDisabilities());
      assertEquals(", placeOfBirth='", student0.getGender());
      assertEquals(777, student0.getMandatoryHours());
      assertEquals("e", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getEmail());
      assertEquals((-592), student0.getMobilityTerms());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(4100.9786506, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals(", placeOfBirth='", student0.getNationalId());
      assertEquals("G'R/~ c&w+R", student0.getRace());
      assertEquals(2425, student0.getCompletedCredits());
      assertEquals(2425, student0.getOptionalCredits());
      assertEquals("Rn\"a!MlS9jhSS?o:", student0.getStatusTerm());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-414), student0.getAttemptedCredits());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(" and ", student0.getAdmissionStr());
      assertEquals((-2410), student0.getComplementaryHours());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("DM\"XSuS!G=XhL3#P", student0.getCurriculumCode());
      assertEquals((-414), student0.getInstitutionalEnrollments());
      assertEquals((-2410), student0.getCompletedTerms());
      assertEquals((-1620), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("", "<MM`rm5[6!20Da", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 9, 9, 9, 64, 64, 64, 64, 87855567, 64, 0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(9, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(64, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(64, curriculum0.getMinActivitiesNeeded());
      assertEquals(64, curriculum0.getMinNumberOfTerms());
      assertEquals(64, curriculum0.getMaxNumberOfTerms());
      assertEquals(87855567, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("<MM`rm5[6!20Da", curriculum0.getCurriculumCode());
      assertEquals(91.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(64, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(9, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(9, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "", ", nationality='", (String) null, "JEyuC'", "<MM`rm5[6!20Da", "JEyuC'", "", "JEyuC'", ">~G5c4}.gIi", "JEyuC'", studentStatus0, "<MM`rm5[6!20Da", "JEyuC'", "x9$R&L.", "JEyuC'", "", "com.google.common.primitives.Floats$FloatConverter", "", "", "x9$R&L.", curriculum0, 2740, 65536, 9, 87855567, 0, 1481, 9, 748.565800382, 0, 3643.7757902778003, (-1307), 1481, 2740, (-1307), 887, 1352.6750314);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(9, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(64, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(64, curriculum0.getMinActivitiesNeeded());
      assertEquals(64, curriculum0.getMinNumberOfTerms());
      assertEquals(64, curriculum0.getMaxNumberOfTerms());
      assertEquals(87855567, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("<MM`rm5[6!20Da", curriculum0.getCurriculumCode());
      assertEquals(91.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(64, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(9, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(9, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("JEyuC'", student0.getGender());
      assertEquals(2740, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("JEyuC'", student0.getStatusStr());
      assertEquals(3643.7757902778003, student0.getIea(), 0.01);
      assertEquals(2740, student0.getMandatoryHours());
      assertEquals((-1307), student0.getMobilityTerms());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getSecondarySchool());
      assertEquals("JEyuC'", student0.getAdmissionStr());
      assertEquals(1481, student0.getSuspendedTerms());
      assertEquals("JEyuC'", student0.getPlaceOfBirth());
      assertEquals(748.565800382, student0.getGpa(), 0.01);
      assertEquals(87922584, student0.getCompletedCredits());
      assertEquals("x9$R&L.", student0.getAdmissionTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(1352.6750314, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("JEyuC'", student0.getDisabilities());
      assertEquals(65536, student0.getMandatoryCredits());
      assertEquals(">~G5c4}.gIi", student0.getRace());
      assertEquals(9, student0.getOptionalHours());
      assertEquals("<MM`rm5[6!20Da", student0.getMaritalStatus());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1307), student0.getCompletedTerms());
      assertEquals(1481, student0.getComplementaryCredits());
      assertEquals("JEyuC'", student0.getNationality());
      assertEquals("x9$R&L.", student0.getCurriculumCode());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("", student0.getCountry());
      assertEquals(87855567, student0.getOptionalCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(9, student0.getAttemptedCredits());
      assertNull(student0.getEmail());
      assertEquals(", nationality='", student0.getBirthDate());
      assertEquals("", student0.getName());
      assertEquals(887, student0.getEnrolledCredits());
      assertEquals("", student0.getNationalId());
      assertEquals("<MM`rm5[6!20Da", student0.getStatusTerm());
      assertFalse(linkedHashSet0.contains("JEyuC'"));
      assertNotNull(student0);
      
      String string0 = student0.getEmail();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(9, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(64, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(64, curriculum0.getMinActivitiesNeeded());
      assertEquals(64, curriculum0.getMinNumberOfTerms());
      assertEquals(64, curriculum0.getMaxNumberOfTerms());
      assertEquals(87855567, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("<MM`rm5[6!20Da", curriculum0.getCurriculumCode());
      assertEquals(91.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(64, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(9, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(9, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("JEyuC'", student0.getGender());
      assertEquals(2740, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("JEyuC'", student0.getStatusStr());
      assertEquals(3643.7757902778003, student0.getIea(), 0.01);
      assertEquals(2740, student0.getMandatoryHours());
      assertEquals((-1307), student0.getMobilityTerms());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getSecondarySchool());
      assertEquals("JEyuC'", student0.getAdmissionStr());
      assertEquals(1481, student0.getSuspendedTerms());
      assertEquals("JEyuC'", student0.getPlaceOfBirth());
      assertEquals(748.565800382, student0.getGpa(), 0.01);
      assertEquals(87922584, student0.getCompletedCredits());
      assertEquals("x9$R&L.", student0.getAdmissionTerm());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(1352.6750314, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("JEyuC'", student0.getDisabilities());
      assertEquals(65536, student0.getMandatoryCredits());
      assertEquals(">~G5c4}.gIi", student0.getRace());
      assertEquals(9, student0.getOptionalHours());
      assertEquals("<MM`rm5[6!20Da", student0.getMaritalStatus());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1307), student0.getCompletedTerms());
      assertEquals(1481, student0.getComplementaryCredits());
      assertEquals("JEyuC'", student0.getNationality());
      assertEquals("x9$R&L.", student0.getCurriculumCode());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("", student0.getCountry());
      assertEquals(87855567, student0.getOptionalCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(9, student0.getAttemptedCredits());
      assertNull(student0.getEmail());
      assertEquals(", nationality='", student0.getBirthDate());
      assertEquals("", student0.getName());
      assertEquals(887, student0.getEnrolledCredits());
      assertEquals("", student0.getNationalId());
      assertEquals("<MM`rm5[6!20Da", student0.getStatusTerm());
      assertFalse(linkedHashSet0.contains("JEyuC'"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Curriculum curriculum0 = new Curriculum("L8,\"U~{B|u+", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 295, 0, 0, 272, 295, 272, 125, 125, 125, 272, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals("L8,\"U~{B|u+", curriculum0.getCourseCode());
      assertEquals(567.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(295, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(272, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(272, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(272, curriculum0.getMinNumberOfTerms());
      assertEquals(295, curriculum0.getMinMandatoryCreditsNeeded());
      assertNotNull(curriculum0);
      
      Student student0 = new Student("|2@Wc", "|2@Wc", "|2@Wc", "BloomFilters must have the same size underlying bit arrays (%s != %s)", "", "CONCLUIDO - NAO COLOU GRAU", "__file", "__file", "", "", "|2@Wc", "Sxm[e", studentStatus0, "wI", "%aLB", "|2@Wc", "wI", "CANCELAMENTO P/ DECISAO JUDICIAL", "24*Mjffc ?", "CANCELAMENTO P/ DECISAO JUDICIAL", (String) null, "?Imr/L3b", curriculum0, (-1126), 87855567, Integer.MIN_VALUE, (-24), (-1192), (-24), (-1192), 0.03, 2577.4632801, 0, 295, 3, 5, 272, 0, (-24));
      assertEquals("L8,\"U~{B|u+", curriculum0.getCourseCode());
      assertEquals(567.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(295, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(272, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(272, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(272, curriculum0.getMinNumberOfTerms());
      assertEquals(295, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(Integer.MIN_VALUE, student0.getOptionalHours());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("BloomFilters must have the same size underlying bit arrays (%s != %s)", student0.getBirthDate());
      assertEquals((-24), student0.getOptionalCredits());
      assertEquals("%aLB", student0.getAdmissionStr());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertEquals((-1126), student0.getMandatoryHours());
      assertEquals(295, student0.getCompletedTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-24.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertEquals("wI", student0.getDisabilities());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("?Imr/L3b", student0.getCurriculumCode());
      assertEquals("", student0.getEmail());
      assertEquals("Sxm[e", student0.getStatusStr());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAffirmativePolicy());
      assertEquals(87855519, student0.getCompletedCredits());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getGender());
      assertEquals("|2@Wc", student0.getAdmissionTerm());
      assertEquals("|2@Wc", student0.getNationalId());
      assertEquals(87855567, student0.getMandatoryCredits());
      assertEquals(272, student0.getMobilityTerms());
      assertEquals(2577.4632801, student0.getMc(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("24*Mjffc ?", student0.getSecondarySchool());
      assertEquals((-1192), student0.getComplementaryHours());
      assertNull(student0.getCourseCode());
      assertEquals("__file", student0.getNationality());
      assertEquals("wI", student0.getStatusTerm());
      assertEquals("|2@Wc", student0.getName());
      assertEquals((-1192), student0.getAttemptedCredits());
      assertEquals((-24), student0.getComplementaryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("", student0.getCountry());
      assertEquals("|2@Wc", student0.getRace());
      assertEquals(11, student0.getStatusIndex());
      assertNotNull(student0);
      
      String string0 = student0.getEmail();
      assertEquals("L8,\"U~{B|u+", curriculum0.getCourseCode());
      assertEquals(567.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(295, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(272, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(272, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(272, curriculum0.getMinNumberOfTerms());
      assertEquals(295, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(Integer.MIN_VALUE, student0.getOptionalHours());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("BloomFilters must have the same size underlying bit arrays (%s != %s)", student0.getBirthDate());
      assertEquals((-24), student0.getOptionalCredits());
      assertEquals("%aLB", student0.getAdmissionStr());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertEquals((-1126), student0.getMandatoryHours());
      assertEquals(295, student0.getCompletedTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-24.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertEquals("wI", student0.getDisabilities());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("?Imr/L3b", student0.getCurriculumCode());
      assertEquals("", student0.getEmail());
      assertEquals("Sxm[e", student0.getStatusStr());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAffirmativePolicy());
      assertEquals(87855519, student0.getCompletedCredits());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getGender());
      assertEquals("|2@Wc", student0.getAdmissionTerm());
      assertEquals("|2@Wc", student0.getNationalId());
      assertEquals(87855567, student0.getMandatoryCredits());
      assertEquals(272, student0.getMobilityTerms());
      assertEquals(2577.4632801, student0.getMc(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("24*Mjffc ?", student0.getSecondarySchool());
      assertEquals((-1192), student0.getComplementaryHours());
      assertNull(student0.getCourseCode());
      assertEquals("__file", student0.getNationality());
      assertEquals("wI", student0.getStatusTerm());
      assertEquals("|2@Wc", student0.getName());
      assertEquals((-1192), student0.getAttemptedCredits());
      assertEquals((-24), student0.getComplementaryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("", student0.getCountry());
      assertEquals("|2@Wc", student0.getRace());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "qk(:jgZJF^(X", "", "", "xms)mW.q;Fv('~,", "qk(:jgZJF^(X", "qk(:jgZJF^(X", "", ".2EU{InI#YF8^W{eW", (String) null, "6Q$x:l7q1U:-)FT[)", studentStatus0, "qk(:jgZJF^(X", ", idealMandatoryCreditsList=", "qk(:jgZJF^(X", (String) null, "6Q$x:l7q1U:-)FT[)", "", "`4S E_", "", "", (Curriculum) null, 882, (-6537), 3128, 3128, 254, 254, 254, 882, 1622.7876332787114, 1283.544, (-159), 5970, (-159), (-159), 10, 3128);
      assertEquals(882, student0.getMandatoryHours());
      assertEquals("xms)mW.q;Fv('~,", student0.getGender());
      assertEquals((-159), student0.getMobilityTerms());
      assertEquals(10, student0.getEnrolledCredits());
      assertEquals(3128, student0.getOptionalCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(254, student0.getComplementaryHours());
      assertEquals(882.0, student0.getGpa(), 0.01);
      assertEquals("6Q$x:l7q1U:-)FT[)", student0.getAffirmativePolicy());
      assertEquals(1283.544, student0.getIea(), 0.01);
      assertEquals("", student0.getCountry());
      assertNull(student0.getRace());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getCourseCode());
      assertEquals("qk(:jgZJF^(X", student0.getNationality());
      assertEquals(254, student0.getComplementaryCredits());
      assertEquals("", student0.getEmail());
      assertEquals((-3155), student0.getCompletedCredits());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(".2EU{InI#YF8^W{eW", student0.getPlaceOfBirth());
      assertEquals((-159), student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals(", idealMandatoryCreditsList=", student0.getAdmissionStr());
      assertEquals("qk(:jgZJF^(X", student0.getAdmissionTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("qk(:jgZJF^(X", student0.getMaritalStatus());
      assertEquals(254, student0.getAttemptedCredits());
      assertEquals(3128.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(5970, student0.getSuspendedTerms());
      assertNull(student0.getDisabilities());
      assertEquals("6Q$x:l7q1U:-)FT[)", student0.getStatusStr());
      assertEquals("`4S E_", student0.getSecondarySchoolGraduationYear());
      assertEquals("qk(:jgZJF^(X", student0.getStatusTerm());
      assertEquals(1622.7876332787114, student0.getMc(), 0.01);
      assertEquals((-6537), student0.getMandatoryCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals(3128, student0.getOptionalHours());
      assertEquals("qk(:jgZJF^(X", student0.getName());
      assertEquals((-159), student0.getInstitutionalEnrollments());
      assertNotNull(student0);
      
      String string0 = student0.getDisabilities();
      assertEquals(882, student0.getMandatoryHours());
      assertEquals("xms)mW.q;Fv('~,", student0.getGender());
      assertEquals((-159), student0.getMobilityTerms());
      assertEquals(10, student0.getEnrolledCredits());
      assertEquals(3128, student0.getOptionalCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(254, student0.getComplementaryHours());
      assertEquals(882.0, student0.getGpa(), 0.01);
      assertEquals("6Q$x:l7q1U:-)FT[)", student0.getAffirmativePolicy());
      assertEquals(1283.544, student0.getIea(), 0.01);
      assertEquals("", student0.getCountry());
      assertNull(student0.getRace());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getCourseCode());
      assertEquals("qk(:jgZJF^(X", student0.getNationality());
      assertEquals(254, student0.getComplementaryCredits());
      assertEquals("", student0.getEmail());
      assertEquals((-3155), student0.getCompletedCredits());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(".2EU{InI#YF8^W{eW", student0.getPlaceOfBirth());
      assertEquals((-159), student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals(", idealMandatoryCreditsList=", student0.getAdmissionStr());
      assertEquals("qk(:jgZJF^(X", student0.getAdmissionTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("qk(:jgZJF^(X", student0.getMaritalStatus());
      assertEquals(254, student0.getAttemptedCredits());
      assertEquals(3128.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(5970, student0.getSuspendedTerms());
      assertNull(student0.getDisabilities());
      assertEquals("6Q$x:l7q1U:-)FT[)", student0.getStatusStr());
      assertEquals("`4S E_", student0.getSecondarySchoolGraduationYear());
      assertEquals("qk(:jgZJF^(X", student0.getStatusTerm());
      assertEquals(1622.7876332787114, student0.getMc(), 0.01);
      assertEquals((-6537), student0.getMandatoryCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals(3128, student0.getOptionalHours());
      assertEquals("qk(:jgZJF^(X", student0.getName());
      assertEquals((-159), student0.getInstitutionalEnrollments());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("LOW", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-941), (-941), 5, 0, (-941), 0, 2191, 5, 0, 0, set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2191, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-941), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-941), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(5, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("LOW", curriculum0.getCourseCode());
      assertEquals((-941), curriculum0.getMinActivitiesNeeded());
      assertEquals(5, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1877.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(arrayList0.contains((-941)));
      assertFalse(set0.contains("LOW"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("Q<J", "Q<J", "com.google.common.collect.AbstractMultimap", "Q<J", "Q<J", "com.google.common.collect.AbstractMultimap", "should never be called", "should never be called", "Hr", "", "", "com.google.common.collect.AbstractMultimap", studentStatus0, "", "Hr", "", "", "", ")V!~U4+?,C{p$@o5", "org.apache.commons.io.filefilter.PrefixFileFilter", "l+*)X44zx", "Hr", curriculum0, 0, 0, (-941), 0, 2691, 2691, 5, 5, 2191, 5, 0, (-941), 5, (-292), 0, (-292));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2191, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-941), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-941), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(5, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("LOW", curriculum0.getCourseCode());
      assertEquals((-941), curriculum0.getMinActivitiesNeeded());
      assertEquals(5, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1877.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Hr", student0.getCurriculumCode());
      assertEquals("", student0.getStatusTerm());
      assertEquals(")V!~U4+?,C{p$@o5", student0.getSecondarySchool());
      assertEquals("Q<J", student0.getEmail());
      assertEquals((-941), student0.getSuspendedTerms());
      assertEquals("Q<J", student0.getBirthDate());
      assertEquals("Q<J", student0.getNationalId());
      assertEquals(5.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("Hr", student0.getAdmissionStr());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getGender());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-292), student0.getMobilityTerms());
      assertEquals("should never be called", student0.getMaritalStatus());
      assertEquals(2691, student0.getComplementaryHours());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getName());
      assertEquals("", student0.getDisabilities());
      assertEquals(2691, student0.getCompletedCredits());
      assertEquals(5.0, student0.getIea(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertEquals((-941), student0.getOptionalHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("Hr", student0.getCountry());
      assertEquals(2691, student0.getComplementaryCredits());
      assertEquals((-292.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(2191.0, student0.getMc(), 0.01);
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getStatusStr());
      assertEquals("should never be called", student0.getNationality());
      assertEquals("", student0.getRace());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(5, student0.getAttemptedCredits());
      assertEquals("l+*)X44zx", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertFalse(arrayList0.contains(2191));
      assertFalse(set0.contains(""));
      assertNotNull(student0);
      
      String string0 = student0.getDisabilities();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2191, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-941), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-941), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(5, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("LOW", curriculum0.getCourseCode());
      assertEquals((-941), curriculum0.getMinActivitiesNeeded());
      assertEquals(5, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1877.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Hr", student0.getCurriculumCode());
      assertEquals("", student0.getStatusTerm());
      assertEquals(")V!~U4+?,C{p$@o5", student0.getSecondarySchool());
      assertEquals("Q<J", student0.getEmail());
      assertEquals((-941), student0.getSuspendedTerms());
      assertEquals("Q<J", student0.getBirthDate());
      assertEquals("Q<J", student0.getNationalId());
      assertEquals(5.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("Hr", student0.getAdmissionStr());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getGender());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-292), student0.getMobilityTerms());
      assertEquals("should never be called", student0.getMaritalStatus());
      assertEquals(2691, student0.getComplementaryHours());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getName());
      assertEquals("", student0.getDisabilities());
      assertEquals(2691, student0.getCompletedCredits());
      assertEquals(5.0, student0.getIea(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertEquals((-941), student0.getOptionalHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("Hr", student0.getCountry());
      assertEquals(2691, student0.getComplementaryCredits());
      assertEquals((-292.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(2191.0, student0.getMc(), 0.01);
      assertEquals("com.google.common.collect.AbstractMultimap", student0.getStatusStr());
      assertEquals("should never be called", student0.getNationality());
      assertEquals("", student0.getRace());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(5, student0.getAttemptedCredits());
      assertEquals("l+*)X44zx", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertFalse(arrayList0.contains(2191));
      assertFalse(set0.contains(""));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Curriculum curriculum0 = new Curriculum("(Blf6+pNT)9EP)cCC", "@N5Q<.dTg&l9*}=C", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 8202, 609, 4336, 9, (-956), (-921), 493, 0, 2451, 8202, treeSet0, treeSet0, treeSet0, priorityQueue0, treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(8202, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(9, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("(Blf6+pNT)9EP)cCC", curriculum0.getCourseCode());
      assertEquals(2451, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(8202, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-921), curriculum0.getMinNumberOfTerms());
      assertEquals(609, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(13156.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4336, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(493, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-956), curriculum0.getMinActivitiesNeeded());
      assertEquals("@N5Q<.dTg&l9*}=C", curriculum0.getCurriculumCode());
      assertFalse(treeSet0.contains("(Blf6+pNT)9EP)cCC"));
      assertFalse(priorityQueue0.contains("(Blf6+pNT)9EP)cCC"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("Ints.stringConverter()", "", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "=^aJ*94", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "9aUyR0C2Wf6S,#;4", "_m7h=E,.", "", "com.google.common.primitives.Shorts$ShortConverter", "I~b5;48WTEk\"AvSb)l", "#gw<g_p", studentStatus0, "=Mho18%K^ZsL!", "]N2Kxx\tb4F", "Q,&]E'M9m=", "", "=Mho18%K^ZsL!", "J_g_Q=", "", "", (String) null, curriculum0, 336, 336, 336, 9, 609, (-921), (-956), (-549), (-164.251), 493, 1549, (-956), 5901, 79, 0, 4336);
      assertEquals(0, priorityQueue0.size());
      assertEquals(8202, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(9, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("(Blf6+pNT)9EP)cCC", curriculum0.getCourseCode());
      assertEquals(2451, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(8202, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-921), curriculum0.getMinNumberOfTerms());
      assertEquals(609, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(13156.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4336, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(493, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-956), curriculum0.getMinActivitiesNeeded());
      assertEquals("@N5Q<.dTg&l9*}=C", curriculum0.getCurriculumCode());
      assertEquals("=^aJ*94", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals("]N2Kxx\tb4F", student0.getAdmissionStr());
      assertEquals("#gw<g_p", student0.getStatusStr());
      assertEquals(336, student0.getMandatoryHours());
      assertEquals("=Mho18%K^ZsL!", student0.getStatusTerm());
      assertEquals((-956), student0.getAttemptedCredits());
      assertEquals("", student0.getGender());
      assertEquals((-956), student0.getSuspendedTerms());
      assertEquals("", student0.getDisabilities());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals("I~b5;48WTEk\"AvSb)l", student0.getRace());
      assertEquals(1549, student0.getCompletedTerms());
      assertEquals(336, student0.getMandatoryCredits());
      assertEquals("Q,&]E'M9m=", student0.getAdmissionTerm());
      assertEquals(493.0, student0.getIea(), 0.01);
      assertEquals(4336.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("J_g_Q=", student0.getSecondarySchool());
      assertEquals(9, student0.getOptionalCredits());
      assertEquals(79, student0.getMobilityTerms());
      assertEquals("com.google.common.primitives.Shorts$ShortConverter", student0.getPlaceOfBirth());
      assertEquals((-921), student0.getComplementaryCredits());
      assertEquals((-576), student0.getCompletedCredits());
      assertEquals("_m7h=E,.", student0.getNationality());
      assertEquals("=Mho18%K^ZsL!", student0.getAffirmativePolicy());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals(5901, student0.getInstitutionalEnrollments());
      assertEquals(609, student0.getComplementaryHours());
      assertEquals((-549.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getName());
      assertEquals("", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-164.251), student0.getMc(), 0.01);
      assertNull(student0.getCurriculumCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(336, student0.getOptionalHours());
      assertFalse(treeSet0.contains("Ints.stringConverter()"));
      assertFalse(priorityQueue0.contains("Ints.stringConverter()"));
      assertNotNull(student0);
      
      String string0 = student0.getCurriculumCode();
      assertEquals(0, priorityQueue0.size());
      assertEquals(8202, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(9, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("(Blf6+pNT)9EP)cCC", curriculum0.getCourseCode());
      assertEquals(2451, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(8202, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-921), curriculum0.getMinNumberOfTerms());
      assertEquals(609, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(13156.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4336, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(493, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-956), curriculum0.getMinActivitiesNeeded());
      assertEquals("@N5Q<.dTg&l9*}=C", curriculum0.getCurriculumCode());
      assertEquals("=^aJ*94", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals("]N2Kxx\tb4F", student0.getAdmissionStr());
      assertEquals("#gw<g_p", student0.getStatusStr());
      assertEquals(336, student0.getMandatoryHours());
      assertEquals("=Mho18%K^ZsL!", student0.getStatusTerm());
      assertEquals((-956), student0.getAttemptedCredits());
      assertEquals("", student0.getGender());
      assertEquals((-956), student0.getSuspendedTerms());
      assertEquals("", student0.getDisabilities());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals("I~b5;48WTEk\"AvSb)l", student0.getRace());
      assertEquals(1549, student0.getCompletedTerms());
      assertEquals(336, student0.getMandatoryCredits());
      assertEquals("Q,&]E'M9m=", student0.getAdmissionTerm());
      assertEquals(493.0, student0.getIea(), 0.01);
      assertEquals(4336.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("J_g_Q=", student0.getSecondarySchool());
      assertEquals(9, student0.getOptionalCredits());
      assertEquals(79, student0.getMobilityTerms());
      assertEquals("com.google.common.primitives.Shorts$ShortConverter", student0.getPlaceOfBirth());
      assertEquals((-921), student0.getComplementaryCredits());
      assertEquals((-576), student0.getCompletedCredits());
      assertEquals("_m7h=E,.", student0.getNationality());
      assertEquals("=Mho18%K^ZsL!", student0.getAffirmativePolicy());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals(5901, student0.getInstitutionalEnrollments());
      assertEquals(609, student0.getComplementaryHours());
      assertEquals((-549.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getName());
      assertEquals("", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-164.251), student0.getMc(), 0.01);
      assertNull(student0.getCurriculumCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(336, student0.getOptionalHours());
      assertFalse(treeSet0.contains("Ints.stringConverter()"));
      assertFalse(priorityQueue0.contains("Ints.stringConverter()"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("H\"H?0w", "CANCELADO 3 REPROV MESMA DISCIPLINA", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-3721), (-3721), (-3721), (-3721), (-3721), 0, (-922), (-850), (-4013), 934, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-14884.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-3721), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("CANCELADO 3 REPROV MESMA DISCIPLINA", curriculum0.getCurriculumCode());
      assertEquals((-922), curriculum0.getMaxNumberOfTerms());
      assertEquals((-4013), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-3721), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-3721), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-3721), curriculum0.getMinActivitiesNeeded());
      assertEquals(934, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("H\"H?0w", curriculum0.getCourseCode());
      assertEquals((-3721), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-850), curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayDeque0.contains("CANCELADO 3 REPROV MESMA DISCIPLINA"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("P'{B", "P'{B", ", mc=", "P'{B", ", mc=", "CANCELADO 3 REPROV MESMA DISCIPLINA", "7.K?ge@l;p.`'>/u};S", "", "H\"H?0w", "", "CANCELADO 3 REPROV MESMA DISCIPLINA", "com.google.common.cache.CacheStats", studentStatus0, (String) null, "", "", "7", ".reverse()", "7.K?ge@l;p.`'>/u};S", (String) null, "", "", curriculum0, 125, (-922), (-4003), (-1), 528, 125, (-3721), 0.0, 1.0, (-1879.83362772868), 2037, 6, 2037, 6, 6, (-3721));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-14884.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-3721), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("CANCELADO 3 REPROV MESMA DISCIPLINA", curriculum0.getCurriculumCode());
      assertEquals((-922), curriculum0.getMaxNumberOfTerms());
      assertEquals((-4013), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-3721), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-3721), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-3721), curriculum0.getMinActivitiesNeeded());
      assertEquals(934, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("H\"H?0w", curriculum0.getCourseCode());
      assertEquals((-3721), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-850), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("7.K?ge@l;p.`'>/u};S", student0.getSecondarySchool());
      assertEquals(125, student0.getMandatoryHours());
      assertEquals(".reverse()", student0.getAffirmativePolicy());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("H\"H?0w", student0.getCountry());
      assertEquals("7.K?ge@l;p.`'>/u};S", student0.getMaritalStatus());
      assertEquals("CANCELADO 3 REPROV MESMA DISCIPLINA", student0.getGender());
      assertEquals(2037, student0.getCompletedTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-1879.83362772868), student0.getIea(), 0.01);
      assertEquals("com.google.common.cache.CacheStats", student0.getStatusStr());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1.0, student0.getMc(), 0.01);
      assertEquals("P'{B", student0.getBirthDate());
      assertEquals((-3721), student0.getAttemptedCredits());
      assertEquals((-4003), student0.getOptionalHours());
      assertEquals(2037, student0.getInstitutionalEnrollments());
      assertEquals("7", student0.getDisabilities());
      assertEquals((-922), student0.getMandatoryCredits());
      assertEquals(6, student0.getEnrolledCredits());
      assertEquals(528, student0.getComplementaryHours());
      assertNull(student0.getStatusTerm());
      assertEquals("CANCELADO 3 REPROV MESMA DISCIPLINA", student0.getRace());
      assertEquals(", mc=", student0.getName());
      assertEquals("", student0.getNationality());
      assertEquals(6, student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(125, student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("P'{B", student0.getNationalId());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(6, student0.getSuspendedTerms());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-3721.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-798), student0.getCompletedCredits());
      assertEquals((-1), student0.getOptionalCredits());
      assertEquals(", mc=", student0.getEmail());
      assertFalse(arrayDeque0.contains("P'{B"));
      assertNotNull(student0);
      
      String string0 = student0.getCurriculumCode();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-14884.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-3721), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("CANCELADO 3 REPROV MESMA DISCIPLINA", curriculum0.getCurriculumCode());
      assertEquals((-922), curriculum0.getMaxNumberOfTerms());
      assertEquals((-4013), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-3721), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-3721), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-3721), curriculum0.getMinActivitiesNeeded());
      assertEquals(934, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("H\"H?0w", curriculum0.getCourseCode());
      assertEquals((-3721), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-850), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("7.K?ge@l;p.`'>/u};S", student0.getSecondarySchool());
      assertEquals(125, student0.getMandatoryHours());
      assertEquals(".reverse()", student0.getAffirmativePolicy());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("H\"H?0w", student0.getCountry());
      assertEquals("7.K?ge@l;p.`'>/u};S", student0.getMaritalStatus());
      assertEquals("CANCELADO 3 REPROV MESMA DISCIPLINA", student0.getGender());
      assertEquals(2037, student0.getCompletedTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-1879.83362772868), student0.getIea(), 0.01);
      assertEquals("com.google.common.cache.CacheStats", student0.getStatusStr());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1.0, student0.getMc(), 0.01);
      assertEquals("P'{B", student0.getBirthDate());
      assertEquals((-3721), student0.getAttemptedCredits());
      assertEquals((-4003), student0.getOptionalHours());
      assertEquals(2037, student0.getInstitutionalEnrollments());
      assertEquals("7", student0.getDisabilities());
      assertEquals((-922), student0.getMandatoryCredits());
      assertEquals(6, student0.getEnrolledCredits());
      assertEquals(528, student0.getComplementaryHours());
      assertNull(student0.getStatusTerm());
      assertEquals("CANCELADO 3 REPROV MESMA DISCIPLINA", student0.getRace());
      assertEquals(", mc=", student0.getName());
      assertEquals("", student0.getNationality());
      assertEquals(6, student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(125, student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("P'{B", student0.getNationalId());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(6, student0.getSuspendedTerms());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-3721.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-798), student0.getCompletedCredits());
      assertEquals((-1), student0.getOptionalCredits());
      assertEquals(", mc=", student0.getEmail());
      assertFalse(arrayDeque0.contains("P'{B"));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("The array of suffixes must not be null", ".[@>V~L57L7`69]5^", ".[@>V~L57L7`69]5^", "The array of suffixes must not be null", "PaL`jK}6B=w~qerH>", ".[@>V~L57L7`69]5^", "=*nh]0PNzc`PM=jVhS", "_d* 2Z=", "=*nh]0PNzc`PM=jVhS", "_d* 2Z=", (String) null, "The array of suffixes must not be null", studentStatus0, "_d* 2Z=", "PaL`jK}6B=w~qerH>", "", "org.apache.commons.io.filefilter.FileFileFilter", "", "PaL`jK}6B=w~qerH>", "b.Sx:VMF", "PaL`jK}6B=w~qerH>", "", (Curriculum) null, (-3266), (-3266), 0, 461845907, 125, (-2200), 125, (-2200), (-2200), 0.0, 0, (-95), 0, 461845907, 127, 588.0);
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getEmail());
      assertEquals((-3266), student0.getMandatoryHours());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("The array of suffixes must not be null", student0.getBirthDate());
      assertEquals(461845907, student0.getMobilityTerms());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getAdmissionStr());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(461845907, student0.getOptionalCredits());
      assertEquals(".[@>V~L57L7`69]5^", student0.getNationalId());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("=*nh]0PNzc`PM=jVhS", student0.getMaritalStatus());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals((-2200.0), student0.getMc(), 0.01);
      assertEquals(461840441, student0.getCompletedCredits());
      assertEquals(125, student0.getAttemptedCredits());
      assertEquals((-2200), student0.getComplementaryCredits());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", student0.getDisabilities());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("_d* 2Z=", student0.getNationality());
      assertNull(student0.getRace());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(".[@>V~L57L7`69]5^", student0.getName());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(588.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("_d* 2Z=", student0.getStatusTerm());
      assertEquals((-95), student0.getSuspendedTerms());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getCourseCode());
      assertEquals("b.Sx:VMF", student0.getSecondarySchoolGraduationYear());
      assertEquals((-3266), student0.getMandatoryCredits());
      assertEquals(125, student0.getComplementaryHours());
      assertEquals(127, student0.getEnrolledCredits());
      assertEquals("=*nh]0PNzc`PM=jVhS", student0.getCountry());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getSecondarySchool());
      assertEquals("The array of suffixes must not be null", student0.getStatusStr());
      assertEquals(".[@>V~L57L7`69]5^", student0.getGender());
      assertEquals("_d* 2Z=", student0.getPlaceOfBirth());
      assertEquals((-2200.0), student0.getGpa(), 0.01);
      assertNotNull(student0);
      
      Curriculum curriculum0 = student0.getCurriculum();
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getEmail());
      assertEquals((-3266), student0.getMandatoryHours());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("The array of suffixes must not be null", student0.getBirthDate());
      assertEquals(461845907, student0.getMobilityTerms());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getAdmissionStr());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(461845907, student0.getOptionalCredits());
      assertEquals(".[@>V~L57L7`69]5^", student0.getNationalId());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("=*nh]0PNzc`PM=jVhS", student0.getMaritalStatus());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals((-2200.0), student0.getMc(), 0.01);
      assertEquals(461840441, student0.getCompletedCredits());
      assertEquals(125, student0.getAttemptedCredits());
      assertEquals((-2200), student0.getComplementaryCredits());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", student0.getDisabilities());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("_d* 2Z=", student0.getNationality());
      assertNull(student0.getRace());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(".[@>V~L57L7`69]5^", student0.getName());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(588.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("_d* 2Z=", student0.getStatusTerm());
      assertEquals((-95), student0.getSuspendedTerms());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getCourseCode());
      assertEquals("b.Sx:VMF", student0.getSecondarySchoolGraduationYear());
      assertEquals((-3266), student0.getMandatoryCredits());
      assertEquals(125, student0.getComplementaryHours());
      assertEquals(127, student0.getEnrolledCredits());
      assertEquals("=*nh]0PNzc`PM=jVhS", student0.getCountry());
      assertEquals("PaL`jK}6B=w~qerH>", student0.getSecondarySchool());
      assertEquals("The array of suffixes must not be null", student0.getStatusStr());
      assertEquals(".[@>V~L57L7`69]5^", student0.getGender());
      assertEquals("_d* 2Z=", student0.getPlaceOfBirth());
      assertEquals((-2200.0), student0.getGpa(), 0.01);
      assertNull(curriculum0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("CANCELADO REPROVOU TODAS POR FALTAS", "<?I}Y4o8[G>Sa_wVF", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 306654252, 3059, 0, 0, 0, 0, set0, set0, set0, set0, set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(3059, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(306654252, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("<?I}Y4o8[G>Sa_wVF", curriculum0.getCurriculumCode());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertFalse(set0.contains("<?I}Y4o8[G>Sa_wVF"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("(", "(", "(", "kTZ`iD_*F0\"?", "(", "kTZ`iD_*F0\"?", "LH", "LH", "", "", "LH", "IQ", studentStatus0, "", "IQ", "*aj gmo;GoK`H", "CANCELADO REPROVOU TODAS POR FALTAS", "IQ", "hv", "com.google.common.base.Predicates$IsEqualToPredicate", "<?I}Y4o8[G>Sa_wVF", "com.google.common.base.Predicates$IsEqualToPredicate", curriculum0, 3319, 2, 0, 87855567, 2, 0, 7, 0, (-1.0), 0, 2262, 7, 0, 745, 306654252, 1550.0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(3059, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(306654252, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("<?I}Y4o8[G>Sa_wVF", curriculum0.getCurriculumCode());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getDisabilities());
      assertEquals("LH", student0.getMaritalStatus());
      assertEquals(2262, student0.getCompletedTerms());
      assertEquals("LH", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("<?I}Y4o8[G>Sa_wVF", student0.getCourseCode());
      assertEquals("", student0.getCountry());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals(2, student0.getComplementaryHours());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getCurriculumCode());
      assertEquals("LH", student0.getNationality());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getSecondarySchoolGraduationYear());
      assertEquals("(", student0.getName());
      assertEquals("hv", student0.getSecondarySchool());
      assertEquals("IQ", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("(", student0.getNationalId());
      assertEquals("(", student0.getEmail());
      assertEquals("IQ", student0.getAffirmativePolicy());
      assertEquals("*aj gmo;GoK`H", student0.getAdmissionTerm());
      assertEquals(7, student0.getSuspendedTerms());
      assertEquals("kTZ`iD_*F0\"?", student0.getBirthDate());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(7, student0.getAttemptedCredits());
      assertEquals(745, student0.getMobilityTerms());
      assertEquals(1550.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(306654252, student0.getEnrolledCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(2, student0.getMandatoryCredits());
      assertEquals("kTZ`iD_*F0\"?", student0.getGender());
      assertEquals("IQ", student0.getStatusStr());
      assertEquals(87855567, student0.getOptionalCredits());
      assertEquals(87855569, student0.getCompletedCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(3319, student0.getMandatoryHours());
      assertFalse(set0.contains("<?I}Y4o8[G>Sa_wVF"));
      assertNotNull(student0);
      
      Curriculum curriculum1 = student0.getCurriculum();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(3059, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(306654252, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("<?I}Y4o8[G>Sa_wVF", curriculum0.getCurriculumCode());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getDisabilities());
      assertEquals("LH", student0.getMaritalStatus());
      assertEquals(2262, student0.getCompletedTerms());
      assertEquals("LH", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("<?I}Y4o8[G>Sa_wVF", student0.getCourseCode());
      assertEquals("", student0.getCountry());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals(2, student0.getComplementaryHours());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getCurriculumCode());
      assertEquals("LH", student0.getNationality());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getSecondarySchoolGraduationYear());
      assertEquals("(", student0.getName());
      assertEquals("hv", student0.getSecondarySchool());
      assertEquals("IQ", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("(", student0.getNationalId());
      assertEquals("(", student0.getEmail());
      assertEquals("IQ", student0.getAffirmativePolicy());
      assertEquals("*aj gmo;GoK`H", student0.getAdmissionTerm());
      assertEquals(7, student0.getSuspendedTerms());
      assertEquals("kTZ`iD_*F0\"?", student0.getBirthDate());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(7, student0.getAttemptedCredits());
      assertEquals(745, student0.getMobilityTerms());
      assertEquals(1550.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(306654252, student0.getEnrolledCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(2, student0.getMandatoryCredits());
      assertEquals("kTZ`iD_*F0\"?", student0.getGender());
      assertEquals("IQ", student0.getStatusStr());
      assertEquals(87855567, student0.getOptionalCredits());
      assertEquals(87855569, student0.getCompletedCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(3319, student0.getMandatoryHours());
      assertEquals(0, curriculum1.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum1.getMaxNumberOfEnrolledCredits());
      assertEquals(306654252, curriculum1.getMinActivitiesNeeded());
      assertEquals(3059, curriculum1.getMinNumberOfTerms());
      assertEquals(0, curriculum1.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum1.getMinNumberOfEnrolledCredits());
      assertEquals("<?I}Y4o8[G>Sa_wVF", curriculum1.getCurriculumCode());
      assertEquals(0, curriculum1.getMinComplementaryCreditsNeeded());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", curriculum1.getCourseCode());
      assertEquals(0, curriculum1.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum1.getMaxNumberOfTerms());
      assertEquals(0, curriculum1.getMinElectiveCreditsNeeded());
      assertEquals(0.0, curriculum1.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(set0.contains("<?I}Y4o8[G>Sa_wVF"));
      assertNotNull(curriculum1);
      assertSame(curriculum0, curriculum1);
      assertSame(curriculum1, curriculum0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Curriculum curriculum0 = new Curriculum("CANCELADO NOVO INGRESSO OUTRO CURSO", "gCrBMF\"l6", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 554, 554, 554, (-1578), 554, (-1578), 554, 0, 0, (-2657), list0, list0, list0, priorityQueue0, priorityQueue0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCourseCode());
      assertEquals((-1578), curriculum0.getMinNumberOfTerms());
      assertEquals(554, curriculum0.getMinActivitiesNeeded());
      assertEquals(554, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1578), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(554, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("gCrBMF\"l6", curriculum0.getCurriculumCode());
      assertEquals(554, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(84.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(554, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2657), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(priorityQueue0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertFalse(list0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student((String) null, "za)!PRICs$0!K.Tx%v", "za)!PRICs$0!K.Tx%v", "za)!PRICs$0!K.Tx%v", (String) null, "", "w0$Ou|_J;", ", curriculum='", "System", "System", (String) null, "", studentStatus0, "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "w0$Ou|_J;", (String) null, "za)!PRICs$0!K.Tx%v", ", curriculum='", "", "CANCELAMENTO POR ABANDONO", (String) null, curriculum0, (-2657), (-1095), 20, 92, 20, 5, 3, 1038.2622682364, 5, (-1921.001040064218), 554, 20, 0, 5, 0, (-514.8627));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCourseCode());
      assertEquals((-1578), curriculum0.getMinNumberOfTerms());
      assertEquals(554, curriculum0.getMinActivitiesNeeded());
      assertEquals(554, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1578), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(554, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("gCrBMF\"l6", curriculum0.getCurriculumCode());
      assertEquals(554, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(84.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(554, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2657), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertNull(student0.getDisabilities());
      assertNull(student0.getRace());
      assertEquals(20, student0.getSuspendedTerms());
      assertEquals(", curriculum='", student0.getSecondarySchool());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3, student0.getAttemptedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getBirthDate());
      assertEquals(20, student0.getOptionalHours());
      assertEquals(92, student0.getOptionalCredits());
      assertEquals("System", student0.getCountry());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-1921.001040064218), student0.getIea(), 0.01);
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getCourseCode());
      assertEquals("System", student0.getPlaceOfBirth());
      assertNull(student0.getCurriculumCode());
      assertEquals(5.0, student0.getMc(), 0.01);
      assertEquals((-998), student0.getCompletedCredits());
      assertNull(student0.getEmail());
      assertEquals(1038.2622682364, student0.getGpa(), 0.01);
      assertEquals(20, student0.getComplementaryHours());
      assertEquals((-2657), student0.getMandatoryHours());
      assertEquals("", student0.getStatusStr());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getNationalId());
      assertEquals(554, student0.getCompletedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(5, student0.getMobilityTerms());
      assertEquals(", curriculum='", student0.getNationality());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getName());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-514.8627), student0.getAdmissionGrade(), 0.01);
      assertEquals(5, student0.getComplementaryCredits());
      assertEquals((-1095), student0.getMandatoryCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusTerm());
      assertEquals("w0$Ou|_J;", student0.getAdmissionTerm());
      assertEquals("w0$Ou|_J;", student0.getMaritalStatus());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getAffirmativePolicy());
      assertFalse(priorityQueue0.contains("za)!PRICs$0!K.Tx%v"));
      assertFalse(list0.contains("za)!PRICs$0!K.Tx%v"));
      assertNotNull(student0);
      
      Curriculum curriculum1 = student0.getCurriculum();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCourseCode());
      assertEquals((-1578), curriculum0.getMinNumberOfTerms());
      assertEquals(554, curriculum0.getMinActivitiesNeeded());
      assertEquals(554, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1578), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(554, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("gCrBMF\"l6", curriculum0.getCurriculumCode());
      assertEquals(554, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(84.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(554, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2657), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertNull(student0.getDisabilities());
      assertNull(student0.getRace());
      assertEquals(20, student0.getSuspendedTerms());
      assertEquals(", curriculum='", student0.getSecondarySchool());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3, student0.getAttemptedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getBirthDate());
      assertEquals(20, student0.getOptionalHours());
      assertEquals(92, student0.getOptionalCredits());
      assertEquals("System", student0.getCountry());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-1921.001040064218), student0.getIea(), 0.01);
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getCourseCode());
      assertEquals("System", student0.getPlaceOfBirth());
      assertNull(student0.getCurriculumCode());
      assertEquals(5.0, student0.getMc(), 0.01);
      assertEquals((-998), student0.getCompletedCredits());
      assertNull(student0.getEmail());
      assertEquals(1038.2622682364, student0.getGpa(), 0.01);
      assertEquals(20, student0.getComplementaryHours());
      assertEquals((-2657), student0.getMandatoryHours());
      assertEquals("", student0.getStatusStr());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getNationalId());
      assertEquals(554, student0.getCompletedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(5, student0.getMobilityTerms());
      assertEquals(", curriculum='", student0.getNationality());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getName());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-514.8627), student0.getAdmissionGrade(), 0.01);
      assertEquals(5, student0.getComplementaryCredits());
      assertEquals((-1095), student0.getMandatoryCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusTerm());
      assertEquals("w0$Ou|_J;", student0.getAdmissionTerm());
      assertEquals("w0$Ou|_J;", student0.getMaritalStatus());
      assertEquals("za)!PRICs$0!K.Tx%v", student0.getAffirmativePolicy());
      assertEquals(84.0, curriculum1.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1578), curriculum1.getMinComplementaryCreditsNeeded());
      assertEquals("gCrBMF\"l6", curriculum1.getCurriculumCode());
      assertEquals(554, curriculum1.getMinMandatoryCreditsNeeded());
      assertEquals((-1578), curriculum1.getMinNumberOfTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum1.getCourseCode());
      assertEquals(0, curriculum1.getMaxNumberOfEnrolledCredits());
      assertEquals((-2657), curriculum1.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum1.getMinNumberOfEnrolledCredits());
      assertEquals(554, curriculum1.getMinActivitiesNeeded());
      assertEquals(554, curriculum1.getMinOptionalCreditsNeeded());
      assertEquals(554, curriculum1.getMaxNumberOfTerms());
      assertEquals(554, curriculum1.getMinElectiveCreditsNeeded());
      assertFalse(priorityQueue0.contains("za)!PRICs$0!K.Tx%v"));
      assertFalse(list0.contains("za)!PRICs$0!K.Tx%v"));
      assertNotNull(curriculum1);
      assertSame(curriculum0, curriculum1);
      assertSame(curriculum1, curriculum0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("TRANSFERIDO PARA OUTRA IES", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, (-2123), 414, 0, (-449), 414, 0, (-2123), (-2123), (-449), set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-449), curriculum0.getMinActivitiesNeeded());
      assertEquals((-449), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains((-2123)));
      assertFalse(set0.contains("TRANSFERIDO PARA OUTRA IES"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("gKG4IH_^1\"2@\"h>:uk", "gKG4IH_^1\"2@\"h>:uk", "", "", "gKG4IH_^1\"2@\"h>:uk", ", disabilities='", "gKG4IH_^1\"2@\"h>:uk", "", (String) null, "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", studentStatus0, "", (String) null, (String) null, ", disabilities='", "", "", "gKG4IH_^1\"2@\"h>:uk", "TRANSFERIDO PARA OUTRA IES", (String) null, curriculum0, 1298, (-2123), 0, 0, (-22), (-1485), 0, 4484.54440308831, 3334.163199, (-22), (-2123), 414, 4447, 5760, 2, 414);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-449), curriculum0.getMinActivitiesNeeded());
      assertEquals((-449), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1485), student0.getComplementaryCredits());
      assertEquals(4447, student0.getInstitutionalEnrollments());
      assertEquals((-22.0), student0.getIea(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getMaritalStatus());
      assertNull(student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(", disabilities='", student0.getDisabilities());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getRace());
      assertEquals((-2123), student0.getMandatoryCredits());
      assertNull(student0.getCurriculumCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(4484.54440308831, student0.getGpa(), 0.01);
      assertEquals("", student0.getSecondarySchool());
      assertEquals(1298, student0.getMandatoryHours());
      assertEquals(10, student0.getStatusIndex());
      assertEquals((-22), student0.getComplementaryHours());
      assertEquals("", student0.getStatusTerm());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCourseCode());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getStatusStr());
      assertEquals(3334.163199, student0.getMc(), 0.01);
      assertNull(student0.getCountry());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(414.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals((-3608), student0.getCompletedCredits());
      assertEquals("", student0.getName());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getPlaceOfBirth());
      assertEquals((-2123), student0.getCompletedTerms());
      assertNull(student0.getAdmissionStr());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getNationalId());
      assertEquals(414, student0.getSuspendedTerms());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getEmail());
      assertEquals(2, student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(5760, student0.getMobilityTerms());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains("TRANSFERIDO PARA OUTRA IES"));
      assertNotNull(student0);
      
      Curriculum curriculum1 = student0.getCurriculum();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-449), curriculum0.getMinActivitiesNeeded());
      assertEquals((-449), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1485), student0.getComplementaryCredits());
      assertEquals(4447, student0.getInstitutionalEnrollments());
      assertEquals((-22.0), student0.getIea(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getMaritalStatus());
      assertNull(student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(", disabilities='", student0.getDisabilities());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getRace());
      assertEquals((-2123), student0.getMandatoryCredits());
      assertNull(student0.getCurriculumCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(4484.54440308831, student0.getGpa(), 0.01);
      assertEquals("", student0.getSecondarySchool());
      assertEquals(1298, student0.getMandatoryHours());
      assertEquals(10, student0.getStatusIndex());
      assertEquals((-22), student0.getComplementaryHours());
      assertEquals("", student0.getStatusTerm());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCourseCode());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getStatusStr());
      assertEquals(3334.163199, student0.getMc(), 0.01);
      assertNull(student0.getCountry());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(414.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals((-3608), student0.getCompletedCredits());
      assertEquals("", student0.getName());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getPlaceOfBirth());
      assertEquals((-2123), student0.getCompletedTerms());
      assertNull(student0.getAdmissionStr());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getNationalId());
      assertEquals(414, student0.getSuspendedTerms());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getEmail());
      assertEquals(2, student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(5760, student0.getMobilityTerms());
      assertEquals((-449), curriculum1.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2123), curriculum1.getMinNumberOfEnrolledCredits());
      assertEquals((-1709.0), curriculum1.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2123), curriculum1.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum1.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum1.getMinComplementaryCreditsNeeded());
      assertEquals(414, curriculum1.getMinElectiveCreditsNeeded());
      assertEquals(414, curriculum1.getMinNumberOfTerms());
      assertEquals(0, curriculum1.getMaxNumberOfTerms());
      assertEquals((-2123), curriculum1.getMinOptionalCreditsNeeded());
      assertNull(curriculum1.getCurriculumCode());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum1.getCourseCode());
      assertEquals((-449), curriculum1.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains("TRANSFERIDO PARA OUTRA IES"));
      assertNotNull(curriculum1);
      assertSame(curriculum0, curriculum1);
      assertSame(curriculum1, curriculum0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("8-~FQ)Rr#O8", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 1796, 1430, 675, 0, 3640, (-2744), 1796, 0, (-62), arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-62), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1430, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3901.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3640, curriculum0.getMinNumberOfTerms());
      assertEquals("8-~FQ)Rr#O8", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2744), curriculum0.getMaxNumberOfTerms());
      assertEquals(1796, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(675, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1796, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayDeque0.contains("8-~FQ)Rr#O8"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("5#u+DP~ `W]DOn", "5#u+DP~ `W]DOn", "5#u+DP~ `W]DOn", "5#u+DP~ `W]DOn", "5#u+DP~ `W]DOn", "P{>@(|Cx}') {c", "com.google.common.base.Suppliers$SupplierFunctionImpl", ", enrolledCredits=", "CANCELADO REPROVOU TODAS POR FALTAS", "com.google.common.base.Suppliers$SupplierFunctionImpl", "(PxJ=cnjN7:<X>OIw", "P{>@(|Cx}') {c", studentStatus0, "", "CANCELADO REPROVOU TODAS POR FALTAS", ", optionalHours=", ":z3=^M:O`Kzfq/:aJMw", (String) null, ".)XnxH}}@,}", "#PKL/n~(,vP!C", (String) null, "8-~FQ)Rr#O8", curriculum0, (-2744), 44, 685, 1430, 1796, 675, 1131, 0.0, (-1.0), 1430, 2168, 1796, (-3487), 685, 3, 1131);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-62), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1430, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3901.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3640, curriculum0.getMinNumberOfTerms());
      assertEquals("8-~FQ)Rr#O8", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2744), curriculum0.getMaxNumberOfTerms());
      assertEquals(1796, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(675, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1796, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("5#u+DP~ `W]DOn", student0.getNationalId());
      assertEquals(":z3=^M:O`Kzfq/:aJMw", student0.getDisabilities());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("com.google.common.base.Suppliers$SupplierFunctionImpl", student0.getPlaceOfBirth());
      assertEquals(1430, student0.getOptionalCredits());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getAdmissionStr());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals("5#u+DP~ `W]DOn", student0.getName());
      assertEquals("#PKL/n~(,vP!C", student0.getSecondarySchoolGraduationYear());
      assertEquals("(PxJ=cnjN7:<X>OIw", student0.getRace());
      assertEquals("5#u+DP~ `W]DOn", student0.getBirthDate());
      assertNull(student0.getCourseCode());
      assertEquals(1796, student0.getSuspendedTerms());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("5#u+DP~ `W]DOn", student0.getEmail());
      assertEquals("P{>@(|Cx}') {c", student0.getGender());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getCountry());
      assertEquals(685, student0.getMobilityTerms());
      assertEquals(44, student0.getMandatoryCredits());
      assertEquals(2149, student0.getCompletedCredits());
      assertNull(student0.getAffirmativePolicy());
      assertEquals((-2744), student0.getMandatoryHours());
      assertEquals(", enrolledCredits=", student0.getNationality());
      assertEquals(685, student0.getOptionalHours());
      assertEquals(675, student0.getComplementaryCredits());
      assertEquals("com.google.common.base.Suppliers$SupplierFunctionImpl", student0.getMaritalStatus());
      assertEquals("8-~FQ)Rr#O8", student0.getCurriculumCode());
      assertEquals(1796, student0.getComplementaryHours());
      assertEquals("", student0.getStatusTerm());
      assertEquals(1430.0, student0.getIea(), 0.01);
      assertEquals(".)XnxH}}@,}", student0.getSecondarySchool());
      assertEquals(1131, student0.getAttemptedCredits());
      assertEquals((-3487), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("P{>@(|Cx}') {c", student0.getStatusStr());
      assertEquals(", optionalHours=", student0.getAdmissionTerm());
      assertEquals(1131.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(2168, student0.getCompletedTerms());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayDeque0.contains("8-~FQ)Rr#O8"));
      assertNotNull(student0);
      
      Curriculum curriculum1 = student0.getCurriculum();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-62), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1430, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3901.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3640, curriculum0.getMinNumberOfTerms());
      assertEquals("8-~FQ)Rr#O8", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2744), curriculum0.getMaxNumberOfTerms());
      assertEquals(1796, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(675, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1796, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("5#u+DP~ `W]DOn", student0.getNationalId());
      assertEquals(":z3=^M:O`Kzfq/:aJMw", student0.getDisabilities());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("com.google.common.base.Suppliers$SupplierFunctionImpl", student0.getPlaceOfBirth());
      assertEquals(1430, student0.getOptionalCredits());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getAdmissionStr());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals("5#u+DP~ `W]DOn", student0.getName());
      assertEquals("#PKL/n~(,vP!C", student0.getSecondarySchoolGraduationYear());
      assertEquals("(PxJ=cnjN7:<X>OIw", student0.getRace());
      assertEquals("5#u+DP~ `W]DOn", student0.getBirthDate());
      assertNull(student0.getCourseCode());
      assertEquals(1796, student0.getSuspendedTerms());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("5#u+DP~ `W]DOn", student0.getEmail());
      assertEquals("P{>@(|Cx}') {c", student0.getGender());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getCountry());
      assertEquals(685, student0.getMobilityTerms());
      assertEquals(44, student0.getMandatoryCredits());
      assertEquals(2149, student0.getCompletedCredits());
      assertNull(student0.getAffirmativePolicy());
      assertEquals((-2744), student0.getMandatoryHours());
      assertEquals(", enrolledCredits=", student0.getNationality());
      assertEquals(685, student0.getOptionalHours());
      assertEquals(675, student0.getComplementaryCredits());
      assertEquals("com.google.common.base.Suppliers$SupplierFunctionImpl", student0.getMaritalStatus());
      assertEquals("8-~FQ)Rr#O8", student0.getCurriculumCode());
      assertEquals(1796, student0.getComplementaryHours());
      assertEquals("", student0.getStatusTerm());
      assertEquals(1430.0, student0.getIea(), 0.01);
      assertEquals(".)XnxH}}@,}", student0.getSecondarySchool());
      assertEquals(1131, student0.getAttemptedCredits());
      assertEquals((-3487), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("P{>@(|Cx}') {c", student0.getStatusStr());
      assertEquals(", optionalHours=", student0.getAdmissionTerm());
      assertEquals(1131.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(2168, student0.getCompletedTerms());
      assertEquals(0, curriculum1.getMinActivitiesNeeded());
      assertEquals(0, curriculum1.getMinMandatoryCreditsNeeded());
      assertEquals(1796, curriculum1.getMinNumberOfEnrolledCredits());
      assertEquals("8-~FQ)Rr#O8", curriculum1.getCourseCode());
      assertEquals("", curriculum1.getCurriculumCode());
      assertEquals((-2744), curriculum1.getMaxNumberOfTerms());
      assertEquals((-62), curriculum1.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum1.getMaxNumberOfEnrolledCredits());
      assertEquals(1430, curriculum1.getMinElectiveCreditsNeeded());
      assertEquals(3640, curriculum1.getMinNumberOfTerms());
      assertEquals(675, curriculum1.getMinComplementaryCreditsNeeded());
      assertEquals(3901.0, curriculum1.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1796, curriculum1.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(arrayDeque0.contains("8-~FQ)Rr#O8"));
      assertNotNull(curriculum1);
      assertSame(curriculum0, curriculum1);
      assertSame(curriculum1, curriculum0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Curriculum curriculum0 = new Curriculum((String) null, "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-59), 1521, (-59), 2215, 8, 8, 0, 0, 0, 1521, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(3618.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1521, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1521, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(8, curriculum0.getMinNumberOfTerms());
      assertEquals((-59), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2215, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-59), curriculum0.getMinMandatoryCreditsNeeded());
      assertFalse(linkedList0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "com.google.common.base.CharMatcher$BitSetMatcher", "", "R641./8<SxzcmWsBY", "", "PFZ9z.f]k#nMpk,zBK", "", "com.google.common.base.CharMatcher$BitSetMatcher", "", "'H/Y7=", "PFZ9z.f]k#nMpk,zBK", "", studentStatus0, "", "'H/Y7=", ".?jEGKS", "", ".?jEGKS", "", (String) null, ".?jEGKS", "PFZ9z.f]k#nMpk,zBK", curriculum0, 2215, (-448), 2215, 65535, 0, (-448), 1521, 65535, 2215, 0, 155, 0, 2956, 0, 39, 0.0);
      assertEquals(0, linkedList0.size());
      assertEquals(3618.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1521, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1521, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(8, curriculum0.getMinNumberOfTerms());
      assertEquals((-59), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2215, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-59), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("R641./8<SxzcmWsBY", student0.getBirthDate());
      assertEquals(".?jEGKS", student0.getCourseCode());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getName());
      assertEquals("'H/Y7=", student0.getAdmissionStr());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getCountry());
      assertEquals(".?jEGKS", student0.getAffirmativePolicy());
      assertEquals(2215.0, student0.getMc(), 0.01);
      assertEquals(2215, student0.getOptionalHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1521, student0.getAttemptedCredits());
      assertEquals("'H/Y7=", student0.getPlaceOfBirth());
      assertEquals(39, student0.getEnrolledCredits());
      assertEquals("PFZ9z.f]k#nMpk,zBK", student0.getRace());
      assertEquals(155, student0.getCompletedTerms());
      assertEquals("com.google.common.base.CharMatcher$BitSetMatcher", student0.getNationality());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(2956, student0.getInstitutionalEnrollments());
      assertEquals("PFZ9z.f]k#nMpk,zBK", student0.getGender());
      assertEquals("com.google.common.base.CharMatcher$BitSetMatcher", student0.getNationalId());
      assertEquals(65535.0, student0.getGpa(), 0.01);
      assertEquals(65535, student0.getOptionalCredits());
      assertEquals(64639, student0.getCompletedCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("PFZ9z.f]k#nMpk,zBK", student0.getCurriculumCode());
      assertEquals(2215, student0.getMandatoryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(".?jEGKS", student0.getAdmissionTerm());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-448), student0.getComplementaryCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-448), student0.getMandatoryCredits());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertFalse(linkedList0.contains(".?jEGKS"));
      assertNotNull(student0);
      
      Curriculum curriculum1 = student0.getCurriculum();
      assertEquals(0, linkedList0.size());
      assertEquals(3618.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1521, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1521, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(8, curriculum0.getMinNumberOfTerms());
      assertEquals((-59), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2215, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-59), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("R641./8<SxzcmWsBY", student0.getBirthDate());
      assertEquals(".?jEGKS", student0.getCourseCode());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getName());
      assertEquals("'H/Y7=", student0.getAdmissionStr());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getCountry());
      assertEquals(".?jEGKS", student0.getAffirmativePolicy());
      assertEquals(2215.0, student0.getMc(), 0.01);
      assertEquals(2215, student0.getOptionalHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1521, student0.getAttemptedCredits());
      assertEquals("'H/Y7=", student0.getPlaceOfBirth());
      assertEquals(39, student0.getEnrolledCredits());
      assertEquals("PFZ9z.f]k#nMpk,zBK", student0.getRace());
      assertEquals(155, student0.getCompletedTerms());
      assertEquals("com.google.common.base.CharMatcher$BitSetMatcher", student0.getNationality());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(2956, student0.getInstitutionalEnrollments());
      assertEquals("PFZ9z.f]k#nMpk,zBK", student0.getGender());
      assertEquals("com.google.common.base.CharMatcher$BitSetMatcher", student0.getNationalId());
      assertEquals(65535.0, student0.getGpa(), 0.01);
      assertEquals(65535, student0.getOptionalCredits());
      assertEquals(64639, student0.getCompletedCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("PFZ9z.f]k#nMpk,zBK", student0.getCurriculumCode());
      assertEquals(2215, student0.getMandatoryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(".?jEGKS", student0.getAdmissionTerm());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-448), student0.getComplementaryCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-448), student0.getMandatoryCredits());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, curriculum1.getMaxNumberOfTerms());
      assertEquals(2215, curriculum1.getMinComplementaryCreditsNeeded());
      assertEquals(1521, curriculum1.getMinOptionalCreditsNeeded());
      assertEquals((-59), curriculum1.getMinElectiveCreditsNeeded());
      assertNull(curriculum1.getCourseCode());
      assertEquals(8, curriculum1.getMinNumberOfTerms());
      assertEquals((-59), curriculum1.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum1.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum1.getMinNumberOfEnrolledCredits());
      assertEquals(8, curriculum1.getMinActivitiesNeeded());
      assertEquals(3618.0, curriculum1.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1521, curriculum1.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum1.getCurriculumCode());
      assertFalse(linkedList0.contains(".?jEGKS"));
      assertNotNull(curriculum1);
      assertSame(curriculum0, curriculum1);
      assertSame(curriculum1, curriculum0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum("1bnfQN", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1684), (-302), (-302), 0, 1198, 0, 0, (-3166), (-302), (-302), hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-2288.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-302), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1198, curriculum0.getMinActivitiesNeeded());
      assertEquals("1bnfQN", curriculum0.getCourseCode());
      assertEquals((-302), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1684), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-302), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-302), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3166), curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(hashSet0.contains("1bnfQN"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("com.google.common.base.CharMatcher$SingleWidth", "com.google.common.base.CharMatcher$SingleWidth", "com.google.common.base.CharMatcher$SingleWidth", "Student{registration='", ", courseCode='", "T-", "]QV|jO>vF-T;[Meh!", "1bnfQN", "0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10", "com.google.common.base.CharMatcher$SingleWidth", "WN78Q", "com.google.common.base.CharMatcher$SingleWidth", studentStatus0, "L1T", "0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10", (String) null, ", courseCode='", ", optionalCredits=", ", idealElectiveCreditsList=", "com.google.common.collect.AbstractMultiset", ", status=", ", optionalCredits=", curriculum0, (-2756), (-3166), (-12931), (-302), 0, 125, 125, 0, 0.0, 0, 527, 1905, 527, 1073741823, 1653, 0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-2288.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-302), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1198, curriculum0.getMinActivitiesNeeded());
      assertEquals("1bnfQN", curriculum0.getCourseCode());
      assertEquals((-302), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1684), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-302), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-302), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3166), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", optionalCredits=", student0.getAffirmativePolicy());
      assertEquals(1905, student0.getSuspendedTerms());
      assertEquals(", optionalCredits=", student0.getCurriculumCode());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getNationalId());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("]QV|jO>vF-T;[Meh!", student0.getMaritalStatus());
      assertEquals(", courseCode='", student0.getEmail());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", status=", student0.getCourseCode());
      assertEquals("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10", student0.getCountry());
      assertEquals("T-", student0.getGender());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getName());
      assertEquals((-3166), student0.getMandatoryCredits());
      assertEquals(", courseCode='", student0.getDisabilities());
      assertEquals(125, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getPlaceOfBirth());
      assertEquals(1653, student0.getEnrolledCredits());
      assertEquals((-2756), student0.getMandatoryHours());
      assertEquals("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10", student0.getAdmissionStr());
      assertEquals(", idealElectiveCreditsList=", student0.getSecondarySchool());
      assertEquals(527, student0.getCompletedTerms());
      assertEquals("WN78Q", student0.getRace());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-302), student0.getOptionalCredits());
      assertEquals((-3343), student0.getCompletedCredits());
      assertNull(student0.getAdmissionTerm());
      assertEquals(125, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("L1T", student0.getStatusTerm());
      assertEquals(1073741823, student0.getMobilityTerms());
      assertEquals("Student{registration='", student0.getBirthDate());
      assertEquals(527, student0.getInstitutionalEnrollments());
      assertEquals("1bnfQN", student0.getNationality());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getStatusStr());
      assertEquals("com.google.common.collect.AbstractMultiset", student0.getSecondarySchoolGraduationYear());
      assertEquals((-12931), student0.getOptionalHours());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertFalse(hashSet0.contains(", courseCode='"));
      assertNotNull(student0);
      
      Curriculum curriculum1 = student0.getCurriculum();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-2288.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-302), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1198, curriculum0.getMinActivitiesNeeded());
      assertEquals("1bnfQN", curriculum0.getCourseCode());
      assertEquals((-302), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1684), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-302), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-302), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-3166), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", optionalCredits=", student0.getAffirmativePolicy());
      assertEquals(1905, student0.getSuspendedTerms());
      assertEquals(", optionalCredits=", student0.getCurriculumCode());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getNationalId());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("]QV|jO>vF-T;[Meh!", student0.getMaritalStatus());
      assertEquals(", courseCode='", student0.getEmail());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(", status=", student0.getCourseCode());
      assertEquals("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10", student0.getCountry());
      assertEquals("T-", student0.getGender());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getName());
      assertEquals((-3166), student0.getMandatoryCredits());
      assertEquals(", courseCode='", student0.getDisabilities());
      assertEquals(125, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getPlaceOfBirth());
      assertEquals(1653, student0.getEnrolledCredits());
      assertEquals((-2756), student0.getMandatoryHours());
      assertEquals("0\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0DE6\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1A80\u1A90\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uA9D0\uA9F0\uAA50\uABF0\uFF10", student0.getAdmissionStr());
      assertEquals(", idealElectiveCreditsList=", student0.getSecondarySchool());
      assertEquals(527, student0.getCompletedTerms());
      assertEquals("WN78Q", student0.getRace());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-302), student0.getOptionalCredits());
      assertEquals((-3343), student0.getCompletedCredits());
      assertNull(student0.getAdmissionTerm());
      assertEquals(125, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("L1T", student0.getStatusTerm());
      assertEquals(1073741823, student0.getMobilityTerms());
      assertEquals("Student{registration='", student0.getBirthDate());
      assertEquals(527, student0.getInstitutionalEnrollments());
      assertEquals("1bnfQN", student0.getNationality());
      assertEquals("com.google.common.base.CharMatcher$SingleWidth", student0.getStatusStr());
      assertEquals("com.google.common.collect.AbstractMultiset", student0.getSecondarySchoolGraduationYear());
      assertEquals((-12931), student0.getOptionalHours());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0, curriculum1.getMaxNumberOfTerms());
      assertEquals((-302), curriculum1.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum1.getCurriculumCode());
      assertEquals(0, curriculum1.getMinNumberOfTerms());
      assertEquals((-302), curriculum1.getMinOptionalCreditsNeeded());
      assertEquals((-1684), curriculum1.getMinMandatoryCreditsNeeded());
      assertEquals((-2288.0), curriculum1.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1198, curriculum1.getMinActivitiesNeeded());
      assertEquals((-302), curriculum1.getMinElectiveCreditsNeeded());
      assertEquals("1bnfQN", curriculum1.getCourseCode());
      assertEquals(0, curriculum1.getMinComplementaryCreditsNeeded());
      assertEquals((-302), curriculum1.getMaxNumberOfEnrolledCredits());
      assertEquals((-3166), curriculum1.getMinNumberOfEnrolledCredits());
      assertFalse(hashSet0.contains(", courseCode='"));
      assertNotNull(curriculum1);
      assertSame(curriculum0, curriculum1);
      assertSame(curriculum1, curriculum0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("BuFgs4a-k-yV,", ", mandatoryHours=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 2530, 10, 5, 2530, 0, 10, 0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2530, curriculum0.getMaxNumberOfTerms());
      assertEquals(", mandatoryHours=", curriculum0.getCurriculumCode());
      assertEquals(10, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2530, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(10, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2530.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("BuFgs4a-k-yV,", curriculum0.getCourseCode());
      assertFalse(linkedHashSet0.contains("BuFgs4a-k-yV,"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("FGy4ZbWWvZ)8Lpp", "M.p92m<R", (String) null, "NV`/R^b(,4W'", "", ", disabilities='", "FGy4ZbWWvZ)8Lpp", "", "FGy4ZbWWvZ)8Lpp", (String) null, ", disabilities='", "", studentStatus0, ", mandatoryHours=", "= 9x0By>Dc%5!", ", disabilities='", "", "", ", disabilities='", "", (String) null, "M.p92m<R", curriculum0, 2269, 10, 2530, (-2758), 1133, (-2758), 2050, 4152.1411272781, 0.0, 5, 7, 1133, 0, 3633, 1912, 3633);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2530, curriculum0.getMaxNumberOfTerms());
      assertEquals(", mandatoryHours=", curriculum0.getCurriculumCode());
      assertEquals(10, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2530, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(10, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2530.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("BuFgs4a-k-yV,", curriculum0.getCourseCode());
      assertEquals(", disabilities='", student0.getSecondarySchool());
      assertEquals(1133, student0.getSuspendedTerms());
      assertEquals("", student0.getEmail());
      assertEquals(2050, student0.getAttemptedCredits());
      assertEquals(", disabilities='", student0.getAdmissionTerm());
      assertEquals(5.0, student0.getIea(), 0.01);
      assertEquals("= 9x0By>Dc%5!", student0.getAdmissionStr());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4152.1411272781, student0.getGpa(), 0.01);
      assertEquals(1912, student0.getEnrolledCredits());
      assertEquals("", student0.getDisabilities());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("FGy4ZbWWvZ)8Lpp", student0.getCountry());
      assertEquals("", student0.getStatusStr());
      assertEquals(7, student0.getCompletedTerms());
      assertEquals("NV`/R^b(,4W'", student0.getBirthDate());
      assertEquals(1133, student0.getComplementaryHours());
      assertEquals("", student0.getNationality());
      assertEquals(2269, student0.getMandatoryHours());
      assertEquals(10, student0.getMandatoryCredits());
      assertEquals(", mandatoryHours=", student0.getStatusTerm());
      assertEquals(2530, student0.getOptionalHours());
      assertEquals((-5506), student0.getCompletedCredits());
      assertEquals(3633.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-2758), student0.getOptionalCredits());
      assertNull(student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("M.p92m<R", student0.getCurriculumCode());
      assertEquals((-2758), student0.getComplementaryCredits());
      assertEquals(", disabilities='", student0.getRace());
      assertEquals("M.p92m<R", student0.getNationalId());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(3633, student0.getMobilityTerms());
      assertNull(student0.getName());
      assertEquals("FGy4ZbWWvZ)8Lpp", student0.getMaritalStatus());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertNull(student0.getPlaceOfBirth());
      assertEquals(", disabilities='", student0.getGender());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(student0);
      
      String string0 = student0.getCourseCode();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2530, curriculum0.getMaxNumberOfTerms());
      assertEquals(", mandatoryHours=", curriculum0.getCurriculumCode());
      assertEquals(10, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2530, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(10, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2530.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("BuFgs4a-k-yV,", curriculum0.getCourseCode());
      assertEquals(", disabilities='", student0.getSecondarySchool());
      assertEquals(1133, student0.getSuspendedTerms());
      assertEquals("", student0.getEmail());
      assertEquals(2050, student0.getAttemptedCredits());
      assertEquals(", disabilities='", student0.getAdmissionTerm());
      assertEquals(5.0, student0.getIea(), 0.01);
      assertEquals("= 9x0By>Dc%5!", student0.getAdmissionStr());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4152.1411272781, student0.getGpa(), 0.01);
      assertEquals(1912, student0.getEnrolledCredits());
      assertEquals("", student0.getDisabilities());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("FGy4ZbWWvZ)8Lpp", student0.getCountry());
      assertEquals("", student0.getStatusStr());
      assertEquals(7, student0.getCompletedTerms());
      assertEquals("NV`/R^b(,4W'", student0.getBirthDate());
      assertEquals(1133, student0.getComplementaryHours());
      assertEquals("", student0.getNationality());
      assertEquals(2269, student0.getMandatoryHours());
      assertEquals(10, student0.getMandatoryCredits());
      assertEquals(", mandatoryHours=", student0.getStatusTerm());
      assertEquals(2530, student0.getOptionalHours());
      assertEquals((-5506), student0.getCompletedCredits());
      assertEquals(3633.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-2758), student0.getOptionalCredits());
      assertNull(student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("M.p92m<R", student0.getCurriculumCode());
      assertEquals((-2758), student0.getComplementaryCredits());
      assertEquals(", disabilities='", student0.getRace());
      assertEquals("M.p92m<R", student0.getNationalId());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(3633, student0.getMobilityTerms());
      assertNull(student0.getName());
      assertEquals("FGy4ZbWWvZ)8Lpp", student0.getMaritalStatus());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertNull(student0.getPlaceOfBirth());
      assertEquals(", disabilities='", student0.getGender());
      assertFalse(linkedHashSet0.contains(""));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "", "", "", "", ">!1L1 ", "", "CANCELAMENTO POR ABANDONO", "CANCELAMENTO POR ABANDONO", "Functions.constant(", "<@]kX]48waqpt%", studentStatus0, "<@]kX]48waqpt%", "&],", ", statusStr='", ", statusStr='", ", statusStr='", "l0v*2@N]{O]%3_:", "Functions.constant(", ", statusStr='", "$e7WZ", (Curriculum) null, 125, 125, 2361, 539, 8247, (-1177), 0, 653.654255099155, 4.0, 539, 0, 40, 0, 0, 8247, 0.0);
      assertEquals(", statusStr='", student0.getDisabilities());
      assertEquals("", student0.getGender());
      assertEquals(539.0, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("Functions.constant(", student0.getRace());
      assertEquals("", student0.getNationalId());
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals(8247, student0.getComplementaryHours());
      assertEquals("$e7WZ", student0.getCurriculumCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getCountry());
      assertEquals("&],", student0.getAdmissionStr());
      assertEquals("", student0.getName());
      assertEquals(">!1L1 ", student0.getMaritalStatus());
      assertEquals("", student0.getBirthDate());
      assertEquals(", statusStr='", student0.getAffirmativePolicy());
      assertEquals(8247, student0.getEnrolledCredits());
      assertEquals(653.654255099155, student0.getGpa(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals(40, student0.getSuspendedTerms());
      assertEquals("l0v*2@N]{O]%3_:", student0.getSecondarySchool());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals("<@]kX]48waqpt%", student0.getStatusStr());
      assertEquals(539, student0.getOptionalCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", statusStr='", student0.getCourseCode());
      assertEquals("Functions.constant(", student0.getSecondarySchoolGraduationYear());
      assertEquals(2361, student0.getOptionalHours());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", statusStr='", student0.getAdmissionTerm());
      assertEquals(125, student0.getMandatoryHours());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getEmail());
      assertEquals("<@]kX]48waqpt%", student0.getStatusTerm());
      assertEquals((-1177), student0.getComplementaryCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-513), student0.getCompletedCredits());
      assertNotNull(student0);
      
      String string0 = student0.getCourseCode();
      assertEquals(", statusStr='", student0.getDisabilities());
      assertEquals("", student0.getGender());
      assertEquals(539.0, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("Functions.constant(", student0.getRace());
      assertEquals("", student0.getNationalId());
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals(8247, student0.getComplementaryHours());
      assertEquals("$e7WZ", student0.getCurriculumCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getCountry());
      assertEquals("&],", student0.getAdmissionStr());
      assertEquals("", student0.getName());
      assertEquals(">!1L1 ", student0.getMaritalStatus());
      assertEquals("", student0.getBirthDate());
      assertEquals(", statusStr='", student0.getAffirmativePolicy());
      assertEquals(8247, student0.getEnrolledCredits());
      assertEquals(653.654255099155, student0.getGpa(), 0.01);
      assertEquals("", student0.getNationality());
      assertEquals(40, student0.getSuspendedTerms());
      assertEquals("l0v*2@N]{O]%3_:", student0.getSecondarySchool());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals("<@]kX]48waqpt%", student0.getStatusStr());
      assertEquals(539, student0.getOptionalCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", statusStr='", student0.getCourseCode());
      assertEquals("Functions.constant(", student0.getSecondarySchoolGraduationYear());
      assertEquals(2361, student0.getOptionalHours());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", statusStr='", student0.getAdmissionTerm());
      assertEquals(125, student0.getMandatoryHours());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getEmail());
      assertEquals("<@]kX]48waqpt%", student0.getStatusTerm());
      assertEquals((-1177), student0.getComplementaryCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-513), student0.getCompletedCredits());
      assertEquals(", statusStr='", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(".v_tMLKNcJg%", ".v_tMLKNcJg%", "vE,aR!&[", ".v_tMLKNcJg%", "", "", "", (String) null, (String) null, "", "`m[fH5cd'h~K=2x+[\"{", ", suspendedTerms=", studentStatus0, ".v_tMLKNcJg%", "Predicates.subtypeOf(", ", suspendedTerms=", "", "6vwU~~`\"(0", (String) null, "", "K$YQ", "yqjcV'y0cB", (Curriculum) null, (-1941), (-1941), (-1941), (-1941), (-1941), 1307, 0, 4.0, 0, (-1941), 0, 5, (-1563), 0, (-2432), (-1941));
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("yqjcV'y0cB", student0.getCurriculumCode());
      assertEquals("", student0.getEmail());
      assertEquals(".v_tMLKNcJg%", student0.getStatusTerm());
      assertEquals(", suspendedTerms=", student0.getAdmissionTerm());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-2575), student0.getCompletedCredits());
      assertEquals((-2432), student0.getEnrolledCredits());
      assertEquals("`m[fH5cd'h~K=2x+[\"{", student0.getRace());
      assertEquals(".v_tMLKNcJg%", student0.getNationalId());
      assertEquals(1307, student0.getComplementaryCredits());
      assertEquals((-1941), student0.getMandatoryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1941), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals((-1941), student0.getOptionalHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-1941), student0.getComplementaryHours());
      assertEquals(5, student0.getSuspendedTerms());
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(", suspendedTerms=", student0.getStatusStr());
      assertEquals("K$YQ", student0.getCourseCode());
      assertNull(student0.getNationality());
      assertEquals(".v_tMLKNcJg%", student0.getBirthDate());
      assertNull(student0.getSecondarySchool());
      assertEquals("Predicates.subtypeOf(", student0.getAdmissionStr());
      assertEquals("6vwU~~`\"(0", student0.getAffirmativePolicy());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-1941), student0.getMandatoryCredits());
      assertEquals((-1563), student0.getInstitutionalEnrollments());
      assertEquals((-1941.0), student0.getIea(), 0.01);
      assertEquals("vE,aR!&[", student0.getName());
      assertEquals((-1941.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getDisabilities());
      assertNotNull(student0);
      
      String string0 = student0.getCountry();
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("yqjcV'y0cB", student0.getCurriculumCode());
      assertEquals("", student0.getEmail());
      assertEquals(".v_tMLKNcJg%", student0.getStatusTerm());
      assertEquals(", suspendedTerms=", student0.getAdmissionTerm());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-2575), student0.getCompletedCredits());
      assertEquals((-2432), student0.getEnrolledCredits());
      assertEquals("`m[fH5cd'h~K=2x+[\"{", student0.getRace());
      assertEquals(".v_tMLKNcJg%", student0.getNationalId());
      assertEquals(1307, student0.getComplementaryCredits());
      assertEquals((-1941), student0.getMandatoryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-1941), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals((-1941), student0.getOptionalHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-1941), student0.getComplementaryHours());
      assertEquals(5, student0.getSuspendedTerms());
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(", suspendedTerms=", student0.getStatusStr());
      assertEquals("K$YQ", student0.getCourseCode());
      assertNull(student0.getNationality());
      assertEquals(".v_tMLKNcJg%", student0.getBirthDate());
      assertNull(student0.getSecondarySchool());
      assertEquals("Predicates.subtypeOf(", student0.getAdmissionStr());
      assertEquals("6vwU~~`\"(0", student0.getAffirmativePolicy());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals((-1941), student0.getMandatoryCredits());
      assertEquals((-1563), student0.getInstitutionalEnrollments());
      assertEquals((-1941.0), student0.getIea(), 0.01);
      assertEquals("vE,aR!&[", student0.getName());
      assertEquals((-1941.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getDisabilities());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("pattern.flags", "Functions.toStringFunction()", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 3540, 314, 314, 314, 314, 3540, (-71), 3540, 314, 2603, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(314, curriculum0.getMinActivitiesNeeded());
      assertEquals(3540, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2603, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(314, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(314, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("pattern.flags", curriculum0.getCourseCode());
      assertEquals(314, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(314, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4482.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Functions.toStringFunction()", curriculum0.getCurriculumCode());
      assertEquals(3540, curriculum0.getMinNumberOfTerms());
      assertEquals((-71), curriculum0.getMaxNumberOfTerms());
      assertEquals(3540, curriculum0.getMinNumberOfEnrolledCredits());
      assertFalse(arrayDeque0.contains("pattern.flags"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("rX tRK%KxBlzrQLk", "!O^Xb_", "", "rX tRK%KxBlzrQLk", ", attemptedCredits=", "", "*", "oB+3QZb#G=PMZ%KO7{", "", "", "oB+3QZb#G=PMZ%KO7{", "pattern.flags", studentStatus0, "!O^Xb_", "!O^Xb_", "TO7po4-.$QqD^O~ ", "pattern.flags", "", ", attemptedCredits=", ", attemptedCredits=", (String) null, "", curriculum0, (-255), (-255), 9, (-194), 314, 2603, (-939), (-71), (-939), (-71), 11, (-194), 1102, 0, 0, (-194));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(314, curriculum0.getMinActivitiesNeeded());
      assertEquals(3540, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2603, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(314, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(314, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("pattern.flags", curriculum0.getCourseCode());
      assertEquals(314, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(314, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4482.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Functions.toStringFunction()", curriculum0.getCurriculumCode());
      assertEquals(3540, curriculum0.getMinNumberOfTerms());
      assertEquals((-71), curriculum0.getMaxNumberOfTerms());
      assertEquals(3540, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-255), student0.getMandatoryHours());
      assertEquals(", attemptedCredits=", student0.getSecondarySchool());
      assertEquals("", student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(2154, student0.getCompletedCredits());
      assertEquals((-939.0), student0.getMc(), 0.01);
      assertEquals("pattern.flags", student0.getStatusStr());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-255), student0.getMandatoryCredits());
      assertEquals("!O^Xb_", student0.getStatusTerm());
      assertEquals((-71.0), student0.getGpa(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-194), student0.getSuspendedTerms());
      assertEquals("TO7po4-.$QqD^O~ ", student0.getAdmissionTerm());
      assertEquals(", attemptedCredits=", student0.getEmail());
      assertNull(student0.getCourseCode());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("", student0.getName());
      assertEquals(", attemptedCredits=", student0.getSecondarySchoolGraduationYear());
      assertEquals("*", student0.getMaritalStatus());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("oB+3QZb#G=PMZ%KO7{", student0.getRace());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-194.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-939), student0.getAttemptedCredits());
      assertEquals("!O^Xb_", student0.getNationalId());
      assertEquals(9, student0.getOptionalHours());
      assertEquals(2603, student0.getComplementaryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals("pattern.flags", student0.getDisabilities());
      assertEquals((-194), student0.getOptionalCredits());
      assertEquals(11, student0.getCompletedTerms());
      assertEquals("rX tRK%KxBlzrQLk", student0.getBirthDate());
      assertEquals(1102, student0.getInstitutionalEnrollments());
      assertEquals((-71.0), student0.getIea(), 0.01);
      assertEquals(314, student0.getComplementaryHours());
      assertEquals("!O^Xb_", student0.getAdmissionStr());
      assertEquals("oB+3QZb#G=PMZ%KO7{", student0.getNationality());
      assertFalse(arrayDeque0.contains("!O^Xb_"));
      assertNotNull(student0);
      
      String string0 = student0.getCountry();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(314, curriculum0.getMinActivitiesNeeded());
      assertEquals(3540, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2603, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(314, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(314, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("pattern.flags", curriculum0.getCourseCode());
      assertEquals(314, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(314, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(4482.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Functions.toStringFunction()", curriculum0.getCurriculumCode());
      assertEquals(3540, curriculum0.getMinNumberOfTerms());
      assertEquals((-71), curriculum0.getMaxNumberOfTerms());
      assertEquals(3540, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-255), student0.getMandatoryHours());
      assertEquals(", attemptedCredits=", student0.getSecondarySchool());
      assertEquals("", student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(2154, student0.getCompletedCredits());
      assertEquals((-939.0), student0.getMc(), 0.01);
      assertEquals("pattern.flags", student0.getStatusStr());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-255), student0.getMandatoryCredits());
      assertEquals("!O^Xb_", student0.getStatusTerm());
      assertEquals((-71.0), student0.getGpa(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-194), student0.getSuspendedTerms());
      assertEquals("TO7po4-.$QqD^O~ ", student0.getAdmissionTerm());
      assertEquals(", attemptedCredits=", student0.getEmail());
      assertNull(student0.getCourseCode());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("", student0.getName());
      assertEquals(", attemptedCredits=", student0.getSecondarySchoolGraduationYear());
      assertEquals("*", student0.getMaritalStatus());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("oB+3QZb#G=PMZ%KO7{", student0.getRace());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-194.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-939), student0.getAttemptedCredits());
      assertEquals("!O^Xb_", student0.getNationalId());
      assertEquals(9, student0.getOptionalHours());
      assertEquals(2603, student0.getComplementaryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals("pattern.flags", student0.getDisabilities());
      assertEquals((-194), student0.getOptionalCredits());
      assertEquals(11, student0.getCompletedTerms());
      assertEquals("rX tRK%KxBlzrQLk", student0.getBirthDate());
      assertEquals(1102, student0.getInstitutionalEnrollments());
      assertEquals((-71.0), student0.getIea(), 0.01);
      assertEquals(314, student0.getComplementaryHours());
      assertEquals("!O^Xb_", student0.getAdmissionStr());
      assertEquals("oB+3QZb#G=PMZ%KO7{", student0.getNationality());
      assertFalse(arrayDeque0.contains("!O^Xb_"));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Curriculum curriculum0 = new Curriculum(", gpa=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 125, 125, 2, (-678), 2, 2, (-678), 306654252, 125, 306654252, set0, set0, set0, set0, stack0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals((-426.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(306654252, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-678), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", gpa=", curriculum0.getCourseCode());
      assertEquals(2, curriculum0.getMinNumberOfTerms());
      assertEquals(2, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2, curriculum0.getMinActivitiesNeeded());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(306654252, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-678), curriculum0.getMaxNumberOfTerms());
      assertFalse(arrayList0.contains(2));
      assertFalse(set0.contains(""));
      assertFalse(stack0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("H$lO5Z$W5@", (String) null, "H$lO5Z$W5@", "H$lO5Z$W5@", (String) null, "H$lO5Z$W5@", "PsmiMxd*M*Bc9XtW", (String) null, "H$lO5Z$W5@", (String) null, "PsmiMxd*M*Bc9XtW", (String) null, studentStatus0, "H$lO5Z$W5@", ">sNkncN", "T", ">sNkncN", "Gt$ye.", ">sNkncN", "iWLzXu9wxktkgp`z", ">sNkncN", "", curriculum0, 306654252, (-2066), 306654252, (-678), 2, 0, 0, (-2592.0), (-1467.1374129), 306654252, 2, (-678), 306654252, (-3411), 4, (-2592.0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals((-426.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(306654252, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-678), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", gpa=", curriculum0.getCourseCode());
      assertEquals(2, curriculum0.getMinNumberOfTerms());
      assertEquals(2, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2, curriculum0.getMinActivitiesNeeded());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(306654252, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-678), curriculum0.getMaxNumberOfTerms());
      assertEquals((-678), student0.getOptionalCredits());
      assertEquals("H$lO5Z$W5@", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertNull(student0.getStatusStr());
      assertNull(student0.getNationalId());
      assertEquals(306654252, student0.getMandatoryHours());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("T", student0.getAdmissionTerm());
      assertEquals(306654252, student0.getInstitutionalEnrollments());
      assertEquals(2, student0.getCompletedTerms());
      assertEquals("iWLzXu9wxktkgp`z", student0.getSecondarySchoolGraduationYear());
      assertNull(student0.getEmail());
      assertEquals((-1467.1374129), student0.getMc(), 0.01);
      assertEquals(">sNkncN", student0.getSecondarySchool());
      assertEquals("H$lO5Z$W5@", student0.getStatusTerm());
      assertEquals("H$lO5Z$W5@", student0.getName());
      assertEquals((-3411), student0.getMobilityTerms());
      assertEquals(306654252, student0.getOptionalHours());
      assertEquals("PsmiMxd*M*Bc9XtW", student0.getMaritalStatus());
      assertEquals((-2066), student0.getMandatoryCredits());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("H$lO5Z$W5@", student0.getCountry());
      assertEquals(">sNkncN", student0.getDisabilities());
      assertEquals((-2744), student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(3.06654252E8, student0.getIea(), 0.01);
      assertEquals(2, student0.getComplementaryHours());
      assertEquals((-2592.0), student0.getGpa(), 0.01);
      assertEquals((-678), student0.getSuspendedTerms());
      assertEquals(4, student0.getEnrolledCredits());
      assertNull(student0.getNationality());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(">sNkncN", student0.getCourseCode());
      assertEquals(">sNkncN", student0.getAdmissionStr());
      assertEquals("Gt$ye.", student0.getAffirmativePolicy());
      assertEquals((-2592.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("H$lO5Z$W5@", student0.getBirthDate());
      assertEquals("PsmiMxd*M*Bc9XtW", student0.getRace());
      assertFalse(arrayList0.contains(2));
      assertFalse(set0.contains("PsmiMxd*M*Bc9XtW"));
      assertFalse(stack0.contains("PsmiMxd*M*Bc9XtW"));
      assertNotNull(student0);
      
      int int0 = student0.getCompletedTerms();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals((-426.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(306654252, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-678), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", gpa=", curriculum0.getCourseCode());
      assertEquals(2, curriculum0.getMinNumberOfTerms());
      assertEquals(2, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2, curriculum0.getMinActivitiesNeeded());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(306654252, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-678), curriculum0.getMaxNumberOfTerms());
      assertEquals((-678), student0.getOptionalCredits());
      assertEquals("H$lO5Z$W5@", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertNull(student0.getStatusStr());
      assertNull(student0.getNationalId());
      assertEquals(306654252, student0.getMandatoryHours());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("T", student0.getAdmissionTerm());
      assertEquals(306654252, student0.getInstitutionalEnrollments());
      assertEquals(2, student0.getCompletedTerms());
      assertEquals("iWLzXu9wxktkgp`z", student0.getSecondarySchoolGraduationYear());
      assertNull(student0.getEmail());
      assertEquals((-1467.1374129), student0.getMc(), 0.01);
      assertEquals(">sNkncN", student0.getSecondarySchool());
      assertEquals("H$lO5Z$W5@", student0.getStatusTerm());
      assertEquals("H$lO5Z$W5@", student0.getName());
      assertEquals((-3411), student0.getMobilityTerms());
      assertEquals(306654252, student0.getOptionalHours());
      assertEquals("PsmiMxd*M*Bc9XtW", student0.getMaritalStatus());
      assertEquals((-2066), student0.getMandatoryCredits());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("H$lO5Z$W5@", student0.getCountry());
      assertEquals(">sNkncN", student0.getDisabilities());
      assertEquals((-2744), student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(3.06654252E8, student0.getIea(), 0.01);
      assertEquals(2, student0.getComplementaryHours());
      assertEquals((-2592.0), student0.getGpa(), 0.01);
      assertEquals((-678), student0.getSuspendedTerms());
      assertEquals(4, student0.getEnrolledCredits());
      assertNull(student0.getNationality());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(">sNkncN", student0.getCourseCode());
      assertEquals(">sNkncN", student0.getAdmissionStr());
      assertEquals("Gt$ye.", student0.getAffirmativePolicy());
      assertEquals((-2592.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("H$lO5Z$W5@", student0.getBirthDate());
      assertEquals("PsmiMxd*M*Bc9XtW", student0.getRace());
      assertFalse(arrayList0.contains(2));
      assertFalse(set0.contains("PsmiMxd*M*Bc9XtW"));
      assertFalse(stack0.contains("PsmiMxd*M*Bc9XtW"));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("DiscreteDomain.longs()", "DKl", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 8, (-733), 8, (-733), (-2442), (-2442), 858, 1540, 0, 858, vector0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-2442), curriculum0.getMinActivitiesNeeded());
      assertEquals(858, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1450.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("DiscreteDomain.longs()", curriculum0.getCourseCode());
      assertEquals((-2442), curriculum0.getMinNumberOfTerms());
      assertEquals((-733), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("DKl", curriculum0.getCurriculumCode());
      assertEquals(858, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1540, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-733), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains((-733)));
      assertFalse(vector0.contains("DKl"));
      assertFalse(set0.contains("DKl"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("<%j?1x_}(P;Jv", "Azhc", "Azhc", "Azhc", "<%j?1x_}(P;Jv", (String) null, (String) null, (String) null, "0_~AChRwl", "5!2:", "DKl", "Azhc", studentStatus0, "", "eJJWeg_^MAr)*-e]D", "Insensitive", "eJJWeg_^MAr)*-e]D", "wtmnk%", "<%j?1x_}(P;Jv", "eJJWeg_^MAr)*-e]D", (String) null, ".class)", curriculum0, (-733), (-2442), 8, 0, 0, (-1508), 7, (-450.573537812), (-2442), 0.0, (-1691), 8, 0, (-2159), 9, (-951.303798755));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-2442), curriculum0.getMinActivitiesNeeded());
      assertEquals(858, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1450.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("DiscreteDomain.longs()", curriculum0.getCourseCode());
      assertEquals((-2442), curriculum0.getMinNumberOfTerms());
      assertEquals((-733), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("DKl", curriculum0.getCurriculumCode());
      assertEquals(858, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1540, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-733), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-951.303798755), student0.getAdmissionGrade(), 0.01);
      assertEquals("<%j?1x_}(P;Jv", student0.getSecondarySchool());
      assertEquals(9, student0.getEnrolledCredits());
      assertEquals(8, student0.getSuspendedTerms());
      assertEquals("eJJWeg_^MAr)*-e]D", student0.getSecondarySchoolGraduationYear());
      assertEquals("eJJWeg_^MAr)*-e]D", student0.getAdmissionStr());
      assertEquals("5!2:", student0.getPlaceOfBirth());
      assertEquals("0_~AChRwl", student0.getCountry());
      assertEquals((-3950), student0.getCompletedCredits());
      assertNull(student0.getMaritalStatus());
      assertEquals("Insensitive", student0.getAdmissionTerm());
      assertEquals("Azhc", student0.getName());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getStatusTerm());
      assertNull(student0.getCourseCode());
      assertEquals("Azhc", student0.getNationalId());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("Azhc", student0.getStatusStr());
      assertEquals((-2442), student0.getMandatoryCredits());
      assertEquals("<%j?1x_}(P;Jv", student0.getEmail());
      assertEquals("DKl", student0.getRace());
      assertEquals(7, student0.getAttemptedCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("eJJWeg_^MAr)*-e]D", student0.getDisabilities());
      assertEquals((-733), student0.getMandatoryHours());
      assertEquals((-1508), student0.getComplementaryCredits());
      assertEquals(".class)", student0.getCurriculumCode());
      assertEquals((-2442.0), student0.getMc(), 0.01);
      assertEquals((-2159), student0.getMobilityTerms());
      assertEquals(8, student0.getOptionalHours());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertEquals("Azhc", student0.getBirthDate());
      assertEquals("wtmnk%", student0.getAffirmativePolicy());
      assertNull(student0.getNationality());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals((-450.573537812), student0.getGpa(), 0.01);
      assertEquals((-1691), student0.getCompletedTerms());
      assertFalse(arrayList0.contains(858));
      assertFalse(vector0.contains(""));
      assertFalse(set0.contains(""));
      assertNotNull(student0);
      
      int int0 = student0.getCompletedTerms();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-2442), curriculum0.getMinActivitiesNeeded());
      assertEquals(858, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1450.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("DiscreteDomain.longs()", curriculum0.getCourseCode());
      assertEquals((-2442), curriculum0.getMinNumberOfTerms());
      assertEquals((-733), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(8, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("DKl", curriculum0.getCurriculumCode());
      assertEquals(858, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1540, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-733), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(8, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-951.303798755), student0.getAdmissionGrade(), 0.01);
      assertEquals("<%j?1x_}(P;Jv", student0.getSecondarySchool());
      assertEquals(9, student0.getEnrolledCredits());
      assertEquals(8, student0.getSuspendedTerms());
      assertEquals("eJJWeg_^MAr)*-e]D", student0.getSecondarySchoolGraduationYear());
      assertEquals("eJJWeg_^MAr)*-e]D", student0.getAdmissionStr());
      assertEquals("5!2:", student0.getPlaceOfBirth());
      assertEquals("0_~AChRwl", student0.getCountry());
      assertEquals((-3950), student0.getCompletedCredits());
      assertNull(student0.getMaritalStatus());
      assertEquals("Insensitive", student0.getAdmissionTerm());
      assertEquals("Azhc", student0.getName());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getStatusTerm());
      assertNull(student0.getCourseCode());
      assertEquals("Azhc", student0.getNationalId());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("Azhc", student0.getStatusStr());
      assertEquals((-2442), student0.getMandatoryCredits());
      assertEquals("<%j?1x_}(P;Jv", student0.getEmail());
      assertEquals("DKl", student0.getRace());
      assertEquals(7, student0.getAttemptedCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("eJJWeg_^MAr)*-e]D", student0.getDisabilities());
      assertEquals((-733), student0.getMandatoryHours());
      assertEquals((-1508), student0.getComplementaryCredits());
      assertEquals(".class)", student0.getCurriculumCode());
      assertEquals((-2442.0), student0.getMc(), 0.01);
      assertEquals((-2159), student0.getMobilityTerms());
      assertEquals(8, student0.getOptionalHours());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertEquals("Azhc", student0.getBirthDate());
      assertEquals("wtmnk%", student0.getAffirmativePolicy());
      assertNull(student0.getNationality());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals((-450.573537812), student0.getGpa(), 0.01);
      assertEquals((-1691), student0.getCompletedTerms());
      assertFalse(arrayList0.contains(858));
      assertFalse(vector0.contains(""));
      assertFalse(set0.contains(""));
      assertEquals((-1691), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ";W", ";W", ", disabilities='", "", "", "B[%", "", studentStatus0, "B[%", "B[%", "", "0LzRj5H", ", disabilities='", "cxo^vN!;<%3", "Student{registration='", "", "", (Curriculum) null, 0, 0, 0, 0, (-6), 0, 0, 204.169800553793, 0, 474.793453, 0, 264, 2, 677, 784, 2);
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getBirthDate());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(", status=", student0.getEmail());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getCountry());
      assertEquals(204.169800553793, student0.getGpa(), 0.01);
      assertEquals((-6), student0.getComplementaryHours());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("Student{registration='", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(";W", student0.getGender());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getCourseCode());
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals("B[%", student0.getRace());
      assertEquals(";W", student0.getMaritalStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(264, student0.getSuspendedTerms());
      assertNotNull(student0);
      
      int int0 = student0.getCompletedCredits();
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getBirthDate());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(", status=", student0.getEmail());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getCountry());
      assertEquals(204.169800553793, student0.getGpa(), 0.01);
      assertEquals((-6), student0.getComplementaryHours());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("Student{registration='", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(";W", student0.getGender());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getCourseCode());
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals("B[%", student0.getRace());
      assertEquals(";W", student0.getMaritalStatus());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "#;lB&sg", "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", ", placeOfBirth='", ", placeOfBirth='", "UmR\"m%v%,ucoojPWDs", studentStatus0, "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", "UmR\"m%v%,ucoojPWDs", "UmR\"m%v%,ucoojPWDs", ", placeOfBirth='", "~5/<e]-^Fd4R-Pu", "/OS|K", "", (Curriculum) null, 13, 13, 13, 13, 0, 13, 13, 0, 4516.7628, 13, 13, 13, 0, 0, 0, 4516.7628);
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getBirthDate());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getEmail());
      assertEquals(4516.7628, student0.getMc(), 0.01);
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getSecondarySchoolGraduationYear());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getName());
      assertEquals("#;lB&sg", student0.getGender());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getCountry());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getAffirmativePolicy());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getDisabilities());
      assertEquals(13, student0.getComplementaryCredits());
      assertEquals("#;lB&sg", student0.getAdmissionStr());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getStatusStr());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(13.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getNationalId());
      assertEquals(13, student0.getMandatoryHours());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(13, student0.getOptionalHours());
      assertEquals("#;lB&sg", student0.getStatusTerm());
      assertEquals(13, student0.getOptionalCredits());
      assertEquals(4516.7628, student0.getAdmissionGrade(), 0.01);
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals(39, student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("#;lB&sg", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(13, student0.getCompletedTerms());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getAdmissionTerm());
      assertEquals(", placeOfBirth='", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("/OS|K", student0.getCourseCode());
      assertEquals(13, student0.getMandatoryCredits());
      assertEquals("#;lB&sg", student0.getNationality());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(13, student0.getAttemptedCredits());
      assertNotNull(student0);
      
      int int0 = student0.getCompletedCredits();
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getBirthDate());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getEmail());
      assertEquals(4516.7628, student0.getMc(), 0.01);
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getSecondarySchoolGraduationYear());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getName());
      assertEquals("#;lB&sg", student0.getGender());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getCountry());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getAffirmativePolicy());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getDisabilities());
      assertEquals(13, student0.getComplementaryCredits());
      assertEquals("#;lB&sg", student0.getAdmissionStr());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getStatusStr());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(13.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getNationalId());
      assertEquals(13, student0.getMandatoryHours());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(13, student0.getOptionalHours());
      assertEquals("#;lB&sg", student0.getStatusTerm());
      assertEquals(13, student0.getOptionalCredits());
      assertEquals(4516.7628, student0.getAdmissionGrade(), 0.01);
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals(39, student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("#;lB&sg", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(13, student0.getCompletedTerms());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getAdmissionTerm());
      assertEquals(", placeOfBirth='", student0.getSecondarySchool());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("/OS|K", student0.getCourseCode());
      assertEquals(13, student0.getMandatoryCredits());
      assertEquals("#;lB&sg", student0.getNationality());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(13, student0.getAttemptedCredits());
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", ", mandatoryHours=", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "", "", "", "", "", (Curriculum) null, 0, 0, 6, (-2556), (-2556), 0, 0, (-2556), (-251.647), (-2556), 0, (-2556), 4, (-2556), (-241), 40.029044049);
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals((-241), student0.getEnrolledCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals(40.029044049, student0.getAdmissionGrade(), 0.01);
      assertEquals((-2556), student0.getSuspendedTerms());
      assertEquals((-2556.0), student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", mandatoryHours=", student0.getPlaceOfBirth());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(4, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getNationality());
      assertEquals((-2556), student0.getOptionalCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals((-2556.0), student0.getGpa(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals((-2556), student0.getMobilityTerms());
      assertEquals(6, student0.getOptionalHours());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals((-2556), student0.getCompletedCredits());
      assertEquals((-2556), student0.getComplementaryHours());
      assertNotNull(student0);
      
      student0.setComplementaryHours(0);
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals((-241), student0.getEnrolledCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals(40.029044049, student0.getAdmissionGrade(), 0.01);
      assertEquals((-2556), student0.getSuspendedTerms());
      assertEquals((-2556.0), student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", mandatoryHours=", student0.getPlaceOfBirth());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(4, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getNationality());
      assertEquals((-2556), student0.getOptionalCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals((-2556.0), student0.getGpa(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals((-2556), student0.getMobilityTerms());
      assertEquals(6, student0.getOptionalHours());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals((-2556), student0.getCompletedCredits());
      
      int int0 = student0.getComplementaryHours();
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals((-241), student0.getEnrolledCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals(40.029044049, student0.getAdmissionGrade(), 0.01);
      assertEquals((-2556), student0.getSuspendedTerms());
      assertEquals((-2556.0), student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", mandatoryHours=", student0.getPlaceOfBirth());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(4, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getNationality());
      assertEquals((-2556), student0.getOptionalCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals((-2556.0), student0.getGpa(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals((-2556), student0.getMobilityTerms());
      assertEquals(6, student0.getOptionalHours());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals((-2556), student0.getCompletedCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", "", "", "r$n]u7=]?`]-U<-nXS", "", "}C{I`SP>ixpqLs?GQ{", "", "", "r$n]u7=]?`]-U<-nXS", studentStatus0, "", "r$n]u7=]?`]-U<-nXS", "n{i=F", "r$n]u7=]?`]-U<-nXS", "Q@lTn~pxLNS", "Q@lTn~pxLNS", "", "[B;{p;.rq')6|B%9", "}C{I`SP>ixpqLs?GQ{", (Curriculum) null, 670, 0, 3, 2, 9, 0, 670, 0.03, 4.0, 2, 670, 962, 2, 0, 3, 0.0);
      assertEquals("", student0.getRace());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getDisabilities());
      assertEquals(2.0, student0.getIea(), 0.01);
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(670, student0.getCompletedTerms());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getAdmissionStr());
      assertEquals("", student0.getBirthDate());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getStatusTerm());
      assertEquals("Q@lTn~pxLNS", student0.getAffirmativePolicy());
      assertEquals(962, student0.getSuspendedTerms());
      assertEquals(3, student0.getOptionalHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(670, student0.getMandatoryHours());
      assertEquals(9, student0.getComplementaryHours());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals("}C{I`SP>ixpqLs?GQ{", student0.getCurriculumCode());
      assertEquals("", student0.getNationalId());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals("Q@lTn~pxLNS", student0.getSecondarySchool());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(670, student0.getAttemptedCredits());
      assertEquals("}C{I`SP>ixpqLs?GQ{", student0.getCountry());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("n{i=F", student0.getAdmissionTerm());
      assertEquals("[B;{p;.rq')6|B%9", student0.getCourseCode());
      assertEquals(2, student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertNotNull(student0);
      
      int int0 = student0.getComplementaryHours();
      assertEquals("", student0.getRace());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getDisabilities());
      assertEquals(2.0, student0.getIea(), 0.01);
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(670, student0.getCompletedTerms());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getAdmissionStr());
      assertEquals("", student0.getBirthDate());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getStatusTerm());
      assertEquals("Q@lTn~pxLNS", student0.getAffirmativePolicy());
      assertEquals(962, student0.getSuspendedTerms());
      assertEquals(3, student0.getOptionalHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(670, student0.getMandatoryHours());
      assertEquals(9, student0.getComplementaryHours());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals("}C{I`SP>ixpqLs?GQ{", student0.getCurriculumCode());
      assertEquals("", student0.getNationalId());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals("Q@lTn~pxLNS", student0.getSecondarySchool());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(670, student0.getAttemptedCredits());
      assertEquals("}C{I`SP>ixpqLs?GQ{", student0.getCountry());
      assertEquals("r$n]u7=]?`]-U<-nXS", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("n{i=F", student0.getAdmissionTerm());
      assertEquals("[B;{p;.rq')6|B%9", student0.getCourseCode());
      assertEquals(2, student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Curriculum curriculum0 = new Curriculum("CONCLUIDO - NAO COLOU GRAU", "pX*", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 2007, 2007, 0, (-724), 3332, 228, 0, 0, (-748), 0, vector0, vector0, vector0, vector0, vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2007, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2007, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3332, curriculum0.getMinActivitiesNeeded());
      assertEquals(228, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-724), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-748), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("pX*", curriculum0.getCurriculumCode());
      assertEquals(3290.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(vector0.contains("pX*"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("!1\u0000a", "!1\u0000a", "", "", "com.google.common.primitives.Floats$FloatConverter", (String) null, "pX*", "", "CONCLUIDO - NAO COLOU GRAU", "!1\u0000a", "com.google.common.primitives.Floats$FloatConverter", "g^*zhk7K_OzE", studentStatus0, "", "CONCLUIDO - NAO COLOU GRAU", "g^*zhk7K_OzE", "com.google.common.primitives.Floats$FloatConverter", "", "com.google.common.primitives.Floats$FloatConverter", "", (String) null, (String) null, curriculum0, (-748), 125, (-2924), 228, (-1), 0, 0, (-1080.70111664015), 2191.980758116623, 2530.5654, 0, 125, 0, (-1), 0, 0.0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2007, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2007, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3332, curriculum0.getMinActivitiesNeeded());
      assertEquals(228, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-724), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-748), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("pX*", curriculum0.getCurriculumCode());
      assertEquals(3290.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals("g^*zhk7K_OzE", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getSecondarySchool());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-1080.70111664015), student0.getGpa(), 0.01);
      assertEquals((-1), student0.getComplementaryHours());
      assertNull(student0.getCurriculumCode());
      assertEquals((-1), student0.getMobilityTerms());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getCountry());
      assertEquals(0, student0.getAttemptedCredits());
      assertNull(student0.getCourseCode());
      assertEquals((-2924), student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-748), student0.getMandatoryHours());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getRace());
      assertEquals("!1\u0000a", student0.getNationalId());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("pX*", student0.getMaritalStatus());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals("g^*zhk7K_OzE", student0.getStatusStr());
      assertEquals("", student0.getBirthDate());
      assertEquals("!1\u0000a", student0.getPlaceOfBirth());
      assertEquals(228, student0.getOptionalCredits());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(2191.980758116623, student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(125, student0.getSuspendedTerms());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(2530.5654, student0.getIea(), 0.01);
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getDisabilities());
      assertEquals(353, student0.getCompletedCredits());
      assertFalse(vector0.contains("pX*"));
      assertNotNull(student0);
      
      int int0 = student0.getComplementaryCredits();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2007, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2007, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3332, curriculum0.getMinActivitiesNeeded());
      assertEquals(228, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-724), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-748), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("pX*", curriculum0.getCurriculumCode());
      assertEquals(3290.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals("g^*zhk7K_OzE", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getSecondarySchool());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-1080.70111664015), student0.getGpa(), 0.01);
      assertEquals((-1), student0.getComplementaryHours());
      assertNull(student0.getCurriculumCode());
      assertEquals((-1), student0.getMobilityTerms());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getCountry());
      assertEquals(0, student0.getAttemptedCredits());
      assertNull(student0.getCourseCode());
      assertEquals((-2924), student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-748), student0.getMandatoryHours());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getRace());
      assertEquals("!1\u0000a", student0.getNationalId());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("pX*", student0.getMaritalStatus());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals("g^*zhk7K_OzE", student0.getStatusStr());
      assertEquals("", student0.getBirthDate());
      assertEquals("!1\u0000a", student0.getPlaceOfBirth());
      assertEquals(228, student0.getOptionalCredits());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(2191.980758116623, student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(125, student0.getSuspendedTerms());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(2530.5654, student0.getIea(), 0.01);
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("com.google.common.primitives.Floats$FloatConverter", student0.getDisabilities());
      assertEquals(353, student0.getCompletedCredits());
      assertFalse(vector0.contains("pX*"));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Curriculum curriculum0 = new Curriculum("L8,\"U~{B|u+", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 295, 0, 0, 272, 295, 272, 125, 125, 125, 272, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(567.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(295, curriculum0.getMinActivitiesNeeded());
      assertEquals(295, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(272, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("L8,\"U~{B|u+", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(272, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(272, curriculum0.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculum0);
      
      Student student0 = new Student("|2@Wc", "|2@Wc", "|2@Wc", "BloomFilters must have the same size underlying bit arrays (%s != %s)", "", "CONCLUIDO - NAO COLOU GRAU", "__file", "__file", "", "", "|2@Wc", "Sxm[e", studentStatus0, "wI", "%aLB", "|2@Wc", "wI", "CANCELAMENTO P/ DECISAO JUDICIAL", "24*Mjffc ?", "CANCELAMENTO P/ DECISAO JUDICIAL", (String) null, "?Imr/L3b", curriculum0, (-1126), 87855567, Integer.MIN_VALUE, (-24), (-1192), (-24), (-1192), 0.03, 2577.4632801, 0, 295, 3, 5, 272, 0, (-24));
      assertEquals(567.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(295, curriculum0.getMinActivitiesNeeded());
      assertEquals(295, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(272, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("L8,\"U~{B|u+", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(272, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(272, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(87855567, student0.getMandatoryCredits());
      assertEquals(2577.4632801, student0.getMc(), 0.01);
      assertEquals((-1192), student0.getComplementaryHours());
      assertEquals("__file", student0.getNationality());
      assertEquals(272, student0.getMobilityTerms());
      assertEquals("|2@Wc", student0.getNationalId());
      assertEquals("Sxm[e", student0.getStatusStr());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("wI", student0.getStatusTerm());
      assertEquals((-1192), student0.getAttemptedCredits());
      assertEquals("|2@Wc", student0.getName());
      assertEquals("", student0.getCountry());
      assertEquals((-24), student0.getComplementaryCredits());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("24*Mjffc ?", student0.getSecondarySchool());
      assertEquals("|2@Wc", student0.getRace());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("%aLB", student0.getAdmissionStr());
      assertEquals("", student0.getEmail());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals((-1126), student0.getMandatoryHours());
      assertEquals((-24), student0.getOptionalCredits());
      assertEquals("wI", student0.getDisabilities());
      assertEquals(295, student0.getCompletedTerms());
      assertEquals(Integer.MIN_VALUE, student0.getOptionalHours());
      assertEquals("BloomFilters must have the same size underlying bit arrays (%s != %s)", student0.getBirthDate());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-24.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAffirmativePolicy());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getSecondarySchoolGraduationYear());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertEquals("?Imr/L3b", student0.getCurriculumCode());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertNull(student0.getCourseCode());
      assertEquals(87855519, student0.getCompletedCredits());
      assertEquals("|2@Wc", student0.getAdmissionTerm());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getGender());
      assertNotNull(student0);
      
      int int0 = student0.getComplementaryCredits();
      assertEquals(567.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(295, curriculum0.getMinActivitiesNeeded());
      assertEquals(295, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(125, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(272, curriculum0.getMinNumberOfTerms());
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("L8,\"U~{B|u+", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMaxNumberOfTerms());
      assertEquals(272, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(272, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(87855567, student0.getMandatoryCredits());
      assertEquals(2577.4632801, student0.getMc(), 0.01);
      assertEquals((-1192), student0.getComplementaryHours());
      assertEquals("__file", student0.getNationality());
      assertEquals(272, student0.getMobilityTerms());
      assertEquals("|2@Wc", student0.getNationalId());
      assertEquals("Sxm[e", student0.getStatusStr());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("wI", student0.getStatusTerm());
      assertEquals((-1192), student0.getAttemptedCredits());
      assertEquals("|2@Wc", student0.getName());
      assertEquals("", student0.getCountry());
      assertEquals((-24), student0.getComplementaryCredits());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("24*Mjffc ?", student0.getSecondarySchool());
      assertEquals("|2@Wc", student0.getRace());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("%aLB", student0.getAdmissionStr());
      assertEquals("", student0.getEmail());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals((-1126), student0.getMandatoryHours());
      assertEquals((-24), student0.getOptionalCredits());
      assertEquals("wI", student0.getDisabilities());
      assertEquals(295, student0.getCompletedTerms());
      assertEquals(Integer.MIN_VALUE, student0.getOptionalHours());
      assertEquals("BloomFilters must have the same size underlying bit arrays (%s != %s)", student0.getBirthDate());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-24.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAffirmativePolicy());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getSecondarySchoolGraduationYear());
      assertEquals(5, student0.getInstitutionalEnrollments());
      assertEquals("?Imr/L3b", student0.getCurriculumCode());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertNull(student0.getCourseCode());
      assertEquals(87855519, student0.getCompletedCredits());
      assertEquals("|2@Wc", student0.getAdmissionTerm());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getGender());
      assertEquals((-24), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("vTvjV*<1", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 4, 4, (-3783), 0, (-3783), 0, 0, 1880, 0, treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-3775.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3783), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("vTvjV*<1", curriculum0.getCourseCode());
      assertEquals((-3783), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1880, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-3783)));
      assertFalse(treeSet0.contains("vTvjV*<1"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", (String) null, "FB", (String) null, "", (String) null, "", "SYSTEM", ", placeOfBirth='", (String) null, "", "9GWN", studentStatus0, "Orq?h'/W\"qM", "", "SYSTEM", "", ", name='", (String) null, "Orq?h'/W\"qM", "io^|].*", (String) null, curriculum0, 0, 1880, (-3783), 65536, 0, 0, (-1069), 0, 4, (-1069), 0, (-1069), 0, 0, (-2802), (-905.308));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-3775.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3783), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("vTvjV*<1", curriculum0.getCourseCode());
      assertEquals((-3783), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1880, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(student0.getCurriculumCode());
      assertEquals(1880, student0.getMandatoryCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertEquals(65536, student0.getOptionalCredits());
      assertNull(student0.getNationalId());
      assertEquals((-1069), student0.getAttemptedCredits());
      assertEquals("io^|].*", student0.getCourseCode());
      assertEquals("SYSTEM", student0.getAdmissionTerm());
      assertEquals((-905.308), student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNull(student0.getBirthDate());
      assertEquals(", placeOfBirth='", student0.getCountry());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(", name='", student0.getAffirmativePolicy());
      assertEquals("", student0.getDisabilities());
      assertEquals("Orq?h'/W\"qM", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getMobilityTerms());
      assertNull(student0.getSecondarySchool());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("9GWN", student0.getStatusStr());
      assertEquals((-3783), student0.getOptionalHours());
      assertEquals("Orq?h'/W\"qM", student0.getStatusTerm());
      assertEquals(67416, student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals((-1069), student0.getSuspendedTerms());
      assertEquals("", student0.getEmail());
      assertEquals("SYSTEM", student0.getNationality());
      assertEquals((-1069.0), student0.getIea(), 0.01);
      assertEquals((-2802), student0.getEnrolledCredits());
      assertEquals("FB", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getRace());
      assertNull(student0.getPlaceOfBirth());
      assertFalse(arrayList0.contains((-3783)));
      assertFalse(treeSet0.contains("Orq?h'/W\"qM"));
      assertNotNull(student0);
      
      String string0 = student0.getBirthDate();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-3775.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3783), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("vTvjV*<1", curriculum0.getCourseCode());
      assertEquals((-3783), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1880, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertNull(student0.getCurriculumCode());
      assertEquals(1880, student0.getMandatoryCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertEquals(65536, student0.getOptionalCredits());
      assertNull(student0.getNationalId());
      assertEquals((-1069), student0.getAttemptedCredits());
      assertEquals("io^|].*", student0.getCourseCode());
      assertEquals("SYSTEM", student0.getAdmissionTerm());
      assertEquals((-905.308), student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNull(student0.getBirthDate());
      assertEquals(", placeOfBirth='", student0.getCountry());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(", name='", student0.getAffirmativePolicy());
      assertEquals("", student0.getDisabilities());
      assertEquals("Orq?h'/W\"qM", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getMobilityTerms());
      assertNull(student0.getSecondarySchool());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("9GWN", student0.getStatusStr());
      assertEquals((-3783), student0.getOptionalHours());
      assertEquals("Orq?h'/W\"qM", student0.getStatusTerm());
      assertEquals(67416, student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals((-1069), student0.getSuspendedTerms());
      assertEquals("", student0.getEmail());
      assertEquals("SYSTEM", student0.getNationality());
      assertEquals((-1069.0), student0.getIea(), 0.01);
      assertEquals((-2802), student0.getEnrolledCredits());
      assertEquals("FB", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getRace());
      assertNull(student0.getPlaceOfBirth());
      assertFalse(arrayList0.contains((-3783)));
      assertFalse(treeSet0.contains("Orq?h'/W\"qM"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum(", complementaryCredits=", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-102), (-102), (-252), 0, 0, 0, (-69), 0, 0, 0, hashSet0, hashSet0, hashSet0, (Collection<String>) null, arrayDeque0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-252), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-456.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-102), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", complementaryCredits=", curriculum0.getCourseCode());
      assertEquals((-69), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-102)));
      assertFalse(hashSet0.contains(", complementaryCredits="));
      assertFalse(arrayDeque0.contains(", complementaryCredits="));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "u?~9#.v8?", "", "", "", "IS_FILE", "", "", "", "", "", studentStatus0, "u?~9#.v8?", "", "", "u?~9#.v8?", ", complementaryCredits=", "", (String) null, ", suspendedTerms=", ", complementaryCredits=", curriculum0, (-430), (-2673), (-2673), 880, 0, 0, 0, (-102), 0.0, (-102), (-430), 0, 0, (-1578), (-430), (-102));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-252), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-456.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-102), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", complementaryCredits=", curriculum0.getCourseCode());
      assertEquals((-69), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-102.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-430), student0.getEnrolledCredits());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("IS_FILE", student0.getMaritalStatus());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(", suspendedTerms=", student0.getCourseCode());
      assertEquals(880, student0.getOptionalCredits());
      assertEquals((-102.0), student0.getIea(), 0.01);
      assertEquals("u?~9#.v8?", student0.getDisabilities());
      assertEquals("u?~9#.v8?", student0.getStatusTerm());
      assertEquals((-2673), student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-1793), student0.getCompletedCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-102.0), student0.getGpa(), 0.01);
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getStatusStr());
      assertEquals("u?~9#.v8?", student0.getName());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getCountry());
      assertEquals((-430), student0.getCompletedTerms());
      assertEquals(", complementaryCredits=", student0.getCurriculumCode());
      assertEquals((-2673), student0.getMandatoryCredits());
      assertEquals((-1578), student0.getMobilityTerms());
      assertEquals(", complementaryCredits=", student0.getAffirmativePolicy());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-430), student0.getMandatoryHours());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(hashSet0.contains(", complementaryCredits="));
      assertFalse(arrayDeque0.contains(", complementaryCredits="));
      assertNotNull(student0);
      
      String string0 = student0.getBirthDate();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals((-252), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-102), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-456.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-102), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(", complementaryCredits=", curriculum0.getCourseCode());
      assertEquals((-69), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-102.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-430), student0.getEnrolledCredits());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("IS_FILE", student0.getMaritalStatus());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(", suspendedTerms=", student0.getCourseCode());
      assertEquals(880, student0.getOptionalCredits());
      assertEquals((-102.0), student0.getIea(), 0.01);
      assertEquals("u?~9#.v8?", student0.getDisabilities());
      assertEquals("u?~9#.v8?", student0.getStatusTerm());
      assertEquals((-2673), student0.getOptionalHours());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-1793), student0.getCompletedCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-102.0), student0.getGpa(), 0.01);
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getStatusStr());
      assertEquals("u?~9#.v8?", student0.getName());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getCountry());
      assertEquals((-430), student0.getCompletedTerms());
      assertEquals(", complementaryCredits=", student0.getCurriculumCode());
      assertEquals((-2673), student0.getMandatoryCredits());
      assertEquals((-1578), student0.getMobilityTerms());
      assertEquals(", complementaryCredits=", student0.getAffirmativePolicy());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-430), student0.getMandatoryHours());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getComplementaryCredits());
      assertFalse(arrayList0.contains(0));
      assertFalse(hashSet0.contains(", complementaryCredits="));
      assertFalse(arrayDeque0.contains(", complementaryCredits="));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ";W", ";W", ", disabilities='", "", "", "B[%", "", studentStatus0, "B[%", "B[%", "", "0LzRj5H", ", disabilities='", "cxo^vN!;<%3", "Student{registration='", "", "", (Curriculum) null, 0, 0, 0, 0, (-6), 0, 0, 204.169800553793, 0, 474.793453, 0, 264, 2, 677, 784, 2);
      assertEquals(204.169800553793, student0.getGpa(), 0.01);
      assertEquals("Student{registration='", student0.getSecondarySchoolGraduationYear());
      assertEquals((-6), student0.getComplementaryHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getCountry());
      assertEquals("B[%", student0.getRace());
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(";W", student0.getMaritalStatus());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(";W", student0.getGender());
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(", status=", student0.getEmail());
      assertEquals("", student0.getBirthDate());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertNotNull(student0);
      
      int int0 = student0.getAttemptedCredits();
      assertEquals(204.169800553793, student0.getGpa(), 0.01);
      assertEquals("Student{registration='", student0.getSecondarySchoolGraduationYear());
      assertEquals((-6), student0.getComplementaryHours());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getCountry());
      assertEquals("B[%", student0.getRace());
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(2.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(";W", student0.getMaritalStatus());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(";W", student0.getGender());
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(", status=", student0.getEmail());
      assertEquals("", student0.getBirthDate());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Curriculum curriculum0 = new Curriculum((String) null, ", mc=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, arrayList0, arrayList0, 2515, 3, 3, 2, 3, 6, 0, 1392, 3, (-306), list0, (Collection<String>) null, list0, list0, arrayDeque0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(6, curriculum0.getMinNumberOfTerms());
      assertEquals(", mc=", curriculum0.getCurriculumCode());
      assertEquals(3, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2523.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(2515, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-306), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3, curriculum0.getMinActivitiesNeeded());
      assertEquals(3, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1392, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(3));
      assertFalse(arrayDeque0.contains(", mc="));
      assertFalse(list0.contains(", mc="));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "data length is zero!", "", (String) null, "(T;AFgq o#c1bOK", "g6z^+j>_W", "&:`!}fiY7+Bz", "", "^dA", "Q[gR~@IHzz\"M", "`sD_g", "If9N,I1/!<@ore", studentStatus0, "", "", "", "`sD_g", "f' z9%$?>.lp=PMM&b]", "VaLE,T", "", "wO", "!", curriculum0, 0, 3, 461845907, 11, 7, (-1886), (-3153), (-1.0), 0.0, 4497.392241822212, 1295, 2515, 6, 3, 553, 553);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(6, curriculum0.getMinNumberOfTerms());
      assertEquals(", mc=", curriculum0.getCurriculumCode());
      assertEquals(3, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2523.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(2515, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-306), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3, curriculum0.getMinActivitiesNeeded());
      assertEquals(3, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1392, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(553.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("`sD_g", student0.getDisabilities());
      assertEquals(6, student0.getInstitutionalEnrollments());
      assertEquals(2515, student0.getSuspendedTerms());
      assertEquals("`sD_g", student0.getRace());
      assertEquals("wO", student0.getCourseCode());
      assertEquals((-1886), student0.getComplementaryCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals("VaLE,T", student0.getSecondarySchool());
      assertEquals("", student0.getNationality());
      assertEquals("!", student0.getCurriculumCode());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals(461845907, student0.getOptionalHours());
      assertEquals("g6z^+j>_W", student0.getGender());
      assertEquals("If9N,I1/!<@ore", student0.getStatusStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("data length is zero!", student0.getNationalId());
      assertEquals(553, student0.getEnrolledCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1872), student0.getCompletedCredits());
      assertEquals(11, student0.getOptionalCredits());
      assertEquals("", student0.getName());
      assertNull(student0.getBirthDate());
      assertEquals("^dA", student0.getCountry());
      assertEquals((-3153), student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(7, student0.getComplementaryHours());
      assertEquals("Q[gR~@IHzz\"M", student0.getPlaceOfBirth());
      assertEquals(4497.392241822212, student0.getIea(), 0.01);
      assertEquals("(T;AFgq o#c1bOK", student0.getEmail());
      assertEquals("f' z9%$?>.lp=PMM&b]", student0.getAffirmativePolicy());
      assertEquals("&:`!}fiY7+Bz", student0.getMaritalStatus());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(1295, student0.getCompletedTerms());
      assertFalse(arrayList0.contains(3));
      assertFalse(arrayDeque0.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(student0);
      
      int int0 = student0.getAttemptedCredits();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(6, curriculum0.getMinNumberOfTerms());
      assertEquals(", mc=", curriculum0.getCurriculumCode());
      assertEquals(3, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2523.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(2515, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-306), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3, curriculum0.getMinActivitiesNeeded());
      assertEquals(3, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1392, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(553.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("`sD_g", student0.getDisabilities());
      assertEquals(6, student0.getInstitutionalEnrollments());
      assertEquals(2515, student0.getSuspendedTerms());
      assertEquals("`sD_g", student0.getRace());
      assertEquals("wO", student0.getCourseCode());
      assertEquals((-1886), student0.getComplementaryCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals("VaLE,T", student0.getSecondarySchool());
      assertEquals("", student0.getNationality());
      assertEquals("!", student0.getCurriculumCode());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals(461845907, student0.getOptionalHours());
      assertEquals("g6z^+j>_W", student0.getGender());
      assertEquals("If9N,I1/!<@ore", student0.getStatusStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("data length is zero!", student0.getNationalId());
      assertEquals(553, student0.getEnrolledCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1872), student0.getCompletedCredits());
      assertEquals(11, student0.getOptionalCredits());
      assertEquals("", student0.getName());
      assertNull(student0.getBirthDate());
      assertEquals("^dA", student0.getCountry());
      assertEquals((-3153), student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(7, student0.getComplementaryHours());
      assertEquals("Q[gR~@IHzz\"M", student0.getPlaceOfBirth());
      assertEquals(4497.392241822212, student0.getIea(), 0.01);
      assertEquals("(T;AFgq o#c1bOK", student0.getEmail());
      assertEquals("f' z9%$?>.lp=PMM&b]", student0.getAffirmativePolicy());
      assertEquals("&:`!}fiY7+Bz", student0.getMaritalStatus());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(1295, student0.getCompletedTerms());
      assertFalse(arrayList0.contains(3));
      assertFalse(arrayDeque0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals((-3153), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("${wM&.2,0V%w", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 0, 0, 434, 0, 1600, 0, set0, set0, set0, set0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("${wM&.2,0V%w", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1600, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(434, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains("${wM&.2,0V%w"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("p)`:(h", "p)`:(h", "p)`:(h", "p)`:(h", "y*", "y*", "#fW\"nf", "#fW\"nf", "#fW\"nf", "br9Yc/,61SUL*$", "br9Yc/,61SUL*$", "p)`:(h", studentStatus0, (String) null, (String) null, (String) null, (String) null, (String) null, "br9Yc/,61SUL*$", "p)`:(h", "", "", curriculum0, 6, 1140, 0, 0, 434, 434, 1764, 0.0, 0.0, 4.0, (-167), 6, 434, 1764, 434, 0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("${wM&.2,0V%w", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1600, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(434, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getStatusTerm());
      assertEquals("br9Yc/,61SUL*$", student0.getRace());
      assertEquals(6, student0.getMandatoryHours());
      assertEquals("p)`:(h", student0.getNationalId());
      assertEquals("", student0.getCourseCode());
      assertEquals("p)`:(h", student0.getStatusStr());
      assertEquals((-167), student0.getCompletedTerms());
      assertEquals("y*", student0.getGender());
      assertEquals(434, student0.getInstitutionalEnrollments());
      assertNull(student0.getAdmissionTerm());
      assertEquals("br9Yc/,61SUL*$", student0.getSecondarySchool());
      assertEquals("#fW\"nf", student0.getCountry());
      assertEquals(434, student0.getEnrolledCredits());
      assertEquals(6, student0.getSuspendedTerms());
      assertEquals(1764, student0.getMobilityTerms());
      assertEquals(1574, student0.getCompletedCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(4.0, student0.getIea(), 0.01);
      assertEquals(434, student0.getComplementaryHours());
      assertEquals(434, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("br9Yc/,61SUL*$", student0.getPlaceOfBirth());
      assertNull(student0.getDisabilities());
      assertEquals("#fW\"nf", student0.getNationality());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("p)`:(h", student0.getName());
      assertEquals("p)`:(h", student0.getBirthDate());
      assertEquals("p)`:(h", student0.getSecondarySchoolGraduationYear());
      assertEquals("#fW\"nf", student0.getMaritalStatus());
      assertEquals("", student0.getCurriculumCode());
      assertNull(student0.getAdmissionStr());
      assertEquals(1140, student0.getMandatoryCredits());
      assertEquals(1764, student0.getAttemptedCredits());
      assertNull(student0.getAffirmativePolicy());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("y*", student0.getEmail());
      assertEquals(11, student0.getStatusIndex());
      assertFalse(arrayList0.contains(6));
      assertFalse(set0.contains("br9Yc/,61SUL*$"));
      assertNotNull(student0);
      
      String string0 = student0.getAffirmativePolicy();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("${wM&.2,0V%w", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1600, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(434, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getStatusTerm());
      assertEquals("br9Yc/,61SUL*$", student0.getRace());
      assertEquals(6, student0.getMandatoryHours());
      assertEquals("p)`:(h", student0.getNationalId());
      assertEquals("", student0.getCourseCode());
      assertEquals("p)`:(h", student0.getStatusStr());
      assertEquals((-167), student0.getCompletedTerms());
      assertEquals("y*", student0.getGender());
      assertEquals(434, student0.getInstitutionalEnrollments());
      assertNull(student0.getAdmissionTerm());
      assertEquals("br9Yc/,61SUL*$", student0.getSecondarySchool());
      assertEquals("#fW\"nf", student0.getCountry());
      assertEquals(434, student0.getEnrolledCredits());
      assertEquals(6, student0.getSuspendedTerms());
      assertEquals(1764, student0.getMobilityTerms());
      assertEquals(1574, student0.getCompletedCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(4.0, student0.getIea(), 0.01);
      assertEquals(434, student0.getComplementaryHours());
      assertEquals(434, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("br9Yc/,61SUL*$", student0.getPlaceOfBirth());
      assertNull(student0.getDisabilities());
      assertEquals("#fW\"nf", student0.getNationality());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("p)`:(h", student0.getName());
      assertEquals("p)`:(h", student0.getBirthDate());
      assertEquals("p)`:(h", student0.getSecondarySchoolGraduationYear());
      assertEquals("#fW\"nf", student0.getMaritalStatus());
      assertEquals("", student0.getCurriculumCode());
      assertNull(student0.getAdmissionStr());
      assertEquals(1140, student0.getMandatoryCredits());
      assertEquals(1764, student0.getAttemptedCredits());
      assertNull(student0.getAffirmativePolicy());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("y*", student0.getEmail());
      assertEquals(11, student0.getStatusIndex());
      assertFalse(arrayList0.contains(6));
      assertFalse(set0.contains("br9Yc/,61SUL*$"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", ", mandatoryHours=", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "", "", "", "", "", (Curriculum) null, 0, 0, 6, (-2556), 747, 0, 0, 747, 0, (-2556), 0, 747, 4, 747, (-241), 40.029044049);
      assertEquals("", student0.getCurriculumCode());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals((-241), student0.getEnrolledCredits());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(747, student0.getSuspendedTerms());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getStatusTerm());
      assertEquals(747, student0.getMobilityTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals(40.029044049, student0.getAdmissionGrade(), 0.01);
      assertEquals((-2556), student0.getOptionalCredits());
      assertEquals(747.0, student0.getGpa(), 0.01);
      assertEquals(747, student0.getComplementaryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals(6, student0.getOptionalHours());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals((-2556), student0.getCompletedCredits());
      assertEquals(4, student0.getInstitutionalEnrollments());
      assertEquals(", mandatoryHours=", student0.getPlaceOfBirth());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getNationality());
      assertEquals((-2556.0), student0.getIea(), 0.01);
      assertNotNull(student0);
      
      String string0 = student0.getAffirmativePolicy();
      assertEquals("", student0.getCurriculumCode());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals((-241), student0.getEnrolledCredits());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(747, student0.getSuspendedTerms());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getStatusTerm());
      assertEquals(747, student0.getMobilityTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals(40.029044049, student0.getAdmissionGrade(), 0.01);
      assertEquals((-2556), student0.getOptionalCredits());
      assertEquals(747.0, student0.getGpa(), 0.01);
      assertEquals(747, student0.getComplementaryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals(6, student0.getOptionalHours());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals((-2556), student0.getCompletedCredits());
      assertEquals(4, student0.getInstitutionalEnrollments());
      assertEquals(", mandatoryHours=", student0.getPlaceOfBirth());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getNationality());
      assertEquals((-2556.0), student0.getIea(), 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = new Locale("2&XZ", "2&XZ");
      assertEquals("", locale0.getVariant());
      assertEquals("2&xz_2&XZ", locale0.toString());
      assertEquals("2&XZ", locale0.getCountry());
      assertEquals("2&xz", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("2&xz_2&XZ", locale0.toString());
      assertEquals("2&XZ", locale0.getCountry());
      assertEquals("2&xz", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("2&XZ"));
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum(";4{6*pZm AJpfQ", "k", (ArrayList<Integer>) null, (ArrayList<Integer>) null, arrayList0, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-523), 348, (-523), (-523), (-523), 348, (-523), 348, (-523), 9, set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("2&xz_2&XZ", locale0.toString());
      assertEquals("2&XZ", locale0.getCountry());
      assertEquals("2&xz", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-523), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(348, curriculum0.getMinNumberOfTerms());
      assertEquals((-523), curriculum0.getMinActivitiesNeeded());
      assertEquals(";4{6*pZm AJpfQ", curriculum0.getCourseCode());
      assertEquals(9, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(348, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(348, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("k", curriculum0.getCurriculumCode());
      assertEquals((-1221.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-523), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-523), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-523), curriculum0.getMaxNumberOfTerms());
      assertEquals((-523), curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(arrayList0.contains(348));
      assertFalse(set0.contains("2&XZ"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("@tX~bD^nQeaV", "@tX~bD^nQeaV", "2&XZ", (String) null, "@tX~bD^nQeaV", "", "A-_ P!vdJzb_Vvhx", "A-_ P!vdJzb_Vvhx", "", "", "2&XZ", "2&XZ", studentStatus0, "arS_'&E^/xd", "arS_'&E^/xd", (String) null, "2&XZ", "arS_'&E^/xd", "The filter must not be null", ";NX.=jU-Mu{bn4{c4m@", "", (String) null, curriculum0, (-781), (-781), 1404, 348, (-770), 1404, (-523), (-2205.6979321), 9, 1.0, 6, (-781), 0, 793, 9, (-2205.6979321));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("2&xz_2&XZ", locale0.toString());
      assertEquals("2&XZ", locale0.getCountry());
      assertEquals("2&xz", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-523), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(348, curriculum0.getMinNumberOfTerms());
      assertEquals((-523), curriculum0.getMinActivitiesNeeded());
      assertEquals(";4{6*pZm AJpfQ", curriculum0.getCourseCode());
      assertEquals(9, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(348, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(348, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("k", curriculum0.getCurriculumCode());
      assertEquals((-1221.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-523), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-523), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-523), curriculum0.getMaxNumberOfTerms());
      assertEquals((-523), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("arS_'&E^/xd", student0.getStatusTerm());
      assertEquals("2&XZ", student0.getStatusStr());
      assertNull(student0.getBirthDate());
      assertEquals(6, student0.getCompletedTerms());
      assertEquals(9.0, student0.getMc(), 0.01);
      assertEquals(1404, student0.getOptionalHours());
      assertEquals(971, student0.getCompletedCredits());
      assertEquals((-781), student0.getMandatoryHours());
      assertEquals(348, student0.getOptionalCredits());
      assertEquals((-2205.6979321), student0.getAdmissionGrade(), 0.01);
      assertEquals(9, student0.getEnrolledCredits());
      assertEquals(1404, student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("The filter must not be null", student0.getSecondarySchool());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("2&XZ", student0.getDisabilities());
      assertEquals(";NX.=jU-Mu{bn4{c4m@", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertNull(student0.getCurriculumCode());
      assertEquals("@tX~bD^nQeaV", student0.getEmail());
      assertEquals((-2205.6979321), student0.getGpa(), 0.01);
      assertEquals("A-_ P!vdJzb_Vvhx", student0.getMaritalStatus());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("arS_'&E^/xd", student0.getAffirmativePolicy());
      assertNull(student0.getAdmissionTerm());
      assertEquals("arS_'&E^/xd", student0.getAdmissionStr());
      assertEquals(1.0, student0.getIea(), 0.01);
      assertEquals("@tX~bD^nQeaV", student0.getNationalId());
      assertEquals((-781), student0.getMandatoryCredits());
      assertEquals(793, student0.getMobilityTerms());
      assertEquals((-523), student0.getAttemptedCredits());
      assertEquals((-770), student0.getComplementaryHours());
      assertEquals("A-_ P!vdJzb_Vvhx", student0.getNationality());
      assertEquals((-781), student0.getSuspendedTerms());
      assertEquals("2&XZ", student0.getRace());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("2&XZ", student0.getName());
      assertFalse(arrayList0.contains(348));
      assertFalse(set0.contains("A-_ P!vdJzb_Vvhx"));
      assertNotNull(student0);
      
      String string0 = student0.getAdmissionTerm();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("2&xz_2&XZ", locale0.toString());
      assertEquals("2&XZ", locale0.getCountry());
      assertEquals("2&xz", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals((-523), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(348, curriculum0.getMinNumberOfTerms());
      assertEquals((-523), curriculum0.getMinActivitiesNeeded());
      assertEquals(";4{6*pZm AJpfQ", curriculum0.getCourseCode());
      assertEquals(9, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(348, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(348, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("k", curriculum0.getCurriculumCode());
      assertEquals((-1221.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-523), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-523), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-523), curriculum0.getMaxNumberOfTerms());
      assertEquals((-523), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("arS_'&E^/xd", student0.getStatusTerm());
      assertEquals("2&XZ", student0.getStatusStr());
      assertNull(student0.getBirthDate());
      assertEquals(6, student0.getCompletedTerms());
      assertEquals(9.0, student0.getMc(), 0.01);
      assertEquals(1404, student0.getOptionalHours());
      assertEquals(971, student0.getCompletedCredits());
      assertEquals((-781), student0.getMandatoryHours());
      assertEquals(348, student0.getOptionalCredits());
      assertEquals((-2205.6979321), student0.getAdmissionGrade(), 0.01);
      assertEquals(9, student0.getEnrolledCredits());
      assertEquals(1404, student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("The filter must not be null", student0.getSecondarySchool());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("2&XZ", student0.getDisabilities());
      assertEquals(";NX.=jU-Mu{bn4{c4m@", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertNull(student0.getCurriculumCode());
      assertEquals("@tX~bD^nQeaV", student0.getEmail());
      assertEquals((-2205.6979321), student0.getGpa(), 0.01);
      assertEquals("A-_ P!vdJzb_Vvhx", student0.getMaritalStatus());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("arS_'&E^/xd", student0.getAffirmativePolicy());
      assertNull(student0.getAdmissionTerm());
      assertEquals("arS_'&E^/xd", student0.getAdmissionStr());
      assertEquals(1.0, student0.getIea(), 0.01);
      assertEquals("@tX~bD^nQeaV", student0.getNationalId());
      assertEquals((-781), student0.getMandatoryCredits());
      assertEquals(793, student0.getMobilityTerms());
      assertEquals((-523), student0.getAttemptedCredits());
      assertEquals((-770), student0.getComplementaryHours());
      assertEquals("A-_ P!vdJzb_Vvhx", student0.getNationality());
      assertEquals((-781), student0.getSuspendedTerms());
      assertEquals("2&XZ", student0.getRace());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("2&XZ", student0.getName());
      assertFalse(arrayList0.contains(348));
      assertFalse(set0.contains("A-_ P!vdJzb_Vvhx"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 6, (-2581), (-2581), 0, (-649), 1913, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-649), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2581), curriculum0.getMinNumberOfTerms());
      assertEquals((-2581), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1913, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(6, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("dEb-#/yPI=pD|U&/+N", "dEb-#/yPI=pD|U&/+N", "<^", "Vx [cx)oG", "<^", "Vx [cx)oG", "", ", mandatoryHours=", "@Z!V;8.{CJE", "Vx [cx)oG", "", "totalLoadTime", studentStatus0, "Vx [cx)oG", "@Z!V;8.{CJE", "", (String) null, "dEb-#/yPI=pD|U&/+N", ", attemptedCredits=", "dEb-#/yPI=pD|U&/+N", "", "6= gF@!j", curriculum0, 0, (-2581), (-2696), 4, (-213), (-208), 0, 4, 0.0, 0.0, 15, 0, 0, (-2581), (-2696), (-1312.50381482));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-649), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2581), curriculum0.getMinNumberOfTerms());
      assertEquals((-2581), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1913, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(6, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-213), student0.getComplementaryHours());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals(", mandatoryHours=", student0.getNationality());
      assertEquals((-2581), student0.getMobilityTerms());
      assertEquals("@Z!V;8.{CJE", student0.getCountry());
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals("<^", student0.getName());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-2581), student0.getMandatoryCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(15, student0.getCompletedTerms());
      assertEquals("6= gF@!j", student0.getCurriculumCode());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("totalLoadTime", student0.getStatusStr());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getCourseCode());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("Vx [cx)oG", student0.getPlaceOfBirth());
      assertEquals(", attemptedCredits=", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getNationalId());
      assertEquals("Vx [cx)oG", student0.getGender());
      assertEquals((-2696), student0.getOptionalHours());
      assertEquals((-208), student0.getComplementaryCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-2696), student0.getEnrolledCredits());
      assertEquals("@Z!V;8.{CJE", student0.getAdmissionStr());
      assertEquals((-1312.50381482), student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals("Vx [cx)oG", student0.getStatusTerm());
      assertEquals("Vx [cx)oG", student0.getBirthDate());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2785), student0.getCompletedCredits());
      assertEquals("<^", student0.getEmail());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getSecondarySchoolGraduationYear());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getAffirmativePolicy());
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(student0);
      
      String string0 = student0.getAdmissionTerm();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-649), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2581), curriculum0.getMinNumberOfTerms());
      assertEquals((-2581), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1913, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(6, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-213), student0.getComplementaryHours());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals(", mandatoryHours=", student0.getNationality());
      assertEquals((-2581), student0.getMobilityTerms());
      assertEquals("@Z!V;8.{CJE", student0.getCountry());
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals("<^", student0.getName());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-2581), student0.getMandatoryCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(15, student0.getCompletedTerms());
      assertEquals("6= gF@!j", student0.getCurriculumCode());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("totalLoadTime", student0.getStatusStr());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getCourseCode());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("Vx [cx)oG", student0.getPlaceOfBirth());
      assertEquals(", attemptedCredits=", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getNationalId());
      assertEquals("Vx [cx)oG", student0.getGender());
      assertEquals((-2696), student0.getOptionalHours());
      assertEquals((-208), student0.getComplementaryCredits());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-2696), student0.getEnrolledCredits());
      assertEquals("@Z!V;8.{CJE", student0.getAdmissionStr());
      assertEquals((-1312.50381482), student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals("Vx [cx)oG", student0.getStatusTerm());
      assertEquals("Vx [cx)oG", student0.getBirthDate());
      assertEquals(11, student0.getStatusIndex());
      assertEquals((-2785), student0.getCompletedCredits());
      assertEquals("<^", student0.getEmail());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getSecondarySchoolGraduationYear());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getAffirmativePolicy());
      assertFalse(arrayDeque0.contains(""));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-12931), (-12931), 40, 2773, (-3647), 40, (-4340), (-2240), 0, (-4340), treeSet0, treeSet0, treeSet0, treeSet0, treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2773, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-3647), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2240), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-23049.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-4340), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-12931), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-12931), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-4340), curriculum0.getMaxNumberOfTerms());
      assertEquals(40, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(40, curriculum0.getMinNumberOfTerms());
      assertFalse(arrayList0.contains((-12931)));
      assertFalse(treeSet0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "", "", "", "", "M;NB?(Bb_2'ppDF);c", "+&", "", ", placeOfBirth='", "M;NB?(Bb_2'ppDF);c", "", studentStatus0, "itB86V3E_oB", (String) null, "X^(0iWV4", "itB86V3E_oB", "", ", email='", ", placeOfBirth='", "P", "P", curriculum0, 11, 6, 0, (-12931), (-1908), (-12931), (-12931), 0.0, (-2240), 11, (-4340), (-2240), 65536, 15, 11, 796.3969);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2773, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-3647), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2240), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-23049.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-4340), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-12931), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-12931), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-4340), curriculum0.getMaxNumberOfTerms());
      assertEquals(40, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(40, curriculum0.getMinNumberOfTerms());
      assertEquals((-12931), student0.getAttemptedCredits());
      assertEquals(11, student0.getMandatoryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", email='", student0.getSecondarySchool());
      assertEquals((-25856), student0.getCompletedCredits());
      assertEquals("M;NB?(Bb_2'ppDF);c", student0.getRace());
      assertEquals("M;NB?(Bb_2'ppDF);c", student0.getMaritalStatus());
      assertEquals("", student0.getCountry());
      assertEquals("P", student0.getCurriculumCode());
      assertEquals((-4340), student0.getCompletedTerms());
      assertEquals("P", student0.getCourseCode());
      assertEquals("+&", student0.getNationality());
      assertEquals("itB86V3E_oB", student0.getStatusTerm());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-12931), student0.getComplementaryCredits());
      assertEquals(15, student0.getMobilityTerms());
      assertEquals((-2240.0), student0.getMc(), 0.01);
      assertEquals("", student0.getBirthDate());
      assertEquals(", placeOfBirth='", student0.getSecondarySchoolGraduationYear());
      assertEquals(11.0, student0.getIea(), 0.01);
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals((-2240), student0.getSuspendedTerms());
      assertEquals(796.3969, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(11, student0.getEnrolledCredits());
      assertEquals("itB86V3E_oB", student0.getDisabilities());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-12931), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getEmail());
      assertEquals((-1908), student0.getComplementaryHours());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("X^(0iWV4", student0.getAdmissionTerm());
      assertEquals("", student0.getName());
      assertEquals(6, student0.getMandatoryCredits());
      assertNull(student0.getAdmissionStr());
      assertEquals(65536, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getNationalId());
      assertFalse(arrayList0.contains((-12931)));
      assertFalse(treeSet0.contains(""));
      assertNotNull(student0);
      
      String string0 = student0.getAdmissionStr();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2773, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-3647), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-2240), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-23049.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-4340), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-12931), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-12931), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-4340), curriculum0.getMaxNumberOfTerms());
      assertEquals(40, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(40, curriculum0.getMinNumberOfTerms());
      assertEquals((-12931), student0.getAttemptedCredits());
      assertEquals(11, student0.getMandatoryHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", email='", student0.getSecondarySchool());
      assertEquals((-25856), student0.getCompletedCredits());
      assertEquals("M;NB?(Bb_2'ppDF);c", student0.getRace());
      assertEquals("M;NB?(Bb_2'ppDF);c", student0.getMaritalStatus());
      assertEquals("", student0.getCountry());
      assertEquals("P", student0.getCurriculumCode());
      assertEquals((-4340), student0.getCompletedTerms());
      assertEquals("P", student0.getCourseCode());
      assertEquals("+&", student0.getNationality());
      assertEquals("itB86V3E_oB", student0.getStatusTerm());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-12931), student0.getComplementaryCredits());
      assertEquals(15, student0.getMobilityTerms());
      assertEquals((-2240.0), student0.getMc(), 0.01);
      assertEquals("", student0.getBirthDate());
      assertEquals(", placeOfBirth='", student0.getSecondarySchoolGraduationYear());
      assertEquals(11.0, student0.getIea(), 0.01);
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals((-2240), student0.getSuspendedTerms());
      assertEquals(796.3969, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(11, student0.getEnrolledCredits());
      assertEquals("itB86V3E_oB", student0.getDisabilities());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-12931), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getEmail());
      assertEquals((-1908), student0.getComplementaryHours());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("X^(0iWV4", student0.getAdmissionTerm());
      assertEquals("", student0.getName());
      assertEquals(6, student0.getMandatoryCredits());
      assertNull(student0.getAdmissionStr());
      assertEquals(65536, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getNationalId());
      assertFalse(arrayList0.contains((-12931)));
      assertFalse(treeSet0.contains(""));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", "Expected insertions (%s) must be >= 0", "", ", country='", "Expected insertions (%s) must be >= 0", "I2ipOQvtYv1FzuH^", "", "", (String) null, studentStatus0, "", "", "", "", "I2ipOQvtYv1FzuH^", "", "", "I2ipOQvtYv1FzuH^", "MI0", (Curriculum) null, 0, 0, 0, 0, 87855567, (-3975), 0, 885.703024104128, 0, (-3799.873), (-213), 0, 0, (-1591), 39, 0);
      assertEquals(39, student0.getEnrolledCredits());
      assertEquals("Expected insertions (%s) must be >= 0", student0.getEmail());
      assertEquals("I2ipOQvtYv1FzuH^", student0.getAffirmativePolicy());
      assertEquals(87855567, student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-1591), student0.getMobilityTerms());
      assertEquals(885.703024104128, student0.getGpa(), 0.01);
      assertEquals("I2ipOQvtYv1FzuH^", student0.getCourseCode());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getGender());
      assertEquals((-3975), student0.getCompletedCredits());
      assertEquals(", country='", student0.getMaritalStatus());
      assertEquals("MI0", student0.getCurriculumCode());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("Expected insertions (%s) must be >= 0", student0.getNationality());
      assertNull(student0.getStatusStr());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-3975), student0.getComplementaryCredits());
      assertEquals("", student0.getNationalId());
      assertEquals("I2ipOQvtYv1FzuH^", student0.getCountry());
      assertEquals("", student0.getName());
      assertEquals((-3799.873), student0.getIea(), 0.01);
      assertEquals((-213), student0.getCompletedTerms());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getRace());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNotNull(student0);
      
      String string0 = student0.getAdmissionStr();
      assertEquals(39, student0.getEnrolledCredits());
      assertEquals("Expected insertions (%s) must be >= 0", student0.getEmail());
      assertEquals("I2ipOQvtYv1FzuH^", student0.getAffirmativePolicy());
      assertEquals(87855567, student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-1591), student0.getMobilityTerms());
      assertEquals(885.703024104128, student0.getGpa(), 0.01);
      assertEquals("I2ipOQvtYv1FzuH^", student0.getCourseCode());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getGender());
      assertEquals((-3975), student0.getCompletedCredits());
      assertEquals(", country='", student0.getMaritalStatus());
      assertEquals("MI0", student0.getCurriculumCode());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("Expected insertions (%s) must be >= 0", student0.getNationality());
      assertNull(student0.getStatusStr());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-3975), student0.getComplementaryCredits());
      assertEquals("", student0.getNationalId());
      assertEquals("I2ipOQvtYv1FzuH^", student0.getCountry());
      assertEquals("", student0.getName());
      assertEquals((-3799.873), student0.getIea(), 0.01);
      assertEquals((-213), student0.getCompletedTerms());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getRace());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("vKTgy5V?mxbq", "", ", email='", ", email='", ", maritalStatus='", "#/Ob", ", email='", "vKTgy5V?mxbq", ", email='", "", ", maritalStatus='", ")N&l$]DIj+VSn$+by", studentStatus0, "/x~:YcQPoY", "CharMatcher.javaDigit()", "CharMatcher.javaDigit()", "6}YHq|iPJGXHK", "0tNtZh0o%", "/x~:YcQPoY", "CLOSED", "", "6}YHq|iPJGXHK", (Curriculum) null, 0, 0, 0, 0, (-341), (-51), (-341), 0, 0, 0.03, (-341), 117, 0, 0, 4, 0.0);
      assertEquals(", maritalStatus='", student0.getRace());
      assertEquals("0tNtZh0o%", student0.getAffirmativePolicy());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", maritalStatus='", student0.getEmail());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("6}YHq|iPJGXHK", student0.getCurriculumCode());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("#/Ob", student0.getGender());
      assertEquals((-51), student0.getComplementaryCredits());
      assertEquals(4, student0.getEnrolledCredits());
      assertEquals("CLOSED", student0.getSecondarySchoolGraduationYear());
      assertEquals("CharMatcher.javaDigit()", student0.getAdmissionTerm());
      assertEquals((-341), student0.getCompletedTerms());
      assertEquals((-341), student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(117, student0.getSuspendedTerms());
      assertEquals(", email='", student0.getCountry());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("/x~:YcQPoY", student0.getStatusTerm());
      assertEquals((-341), student0.getAttemptedCredits());
      assertEquals(", email='", student0.getMaritalStatus());
      assertEquals((-51), student0.getCompletedCredits());
      assertEquals(", email='", student0.getName());
      assertEquals(", email='", student0.getBirthDate());
      assertEquals("6}YHq|iPJGXHK", student0.getDisabilities());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getNationalId());
      assertEquals(")N&l$]DIj+VSn$+by", student0.getStatusStr());
      assertEquals("vKTgy5V?mxbq", student0.getNationality());
      assertEquals("/x~:YcQPoY", student0.getSecondarySchool());
      assertEquals("CharMatcher.javaDigit()", student0.getAdmissionStr());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNotNull(student0);
      
      double double0 = student0.getAdmissionGrade();
      assertEquals(", maritalStatus='", student0.getRace());
      assertEquals("0tNtZh0o%", student0.getAffirmativePolicy());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", maritalStatus='", student0.getEmail());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("6}YHq|iPJGXHK", student0.getCurriculumCode());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("#/Ob", student0.getGender());
      assertEquals((-51), student0.getComplementaryCredits());
      assertEquals(4, student0.getEnrolledCredits());
      assertEquals("CLOSED", student0.getSecondarySchoolGraduationYear());
      assertEquals("CharMatcher.javaDigit()", student0.getAdmissionTerm());
      assertEquals((-341), student0.getCompletedTerms());
      assertEquals((-341), student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(117, student0.getSuspendedTerms());
      assertEquals(", email='", student0.getCountry());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("/x~:YcQPoY", student0.getStatusTerm());
      assertEquals((-341), student0.getAttemptedCredits());
      assertEquals(", email='", student0.getMaritalStatus());
      assertEquals((-51), student0.getCompletedCredits());
      assertEquals(", email='", student0.getName());
      assertEquals(", email='", student0.getBirthDate());
      assertEquals("6}YHq|iPJGXHK", student0.getDisabilities());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getNationalId());
      assertEquals(")N&l$]DIj+VSn$+by", student0.getStatusStr());
      assertEquals("vKTgy5V?mxbq", student0.getNationality());
      assertEquals("/x~:YcQPoY", student0.getSecondarySchool());
      assertEquals("CharMatcher.javaDigit()", student0.getAdmissionStr());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("dg3cPr-ZS/J|`^{9", ", status=", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 933, 0, 324, 0, 933, (-1671), set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(324, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(", status=", curriculum0.getCurriculumCode());
      assertEquals("dg3cPr-ZS/J|`^{9", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1671), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(933, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(933, curriculum0.getMinActivitiesNeeded());
      assertFalse(arrayList0.contains(933));
      assertFalse(set0.contains(", status="));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("a8%l5ConU4", "a8%l5ConU4", "com.google.common.collect.AbstractMultiset", "", "com.google.common.collect.ImmutableMap", "com.google.common.collect.AbstractMultiset", "", "", ", status=", ", status=", "", "", studentStatus0, "com.google.common.collect.ImmutableMap", "*6yK&El", ", race='", "", ", status=", "dg3cPr-ZS/J|`^{9", "", "", "", curriculum0, 44, (-1671), 933, (-862048943), 753, 753, 44, 753, 0.0, (-1671), 0, 2519, 937, 99, (-862048943), 933);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(324, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(", status=", curriculum0.getCurriculumCode());
      assertEquals("dg3cPr-ZS/J|`^{9", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1671), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(933, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(933, curriculum0.getMinActivitiesNeeded());
      assertEquals("", student0.getCourseCode());
      assertEquals("com.google.common.collect.AbstractMultiset", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("com.google.common.collect.ImmutableMap", student0.getStatusTerm());
      assertEquals(937, student0.getInstitutionalEnrollments());
      assertEquals((-1671), student0.getMandatoryCredits());
      assertEquals(2519, student0.getSuspendedTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getStatusStr());
      assertEquals("*6yK&El", student0.getAdmissionStr());
      assertEquals(753, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-862048943), student0.getOptionalCredits());
      assertEquals(753, student0.getComplementaryHours());
      assertEquals(", race='", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals(933.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-862049861), student0.getCompletedCredits());
      assertEquals((-862048943), student0.getEnrolledCredits());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertEquals(753.0, student0.getGpa(), 0.01);
      assertEquals(", status=", student0.getCountry());
      assertEquals("com.google.common.collect.ImmutableMap", student0.getEmail());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("a8%l5ConU4", student0.getNationalId());
      assertEquals(933, student0.getOptionalHours());
      assertEquals(44, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(99, student0.getMobilityTerms());
      assertEquals("", student0.getRace());
      assertEquals("dg3cPr-ZS/J|`^{9", student0.getSecondarySchool());
      assertEquals("", student0.getDisabilities());
      assertEquals((-1671.0), student0.getIea(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("com.google.common.collect.AbstractMultiset", student0.getName());
      assertEquals(44, student0.getAttemptedCredits());
      assertFalse(arrayList0.contains(933));
      assertFalse(set0.contains("com.google.common.collect.ImmutableMap"));
      assertNotNull(student0);
      
      double double0 = student0.getAdmissionGrade();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(324, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(", status=", curriculum0.getCurriculumCode());
      assertEquals("dg3cPr-ZS/J|`^{9", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1671), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(933, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(933, curriculum0.getMinActivitiesNeeded());
      assertEquals("", student0.getCourseCode());
      assertEquals("com.google.common.collect.AbstractMultiset", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("com.google.common.collect.ImmutableMap", student0.getStatusTerm());
      assertEquals(937, student0.getInstitutionalEnrollments());
      assertEquals((-1671), student0.getMandatoryCredits());
      assertEquals(2519, student0.getSuspendedTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getStatusStr());
      assertEquals("*6yK&El", student0.getAdmissionStr());
      assertEquals(753, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-862048943), student0.getOptionalCredits());
      assertEquals(753, student0.getComplementaryHours());
      assertEquals(", race='", student0.getAdmissionTerm());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals(933.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-862049861), student0.getCompletedCredits());
      assertEquals((-862048943), student0.getEnrolledCredits());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertEquals(753.0, student0.getGpa(), 0.01);
      assertEquals(", status=", student0.getCountry());
      assertEquals("com.google.common.collect.ImmutableMap", student0.getEmail());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("a8%l5ConU4", student0.getNationalId());
      assertEquals(933, student0.getOptionalHours());
      assertEquals(44, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(99, student0.getMobilityTerms());
      assertEquals("", student0.getRace());
      assertEquals("dg3cPr-ZS/J|`^{9", student0.getSecondarySchool());
      assertEquals("", student0.getDisabilities());
      assertEquals((-1671.0), student0.getIea(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("com.google.common.collect.AbstractMultiset", student0.getName());
      assertEquals(44, student0.getAttemptedCredits());
      assertFalse(arrayList0.contains(933));
      assertFalse(set0.contains("com.google.common.collect.ImmutableMap"));
      assertEquals(933.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ", disabilities='", ", disabilities='", ", disabilities='", ", status=", ", status=", "B[%", "", studentStatus0, "B[%", "B[%", "", "0LzRj5H", ", disabilities='", "cxo^vN!;<%3", "", "", "", (Curriculum) null, 0, 0, 0, 0, 0, 0, 0, 203.24446603172936, 0, 474.793453, 0, 264, 264, 677, 784, 264);
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(", status=", student0.getCountry());
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(", status=", student0.getEmail());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("B[%", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("", student0.getNationalId());
      assertEquals(264.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(264, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals("", student0.getBirthDate());
      assertNotNull(student0);
      
      int int0 = student0.compareTo(student0);
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(", status=", student0.getCountry());
      assertEquals("B[%", student0.getAdmissionStr());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(", status=", student0.getEmail());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(264, student0.getSuspendedTerms());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("B[%", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("", student0.getNationalId());
      assertEquals(264.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(784, student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("B[%", student0.getStatusTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertEquals(264, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("cxo^vN!;<%3", student0.getSecondarySchool());
      assertEquals("", student0.getBirthDate());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("eH+QJcl<s", "eH+QJcl<s", "eH+QJcl<s", "", ", status=", "", ", status=", "", "e&D4;**W#F", (String) null, ";-!R3.*D-Aa<4.?", "M~CsriK)WmHB8GE%", studentStatus0, "e&D4;**W#F", "e&D4;**W#F", ";-!R3.*D-Aa<4.?", "M!.wo6ABqux4%lsD_du", "", "M~CsriK)WmHB8GE%", "(m#'Rye>mI<du", "V0T91D:``DP", "M~CsriK)WmHB8GE%", (Curriculum) null, 0, 1105, (-3139), 1105, 587, 0, 0, 535.8543361, 0.0, 0.0, 3148, 6, 6, (-3139), 1105, 2018.55);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals((-3139), student0.getMobilityTerms());
      assertEquals(2018.55, student0.getAdmissionGrade(), 0.01);
      assertEquals("M~CsriK)WmHB8GE%", student0.getCurriculumCode());
      assertEquals(";-!R3.*D-Aa<4.?", student0.getAdmissionTerm());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("e&D4;**W#F", student0.getStatusTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("eH+QJcl<s", student0.getName());
      assertEquals("M~CsriK)WmHB8GE%", student0.getStatusStr());
      assertEquals("eH+QJcl<s", student0.getNationalId());
      assertEquals(2210, student0.getCompletedCredits());
      assertEquals(6, student0.getSuspendedTerms());
      assertEquals((-3139), student0.getOptionalHours());
      assertEquals(", status=", student0.getEmail());
      assertEquals("e&D4;**W#F", student0.getCountry());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("V0T91D:``DP", student0.getCourseCode());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(", status=", student0.getMaritalStatus());
      assertEquals("M!.wo6ABqux4%lsD_du", student0.getDisabilities());
      assertEquals(535.8543361, student0.getGpa(), 0.01);
      assertEquals("(m#'Rye>mI<du", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(1105, student0.getMandatoryCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("e&D4;**W#F", student0.getAdmissionStr());
      assertEquals(3148, student0.getCompletedTerms());
      assertEquals("", student0.getNationality());
      assertEquals(587, student0.getComplementaryHours());
      assertEquals(";-!R3.*D-Aa<4.?", student0.getRace());
      assertEquals(1105, student0.getEnrolledCredits());
      assertEquals(1105, student0.getOptionalCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("M~CsriK)WmHB8GE%", student0.getSecondarySchool());
      assertEquals(6, student0.getInstitutionalEnrollments());
      assertNotNull(student0);
      
      Student student1 = new Student("(m#'Rye>mI<du", "nPu+5<]nQ8r`9", "Q`#-", ";.5", "D=B4", "(m#'Rye>mI<du", (String) null, "D=B4", "F6Eo", "nPu+5<]nQ8r`9", ", complementaryCredits=", "", studentStatus0, "", "F6Eo", "RD*;9", "", "F6Eo", "The FilenameFilter must not be null", "", "UsK!@\"_pn&", "QUK", (Curriculum) null, 6, 0, 3148, 0, (-505), 0, 0, (-2552.38317410777), (-2240.5266705456816), 0.5, 0, 6, 0, (-505), 0, 0.0);
      assertEquals("RD*;9", student1.getAdmissionTerm());
      assertEquals(0, student1.getAttemptedCredits());
      assertEquals(0, student1.getCompletedTerms());
      assertEquals((-2240.5266705456816), student1.getMc(), 0.01);
      assertEquals(11, student1.getStatusIndex());
      assertEquals("The FilenameFilter must not be null", student1.getSecondarySchool());
      assertEquals(6, student1.getSuspendedTerms());
      assertEquals((-505), student1.getComplementaryHours());
      assertEquals(0.0, student1.getAdmissionGrade(), 0.01);
      assertEquals("D=B4", student1.getEmail());
      assertEquals("", student1.getStatusTerm());
      assertEquals("(m#'Rye>mI<du", student1.getGender());
      assertEquals("F6Eo", student1.getAdmissionStr());
      assertEquals(6, student1.getMandatoryHours());
      assertEquals("F6Eo", student1.getAffirmativePolicy());
      assertEquals("F6Eo", student1.getCountry());
      assertEquals("", student1.getSecondarySchoolGraduationYear());
      assertEquals(3148, student1.getOptionalHours());
      assertEquals((-2552.38317410777), student1.getGpa(), 0.01);
      assertNull(student1.getMaritalStatus());
      assertEquals("UsK!@\"_pn&", student1.getCourseCode());
      assertEquals(0, student1.getComplementaryCredits());
      assertEquals("nPu+5<]nQ8r`9", student1.getPlaceOfBirth());
      assertEquals(0, student1.getOptionalCredits());
      assertEquals(0, student1.getEnrolledCredits());
      assertEquals(", complementaryCredits=", student1.getRace());
      assertEquals(0, student1.getCompletedCredits());
      assertEquals(0, student1.getMandatoryCredits());
      assertEquals(";.5", student1.getBirthDate());
      assertEquals("QUK", student1.getCurriculumCode());
      assertEquals("D=B4", student1.getNationality());
      assertEquals("Q`#-", student1.getName());
      assertEquals(StudentStatus.ALUMNUS, student1.getStatus());
      assertEquals("nPu+5<]nQ8r`9", student1.getNationalId());
      assertEquals("", student1.getDisabilities());
      assertEquals((-505), student1.getMobilityTerms());
      assertEquals(0.5, student1.getIea(), 0.01);
      assertEquals(0, student1.getInstitutionalEnrollments());
      assertEquals("", student1.getStatusStr());
      assertFalse(student1.equals((Object)student0));
      assertNotNull(student1);
      
      int int0 = student0.compareTo(student1);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals((-3139), student0.getMobilityTerms());
      assertEquals(2018.55, student0.getAdmissionGrade(), 0.01);
      assertEquals("M~CsriK)WmHB8GE%", student0.getCurriculumCode());
      assertEquals(";-!R3.*D-Aa<4.?", student0.getAdmissionTerm());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("e&D4;**W#F", student0.getStatusTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("eH+QJcl<s", student0.getName());
      assertEquals("M~CsriK)WmHB8GE%", student0.getStatusStr());
      assertEquals("eH+QJcl<s", student0.getNationalId());
      assertEquals(2210, student0.getCompletedCredits());
      assertEquals(6, student0.getSuspendedTerms());
      assertEquals((-3139), student0.getOptionalHours());
      assertEquals(", status=", student0.getEmail());
      assertEquals("e&D4;**W#F", student0.getCountry());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("V0T91D:``DP", student0.getCourseCode());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(", status=", student0.getMaritalStatus());
      assertEquals("M!.wo6ABqux4%lsD_du", student0.getDisabilities());
      assertEquals(535.8543361, student0.getGpa(), 0.01);
      assertEquals("(m#'Rye>mI<du", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(1105, student0.getMandatoryCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("e&D4;**W#F", student0.getAdmissionStr());
      assertEquals(3148, student0.getCompletedTerms());
      assertEquals("", student0.getNationality());
      assertEquals(587, student0.getComplementaryHours());
      assertEquals(";-!R3.*D-Aa<4.?", student0.getRace());
      assertEquals(1105, student0.getEnrolledCredits());
      assertEquals(1105, student0.getOptionalCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("M~CsriK)WmHB8GE%", student0.getSecondarySchool());
      assertEquals(6, student0.getInstitutionalEnrollments());
      assertEquals("RD*;9", student1.getAdmissionTerm());
      assertEquals(0, student1.getAttemptedCredits());
      assertEquals(0, student1.getCompletedTerms());
      assertEquals((-2240.5266705456816), student1.getMc(), 0.01);
      assertEquals(11, student1.getStatusIndex());
      assertEquals("The FilenameFilter must not be null", student1.getSecondarySchool());
      assertEquals(6, student1.getSuspendedTerms());
      assertEquals((-505), student1.getComplementaryHours());
      assertEquals(0.0, student1.getAdmissionGrade(), 0.01);
      assertEquals("D=B4", student1.getEmail());
      assertEquals("", student1.getStatusTerm());
      assertEquals("(m#'Rye>mI<du", student1.getGender());
      assertEquals("F6Eo", student1.getAdmissionStr());
      assertEquals(6, student1.getMandatoryHours());
      assertEquals("F6Eo", student1.getAffirmativePolicy());
      assertEquals("F6Eo", student1.getCountry());
      assertEquals("", student1.getSecondarySchoolGraduationYear());
      assertEquals(3148, student1.getOptionalHours());
      assertEquals((-2552.38317410777), student1.getGpa(), 0.01);
      assertNull(student1.getMaritalStatus());
      assertEquals("UsK!@\"_pn&", student1.getCourseCode());
      assertEquals(0, student1.getComplementaryCredits());
      assertEquals("nPu+5<]nQ8r`9", student1.getPlaceOfBirth());
      assertEquals(0, student1.getOptionalCredits());
      assertEquals(0, student1.getEnrolledCredits());
      assertEquals(", complementaryCredits=", student1.getRace());
      assertEquals(0, student1.getCompletedCredits());
      assertEquals(0, student1.getMandatoryCredits());
      assertEquals(";.5", student1.getBirthDate());
      assertEquals("QUK", student1.getCurriculumCode());
      assertEquals("D=B4", student1.getNationality());
      assertEquals("Q`#-", student1.getName());
      assertEquals(StudentStatus.ALUMNUS, student1.getStatus());
      assertEquals("nPu+5<]nQ8r`9", student1.getNationalId());
      assertEquals("", student1.getDisabilities());
      assertEquals((-505), student1.getMobilityTerms());
      assertEquals(0.5, student1.getIea(), 0.01);
      assertEquals(0, student1.getInstitutionalEnrollments());
      assertEquals("", student1.getStatusStr());
      assertEquals(61, int0);
      assertFalse(student0.equals((Object)student1));
      assertFalse(student1.equals((Object)student0));
      assertNotSame(student0, student1);
      assertNotSame(student1, student0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Curriculum curriculum0 = new Curriculum("cD=TLxWoy1~7:ZA", "1/xj4`", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 5, 2966, 2966, 2, 5, 1023, 5, 2966, 0, (-154), vector0, arrayDeque0, arrayDeque0, arrayDeque0, vector0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("cD=TLxWoy1~7:ZA", curriculum0.getCourseCode());
      assertEquals((-154), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2966, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals(5939.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2966, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("1/xj4`", curriculum0.getCurriculumCode());
      assertEquals(2966, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculum0.getMaxNumberOfTerms());
      assertEquals(1023, curriculum0.getMinNumberOfTerms());
      assertFalse(arrayList0.contains(1023));
      assertFalse(vector0.contains("1/xj4`"));
      assertFalse(arrayDeque0.contains("1/xj4`"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("Y:Rjds\"66qP7NL=7e@", "th*|dH#i_lZh>!", "Y:Rjds\"66qP7NL=7e@", "th*|dH#i_lZh>!", "B+2.}}FtF;{d", "distance", "Y:Rjds\"66qP7NL=7e@", "cD=TLxWoy1~7:ZA", "cD=TLxWoy1~7:ZA", "pND./9y", "j-v6cTMFGP3=", "$w$IAM7", studentStatus0, "Y:Rjds\"66qP7NL=7e@", "CharMatcher.javaLetterOrDigit()", "pND./9y", "Y:Rjds\"66qP7NL=7e@", "B~vp", ":", "distance", "CharMatcher.javaLetterOrDigit()", "", curriculum0, (-154), 5, 0, 2, (-2922), 0, 2, (-2922), (-1.0), (-2922), (-154), 8, (-2922), (-154), 1073741823, 0.0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("cD=TLxWoy1~7:ZA", curriculum0.getCourseCode());
      assertEquals((-154), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2966, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals(5939.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2966, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("1/xj4`", curriculum0.getCurriculumCode());
      assertEquals(2966, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculum0.getMaxNumberOfTerms());
      assertEquals(1023, curriculum0.getMinNumberOfTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals((-2922), student0.getInstitutionalEnrollments());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getAdmissionStr());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getStatusTerm());
      assertEquals((-154), student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(8, student0.getSuspendedTerms());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(5, student0.getMandatoryCredits());
      assertEquals("$w$IAM7", student0.getStatusStr());
      assertEquals("distance", student0.getGender());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getCourseCode());
      assertEquals((-2922), student0.getComplementaryHours());
      assertEquals(1073741823, student0.getEnrolledCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(":", student0.getSecondarySchool());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getNationality());
      assertEquals("j-v6cTMFGP3=", student0.getRace());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getName());
      assertEquals("B~vp", student0.getAffirmativePolicy());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals("distance", student0.getSecondarySchoolGraduationYear());
      assertEquals("pND./9y", student0.getAdmissionTerm());
      assertEquals("pND./9y", student0.getPlaceOfBirth());
      assertEquals((-2922.0), student0.getIea(), 0.01);
      assertEquals("th*|dH#i_lZh>!", student0.getBirthDate());
      assertEquals("th*|dH#i_lZh>!", student0.getNationalId());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getCountry());
      assertEquals((-154), student0.getCompletedTerms());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getMaritalStatus());
      assertEquals("B+2.}}FtF;{d", student0.getEmail());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(7, student0.getCompletedCredits());
      assertEquals((-2922.0), student0.getGpa(), 0.01);
      assertEquals((-154), student0.getMandatoryHours());
      assertFalse(arrayList0.contains((-154)));
      assertFalse(vector0.contains("$w$IAM7"));
      assertFalse(arrayDeque0.contains("$w$IAM7"));
      assertNotNull(student0);
      
      Student student1 = new Student("z+dr]yL(]V", ":", "V:D1v=/g2LW?", "$w$IAM7", "th*|dH#i_lZh>!", "distance", "$w$IAM7", (String) null, "com.google.common.hash.Funnels$LongFunnel", "The list of prefixes must not be null", "V:D1v=/g2LW?", "U/D|wziU;%5r2t9", studentStatus0, "", "laaUc,U E+\"aU=f", "RA{", "", "com.google.common.hash.Funnels$LongFunnel", "?&b)", (String) null, "", "z+dr]yL(]V", curriculum0, 0, 8, 8, (-625), 1073741823, 3929, 8, 1297.9518237, (-1.0), 554.77, 2966, (-2922), 1, 8, (-629), 0.0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("cD=TLxWoy1~7:ZA", curriculum0.getCourseCode());
      assertEquals((-154), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2966, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals(5939.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2966, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("1/xj4`", curriculum0.getCurriculumCode());
      assertEquals(2966, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculum0.getMaxNumberOfTerms());
      assertEquals(1023, curriculum0.getMinNumberOfTerms());
      assertEquals(8, student1.getMobilityTerms());
      assertNull(student1.getNationality());
      assertEquals("z+dr]yL(]V", student1.getCurriculumCode());
      assertEquals(2966, student1.getCompletedTerms());
      assertEquals("V:D1v=/g2LW?", student1.getRace());
      assertEquals(3929, student1.getComplementaryCredits());
      assertEquals(3312, student1.getCompletedCredits());
      assertEquals("", student1.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student1.getStatus());
      assertEquals(1297.9518237, student1.getGpa(), 0.01);
      assertEquals("distance", student1.getGender());
      assertEquals(0.0, student1.getAdmissionGrade(), 0.01);
      assertEquals("", student1.getCourseCode());
      assertEquals("The list of prefixes must not be null", student1.getPlaceOfBirth());
      assertEquals("$w$IAM7", student1.getMaritalStatus());
      assertEquals("", student1.getStatusTerm());
      assertEquals(1073741823, student1.getComplementaryHours());
      assertEquals("U/D|wziU;%5r2t9", student1.getStatusStr());
      assertEquals("?&b)", student1.getSecondarySchool());
      assertEquals(8, student1.getMandatoryCredits());
      assertEquals("th*|dH#i_lZh>!", student1.getEmail());
      assertEquals("$w$IAM7", student1.getBirthDate());
      assertEquals((-1.0), student1.getMc(), 0.01);
      assertEquals((-629), student1.getEnrolledCredits());
      assertEquals(554.77, student1.getIea(), 0.01);
      assertEquals(8, student1.getAttemptedCredits());
      assertNull(student1.getSecondarySchoolGraduationYear());
      assertEquals("V:D1v=/g2LW?", student1.getName());
      assertEquals("RA{", student1.getAdmissionTerm());
      assertEquals(":", student1.getNationalId());
      assertEquals(1, student1.getInstitutionalEnrollments());
      assertEquals((-625), student1.getOptionalCredits());
      assertEquals((-2922), student1.getSuspendedTerms());
      assertEquals(8, student1.getOptionalHours());
      assertEquals(0, student1.getMandatoryHours());
      assertEquals("com.google.common.hash.Funnels$LongFunnel", student1.getCountry());
      assertEquals(11, student1.getStatusIndex());
      assertEquals("laaUc,U E+\"aU=f", student1.getAdmissionStr());
      assertEquals("com.google.common.hash.Funnels$LongFunnel", student1.getAffirmativePolicy());
      assertFalse(arrayList0.contains((-154)));
      assertFalse(vector0.contains("$w$IAM7"));
      assertFalse(arrayDeque0.contains("$w$IAM7"));
      assertFalse(student1.equals((Object)student0));
      assertNotNull(student1);
      
      int int0 = student0.compareTo(student1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("cD=TLxWoy1~7:ZA", curriculum0.getCourseCode());
      assertEquals((-154), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2966, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(5, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(5, curriculum0.getMinActivitiesNeeded());
      assertEquals(5939.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2966, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("1/xj4`", curriculum0.getCurriculumCode());
      assertEquals(2966, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5, curriculum0.getMaxNumberOfTerms());
      assertEquals(1023, curriculum0.getMinNumberOfTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals((-2922), student0.getInstitutionalEnrollments());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getAdmissionStr());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getStatusTerm());
      assertEquals((-154), student0.getMobilityTerms());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(8, student0.getSuspendedTerms());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(5, student0.getMandatoryCredits());
      assertEquals("$w$IAM7", student0.getStatusStr());
      assertEquals("distance", student0.getGender());
      assertEquals("CharMatcher.javaLetterOrDigit()", student0.getCourseCode());
      assertEquals((-2922), student0.getComplementaryHours());
      assertEquals(1073741823, student0.getEnrolledCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(":", student0.getSecondarySchool());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getNationality());
      assertEquals("j-v6cTMFGP3=", student0.getRace());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getName());
      assertEquals("B~vp", student0.getAffirmativePolicy());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals("distance", student0.getSecondarySchoolGraduationYear());
      assertEquals("pND./9y", student0.getAdmissionTerm());
      assertEquals("pND./9y", student0.getPlaceOfBirth());
      assertEquals((-2922.0), student0.getIea(), 0.01);
      assertEquals("th*|dH#i_lZh>!", student0.getBirthDate());
      assertEquals("th*|dH#i_lZh>!", student0.getNationalId());
      assertEquals("cD=TLxWoy1~7:ZA", student0.getCountry());
      assertEquals((-154), student0.getCompletedTerms());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getMaritalStatus());
      assertEquals("B+2.}}FtF;{d", student0.getEmail());
      assertEquals("Y:Rjds\"66qP7NL=7e@", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(7, student0.getCompletedCredits());
      assertEquals((-2922.0), student0.getGpa(), 0.01);
      assertEquals((-154), student0.getMandatoryHours());
      assertEquals(8, student1.getMobilityTerms());
      assertNull(student1.getNationality());
      assertEquals("z+dr]yL(]V", student1.getCurriculumCode());
      assertEquals(2966, student1.getCompletedTerms());
      assertEquals("V:D1v=/g2LW?", student1.getRace());
      assertEquals(3929, student1.getComplementaryCredits());
      assertEquals(3312, student1.getCompletedCredits());
      assertEquals("", student1.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student1.getStatus());
      assertEquals(1297.9518237, student1.getGpa(), 0.01);
      assertEquals("distance", student1.getGender());
      assertEquals(0.0, student1.getAdmissionGrade(), 0.01);
      assertEquals("", student1.getCourseCode());
      assertEquals("The list of prefixes must not be null", student1.getPlaceOfBirth());
      assertEquals("$w$IAM7", student1.getMaritalStatus());
      assertEquals("", student1.getStatusTerm());
      assertEquals(1073741823, student1.getComplementaryHours());
      assertEquals("U/D|wziU;%5r2t9", student1.getStatusStr());
      assertEquals("?&b)", student1.getSecondarySchool());
      assertEquals(8, student1.getMandatoryCredits());
      assertEquals("th*|dH#i_lZh>!", student1.getEmail());
      assertEquals("$w$IAM7", student1.getBirthDate());
      assertEquals((-1.0), student1.getMc(), 0.01);
      assertEquals((-629), student1.getEnrolledCredits());
      assertEquals(554.77, student1.getIea(), 0.01);
      assertEquals(8, student1.getAttemptedCredits());
      assertNull(student1.getSecondarySchoolGraduationYear());
      assertEquals("V:D1v=/g2LW?", student1.getName());
      assertEquals("RA{", student1.getAdmissionTerm());
      assertEquals(":", student1.getNationalId());
      assertEquals(1, student1.getInstitutionalEnrollments());
      assertEquals((-625), student1.getOptionalCredits());
      assertEquals((-2922), student1.getSuspendedTerms());
      assertEquals(8, student1.getOptionalHours());
      assertEquals(0, student1.getMandatoryHours());
      assertEquals("com.google.common.hash.Funnels$LongFunnel", student1.getCountry());
      assertEquals(11, student1.getStatusIndex());
      assertEquals("laaUc,U E+\"aU=f", student1.getAdmissionStr());
      assertEquals("com.google.common.hash.Funnels$LongFunnel", student1.getAffirmativePolicy());
      assertFalse(arrayList0.contains((-154)));
      assertFalse(vector0.contains("$w$IAM7"));
      assertFalse(arrayDeque0.contains("$w$IAM7"));
      assertEquals((-33), int0);
      assertFalse(student0.equals((Object)student1));
      assertFalse(student1.equals((Object)student0));
      assertNotSame(student0, student1);
      assertNotSame(student1, student0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("7>dOoq]>JvA't=ykf2", "", "7>dOoq]>JvA't=ykf2", "7>dOoq]>JvA't=ykf2", "", "CANCELADO REPROVOU TODAS POR FALTAS", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", (String) null, "RT", ", complementaryHours=", (String) null, studentStatus0, "W%0k[GzP:el", "org.apache.commons.io.filefilter.DelegateFileFilter", "7>dOoq]>JvA't=ykf2", "CANCELAMENTO POR ABANDONO", ", secondarySchool='", "CANCELAMENTO P/ MUDANCA CURSO", "", "CCNvW^xQjbE$'|Nbk", "W%0k[GzP:el", (Curriculum) null, 329, 329, 329, 329, 329, 11, 329, 0.03, (-1040.8452), 0.03, 0, 0, (-1107), 0, 0, 1.0);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals(329, student0.getOptionalHours());
      assertEquals("", student0.getNationalId());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals((-1107), student0.getInstitutionalEnrollments());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(329, student0.getOptionalCredits());
      assertEquals(329, student0.getComplementaryHours());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals(329, student0.getMandatoryHours());
      assertNull(student0.getStatusStr());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertEquals(669, student0.getCompletedCredits());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals("", student0.getEmail());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(329, student0.getMandatoryCredits());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertNull(student0.getCountry());
      assertEquals((-1040.8452), student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertEquals(329, student0.getAttemptedCredits());
      assertNotNull(student0);
      
      // Undeclared exception!
      try { 
        student0.getStatusIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Student", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("m\"0c(]L){|", "com.google.common.base.Converter$FunctionBasedConverter", "", ")P", ")P", (String) null, "com.google.common.base.Converter$FunctionBasedConverter", ":;],$yFYx@j4W$8A", "m\"0c(]L){|", "", "", "9q?t/;", studentStatus0, (String) null, "[/>4[dG", ":;],$yFYx@j4W$8A", "m\"0c(]L){|", "", "", "", "", ";fTV", (Curriculum) null, (-50), 4, (-1024), (-50), (-50), 4, 0, 0, 997.946039110772, 4, (-1024), (-50), 4, 0, 0, (-895.750095782769));
      assertEquals("m\"0c(]L){|", student0.getCountry());
      assertEquals("m\"0c(]L){|", student0.getDisabilities());
      assertEquals(4, student0.getComplementaryCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-50), student0.getComplementaryHours());
      assertNull(student0.getStatusTerm());
      assertEquals("com.google.common.base.Converter$FunctionBasedConverter", student0.getNationalId());
      assertEquals(4, student0.getMandatoryCredits());
      assertEquals("[/>4[dG", student0.getAdmissionStr());
      assertEquals(")P", student0.getEmail());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(":;],$yFYx@j4W$8A", student0.getNationality());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-50), student0.getSuspendedTerms());
      assertEquals(4, student0.getInstitutionalEnrollments());
      assertEquals((-895.750095782769), student0.getAdmissionGrade(), 0.01);
      assertEquals(997.946039110772, student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-1024), student0.getCompletedTerms());
      assertEquals((-1024), student0.getOptionalHours());
      assertEquals("9q?t/;", student0.getStatusStr());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertEquals(4.0, student0.getIea(), 0.01);
      assertEquals("", student0.getRace());
      assertEquals(")P", student0.getBirthDate());
      assertEquals(":;],$yFYx@j4W$8A", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-42), student0.getCompletedCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getName());
      assertEquals(";fTV", student0.getCurriculumCode());
      assertEquals("com.google.common.base.Converter$FunctionBasedConverter", student0.getMaritalStatus());
      assertEquals((-50), student0.getMandatoryHours());
      assertEquals((-50), student0.getOptionalCredits());
      assertNotNull(student0);
      
      Student student1 = new Student("", "m\"0c(]L){|", "m\"0c(]L){|", "}X;hiv*S%v", "", (String) null, ";fTV", "", "", "]", "", ", complementarySubjectsList=", studentStatus0, (String) null, "dO8!]mD][", "com.google.common.collect.AbstractMultiset", "5", "5", "CANCELAMENTO DE MATRICULA ", "", "", "}X;hiv*S%v", (Curriculum) null, 0, 4, (-50), (-50), (-50), (-1484), (-2390), (-1.0), 1.0, (-1933.4088282991283), 0, 0, (-50), (-1484), (-402), (-1.0));
      assertEquals("", student1.getCountry());
      assertEquals("", student1.getRace());
      assertEquals((-1484), student1.getMobilityTerms());
      assertEquals("CANCELAMENTO DE MATRICULA ", student1.getSecondarySchool());
      assertEquals((-50), student1.getOptionalHours());
      assertEquals((-1484), student1.getComplementaryCredits());
      assertEquals((-1.0), student1.getAdmissionGrade(), 0.01);
      assertEquals((-402), student1.getEnrolledCredits());
      assertEquals("", student1.getSecondarySchoolGraduationYear());
      assertEquals((-1.0), student1.getGpa(), 0.01);
      assertEquals("5", student1.getAffirmativePolicy());
      assertNull(student1.getStatusTerm());
      assertEquals("", student1.getEmail());
      assertEquals(0, student1.getSuspendedTerms());
      assertEquals("}X;hiv*S%v", student1.getCurriculumCode());
      assertEquals(4, student1.getMandatoryCredits());
      assertEquals(", complementarySubjectsList=", student1.getStatusStr());
      assertEquals((-1933.4088282991283), student1.getIea(), 0.01);
      assertEquals("", student1.getCourseCode());
      assertEquals((-50), student1.getOptionalCredits());
      assertEquals("dO8!]mD][", student1.getAdmissionStr());
      assertEquals(";fTV", student1.getMaritalStatus());
      assertEquals((-2390), student1.getAttemptedCredits());
      assertEquals(11, student1.getStatusIndex());
      assertNull(student1.getGender());
      assertEquals(0, student1.getMandatoryHours());
      assertEquals((-1530), student1.getCompletedCredits());
      assertEquals("]", student1.getPlaceOfBirth());
      assertEquals((-50), student1.getComplementaryHours());
      assertEquals("5", student1.getDisabilities());
      assertEquals("com.google.common.collect.AbstractMultiset", student1.getAdmissionTerm());
      assertEquals("m\"0c(]L){|", student1.getName());
      assertEquals((-50), student1.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ACTIVE, student1.getStatus());
      assertEquals("m\"0c(]L){|", student1.getNationalId());
      assertEquals(1.0, student1.getMc(), 0.01);
      assertEquals(0, student1.getCompletedTerms());
      assertEquals("", student1.getNationality());
      assertEquals("}X;hiv*S%v", student1.getBirthDate());
      assertFalse(student1.equals((Object)student0));
      assertNotNull(student1);
      
      // Undeclared exception!
      try { 
        student0.compareTo(student1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "c5q-A]VuJ;koP3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-11), (-11), 0, (-11), 0, 0, 5894, 0, 5894, (-11), treeSet0, treeSet0, priorityQueue0, treeSet0, priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", curriculum0.getCourseCode());
      assertEquals((-11), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5894, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-33.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-11), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(5894, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertFalse(treeSet0.contains("c5q-A]VuJ;koP3"));
      assertFalse(priorityQueue0.contains("c5q-A]VuJ;koP3"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "=Mho18%K^ZsL!", "(Blf6+pNT)9EP)cCC", "=Mho18%K^ZsL!", "9aUyR0C2Wf6S,#;4", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "(Blf6+pNT)9EP)cCC", "9aUyR0C2Wf6S,#;4", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "9aUyR0C2Wf6S,#;4", studentStatus0, ", namBe='", "c5q-A]VuJ;koP3", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "br.edu.ufcg.computacao.eureca.backend.core.models.Registration", "=Mho18%K^ZsL!", "=Mho18%K^ZsL!", (String) null, "=Mho18%K^ZsL!", ", namBe='", curriculum0, 0, 5894, 0, 0, (-11), (-11), 0, 5894, 5894, (-3497.969951393752), 5894, 5894, (-11), (-921), 0, 0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", curriculum0.getCourseCode());
      assertEquals((-11), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(5894, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-11), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-33.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-11), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("c5q-A]VuJ;koP3", curriculum0.getCurriculumCode());
      assertEquals(5894, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5894, student0.getSuspendedTerms());
      assertEquals(5894, student0.getCompletedTerms());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals("=Mho18%K^ZsL!", student0.getGender());
      assertEquals("c5q-A]VuJ;koP3", student0.getAdmissionStr());
      assertEquals((-11), student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getMaritalStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationality());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getDisabilities());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getAdmissionTerm());
      assertEquals("=Mho18%K^ZsL!", student0.getBirthDate());
      assertEquals(5894.0, student0.getGpa(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getStatusStr());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getCountry());
      assertEquals((-3497.969951393752), student0.getIea(), 0.01);
      assertEquals((-921), student0.getMobilityTerms());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(", namBe='", student0.getCurriculumCode());
      assertEquals((-11), student0.getComplementaryCredits());
      assertEquals("(Blf6+pNT)9EP)cCC", student0.getEmail());
      assertEquals("=Mho18%K^ZsL!", student0.getAffirmativePolicy());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getName());
      assertEquals(", namBe='", student0.getStatusTerm());
      assertEquals((-11), student0.getComplementaryHours());
      assertEquals(5894.0, student0.getMc(), 0.01);
      assertEquals(5894, student0.getMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getRace());
      assertEquals("=Mho18%K^ZsL!", student0.getCourseCode());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("9aUyR0C2Wf6S,#;4", student0.getPlaceOfBirth());
      assertEquals(5883, student0.getCompletedCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Registration", student0.getNationalId());
      assertEquals("=Mho18%K^ZsL!", student0.getSecondarySchool());
      assertFalse(treeSet0.contains("c5q-A]VuJ;koP3"));
      assertFalse(priorityQueue0.contains("c5q-A]VuJ;koP3"));
      assertNotNull(student0);
      
      // Undeclared exception!
      try { 
        student0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Student", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("')", "*U^3,", (String) null, "*U^3,", "*U^3,", (String) null, (String) null, "*U^3,", "*U^3,", (String) null, (String) null, "\"!R:(ezI+/:eQfEN", studentStatus0, (String) null, "')", ", institutionalTerms=", ", institutionalTerms=", "a[\"QpA\"M\u0001:++G|MF`", "", "", ", maritalStatus='", ", maritalStatus='", (Curriculum) null, (-550), (-550), 0, (-550), (-550), 1023, 0, 0.5, (-1365.5508041), (-550), 0, (-2582), (-550), (-3387), 0, 1031.619052173);
      assertEquals(", institutionalTerms=", student0.getDisabilities());
      assertEquals((-2582), student0.getSuspendedTerms());
      assertEquals("')", student0.getAdmissionStr());
      assertNull(student0.getStatusTerm());
      assertEquals((-1365.5508041), student0.getMc(), 0.01);
      assertEquals(", institutionalTerms=", student0.getAdmissionTerm());
      assertEquals("*U^3,", student0.getNationality());
      assertEquals("*U^3,", student0.getBirthDate());
      assertNull(student0.getRace());
      assertEquals((-550), student0.getOptionalCredits());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-77), student0.getCompletedCredits());
      assertEquals((-550), student0.getComplementaryHours());
      assertEquals((-550), student0.getInstitutionalEnrollments());
      assertEquals((-550), student0.getMandatoryHours());
      assertNull(student0.getName());
      assertEquals((-550.0), student0.getIea(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals((-3387), student0.getMobilityTerms());
      assertEquals(0.5, student0.getGpa(), 0.01);
      assertEquals(1031.619052173, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertNull(student0.getMaritalStatus());
      assertEquals(", maritalStatus='", student0.getCurriculumCode());
      assertEquals("*U^3,", student0.getNationalId());
      assertEquals("*U^3,", student0.getEmail());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("\"!R:(ezI+/:eQfEN", student0.getStatusStr());
      assertEquals((-550), student0.getMandatoryCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("*U^3,", student0.getCountry());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(", maritalStatus='", student0.getCourseCode());
      assertEquals("a[\"QpA\"M\u0001:++G|MF`", student0.getAffirmativePolicy());
      assertEquals(1023, student0.getComplementaryCredits());
      assertNotNull(student0);
      
      int int0 = student0.getCompletedTerms();
      assertEquals(", institutionalTerms=", student0.getDisabilities());
      assertEquals((-2582), student0.getSuspendedTerms());
      assertEquals("')", student0.getAdmissionStr());
      assertNull(student0.getStatusTerm());
      assertEquals((-1365.5508041), student0.getMc(), 0.01);
      assertEquals(", institutionalTerms=", student0.getAdmissionTerm());
      assertEquals("*U^3,", student0.getNationality());
      assertEquals("*U^3,", student0.getBirthDate());
      assertNull(student0.getRace());
      assertEquals((-550), student0.getOptionalCredits());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-77), student0.getCompletedCredits());
      assertEquals((-550), student0.getComplementaryHours());
      assertEquals((-550), student0.getInstitutionalEnrollments());
      assertEquals((-550), student0.getMandatoryHours());
      assertNull(student0.getName());
      assertEquals((-550.0), student0.getIea(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals((-3387), student0.getMobilityTerms());
      assertEquals(0.5, student0.getGpa(), 0.01);
      assertEquals(1031.619052173, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertNull(student0.getGender());
      assertNull(student0.getMaritalStatus());
      assertEquals(", maritalStatus='", student0.getCurriculumCode());
      assertEquals("*U^3,", student0.getNationalId());
      assertEquals("*U^3,", student0.getEmail());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("\"!R:(ezI+/:eQfEN", student0.getStatusStr());
      assertEquals((-550), student0.getMandatoryCredits());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("*U^3,", student0.getCountry());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(", maritalStatus='", student0.getCourseCode());
      assertEquals("a[\"QpA\"M\u0001:++G|MF`", student0.getAffirmativePolicy());
      assertEquals(1023, student0.getComplementaryCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Curriculum curriculum0 = new Curriculum((String) null, "~_lnfhdvA;", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 2057, 0, 0, 0, 1812, 11, 288, 2372, 5760, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(2372, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2057.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(288, curriculum0.getMaxNumberOfTerms());
      assertEquals(1812, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(11, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5760, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(2057, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("~_lnfhdvA;", curriculum0.getCurriculumCode());
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "", "Predicates.in(", "", "", "", "", "", ";$?", "", (String) null, "com.google.common.base.Predicates$IsEqualToPredicate", studentStatus0, "", "com.google.common.base.Predicates$IsEqualToPredicate", "Predicates.in(", ";$?", ";$?", ", secondarySchool='", "com.google.common.base.Predicates$IsEqualToPredicate", "u.!S-;Txg4M(mr6", "Ds7=ww5TA!\"/]", curriculum0, 2057, (-4468), 1081, 640, 640, 0, 2057, 5760, 0.5, 0.0, 125, 640, 0, 11, (-462), (-462));
      assertEquals(2372, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2057.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(288, curriculum0.getMaxNumberOfTerms());
      assertEquals(1812, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(11, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5760, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(2057, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("~_lnfhdvA;", curriculum0.getCurriculumCode());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-3828), student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(2057, student0.getAttemptedCredits());
      assertEquals(";$?", student0.getAffirmativePolicy());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getGender());
      assertEquals((-4468), student0.getMandatoryCredits());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getStatusStr());
      assertEquals(";$?", student0.getDisabilities());
      assertEquals("", student0.getNationalId());
      assertEquals(125, student0.getCompletedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(640, student0.getSuspendedTerms());
      assertEquals(1081, student0.getOptionalHours());
      assertEquals("Predicates.in(", student0.getAdmissionTerm());
      assertNull(student0.getRace());
      assertEquals("Ds7=ww5TA!\"/]", student0.getCurriculumCode());
      assertEquals("u.!S-;Txg4M(mr6", student0.getCourseCode());
      assertEquals(0.5, student0.getMc(), 0.01);
      assertEquals(", secondarySchool='", student0.getSecondarySchool());
      assertEquals(2057, student0.getMandatoryHours());
      assertEquals(11, student0.getMobilityTerms());
      assertEquals((-462), student0.getEnrolledCredits());
      assertEquals(5760.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals(";$?", student0.getCountry());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getAdmissionStr());
      assertEquals("Predicates.in(", student0.getName());
      assertEquals(640, student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(640, student0.getComplementaryHours());
      assertEquals((-462.0), student0.getAdmissionGrade(), 0.01);
      assertNotNull(student0);
      
      Curriculum curriculum1 = student0.getCurriculum();
      assertEquals(2372, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2057.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(288, curriculum0.getMaxNumberOfTerms());
      assertEquals(1812, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(11, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(5760, curriculum0.getMaxNumberOfEnrolledCredits());
      assertNull(curriculum0.getCourseCode());
      assertEquals(2057, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("~_lnfhdvA;", curriculum0.getCurriculumCode());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-3828), student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(2057, student0.getAttemptedCredits());
      assertEquals(";$?", student0.getAffirmativePolicy());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getGender());
      assertEquals((-4468), student0.getMandatoryCredits());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getStatusStr());
      assertEquals(";$?", student0.getDisabilities());
      assertEquals("", student0.getNationalId());
      assertEquals(125, student0.getCompletedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getStatusTerm());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(640, student0.getSuspendedTerms());
      assertEquals(1081, student0.getOptionalHours());
      assertEquals("Predicates.in(", student0.getAdmissionTerm());
      assertNull(student0.getRace());
      assertEquals("Ds7=ww5TA!\"/]", student0.getCurriculumCode());
      assertEquals("u.!S-;Txg4M(mr6", student0.getCourseCode());
      assertEquals(0.5, student0.getMc(), 0.01);
      assertEquals(", secondarySchool='", student0.getSecondarySchool());
      assertEquals(2057, student0.getMandatoryHours());
      assertEquals(11, student0.getMobilityTerms());
      assertEquals((-462), student0.getEnrolledCredits());
      assertEquals(5760.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals(";$?", student0.getCountry());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getAdmissionStr());
      assertEquals("Predicates.in(", student0.getName());
      assertEquals(640, student0.getOptionalCredits());
      assertEquals("", student0.getNationality());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(640, student0.getComplementaryHours());
      assertEquals((-462.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(2057.0, curriculum1.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1812, curriculum1.getMinActivitiesNeeded());
      assertEquals(2372, curriculum1.getMinNumberOfEnrolledCredits());
      assertEquals(288, curriculum1.getMaxNumberOfTerms());
      assertEquals(2057, curriculum1.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum1.getExceptionalAdditionalEnrolledCredits());
      assertNull(curriculum1.getCourseCode());
      assertEquals(5760, curriculum1.getMaxNumberOfEnrolledCredits());
      assertEquals("~_lnfhdvA;", curriculum1.getCurriculumCode());
      assertEquals(0, curriculum1.getMinOptionalCreditsNeeded());
      assertEquals(11, curriculum1.getMinNumberOfTerms());
      assertEquals(0, curriculum1.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum1.getMinComplementaryCreditsNeeded());
      assertNotNull(curriculum1);
      assertSame(curriculum0, curriculum1);
      assertSame(curriculum1, curriculum0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("", "com.google.common.base.CharMatcher$Ascii", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-4661), 39, 1000, 39, 1000, 39, 1000, 39, 1000, 742, set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(39, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(39, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1000, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-4661), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(742, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("com.google.common.base.CharMatcher$Ascii", curriculum0.getCurriculumCode());
      assertEquals(39, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1000, curriculum0.getMinActivitiesNeeded());
      assertEquals(39, curriculum0.getMinNumberOfTerms());
      assertEquals(1000, curriculum0.getMaxNumberOfTerms());
      assertEquals(1000, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3583.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertFalse(arrayList0.contains(1000));
      assertFalse(set0.contains("com.google.common.base.CharMatcher$Ascii"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("o>LPce]In5(cqL", "com.google.common.base.CharMatcher$Ascii", "com.google.common.base.CharMatcher$Ascii", "_C\"~0qUd+", "_C\"~0qUd+", "", "o>LPce]In5(cqL", "_C\"~0qUd+", "Wz~b_", "]ayqWL}b:$z9", (String) null, "Wz~b_", studentStatus0, (String) null, "n,)?&4}$NwE v=", "", "t-t/P=rPfx", "o>LPce]In5(cqL", "Wz~b_", "_C\"~0qUd+", "", "?f96", curriculum0, 461845907, 1000, 1157, (-4661), 461845907, 558, 39, 0.0, 2000.016397267479, 1602.222, 169, 842, 461845907, 141, 558, 0.0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(39, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(39, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1000, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-4661), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(742, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("com.google.common.base.CharMatcher$Ascii", curriculum0.getCurriculumCode());
      assertEquals(39, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1000, curriculum0.getMinActivitiesNeeded());
      assertEquals(39, curriculum0.getMinNumberOfTerms());
      assertEquals(1000, curriculum0.getMaxNumberOfTerms());
      assertEquals(1000, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3583.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("com.google.common.base.CharMatcher$Ascii", student0.getName());
      assertEquals("t-t/P=rPfx", student0.getDisabilities());
      assertEquals("Wz~b_", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.base.CharMatcher$Ascii", student0.getNationalId());
      assertEquals("_C\"~0qUd+", student0.getSecondarySchoolGraduationYear());
      assertEquals((-4661), student0.getOptionalCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(2000.016397267479, student0.getMc(), 0.01);
      assertEquals(141, student0.getMobilityTerms());
      assertNull(student0.getStatusTerm());
      assertEquals(39, student0.getAttemptedCredits());
      assertEquals("o>LPce]In5(cqL", student0.getAffirmativePolicy());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(1602.222, student0.getIea(), 0.01);
      assertEquals(558, student0.getEnrolledCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("_C\"~0qUd+", student0.getEmail());
      assertEquals(842, student0.getSuspendedTerms());
      assertEquals(1157, student0.getOptionalHours());
      assertEquals("n,)?&4}$NwE v=", student0.getAdmissionStr());
      assertEquals("Wz~b_", student0.getStatusStr());
      assertEquals(461845907, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getCourseCode());
      assertEquals(461845907, student0.getMandatoryHours());
      assertEquals("]ayqWL}b:$z9", student0.getPlaceOfBirth());
      assertEquals(1000, student0.getMandatoryCredits());
      assertEquals("?f96", student0.getCurriculumCode());
      assertEquals(461845907, student0.getComplementaryHours());
      assertEquals("Wz~b_", student0.getCountry());
      assertNull(student0.getRace());
      assertEquals("o>LPce]In5(cqL", student0.getMaritalStatus());
      assertEquals("_C\"~0qUd+", student0.getNationality());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(169, student0.getCompletedTerms());
      assertEquals("_C\"~0qUd+", student0.getBirthDate());
      assertEquals(558, student0.getComplementaryCredits());
      assertEquals((-3103), student0.getCompletedCredits());
      assertFalse(arrayList0.contains(1000));
      assertFalse(set0.contains("com.google.common.base.CharMatcher$Ascii"));
      assertNotNull(student0);
      
      int int0 = student0.getAttemptedCredits();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(39, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(39, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1000, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-4661), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(742, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("com.google.common.base.CharMatcher$Ascii", curriculum0.getCurriculumCode());
      assertEquals(39, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1000, curriculum0.getMinActivitiesNeeded());
      assertEquals(39, curriculum0.getMinNumberOfTerms());
      assertEquals(1000, curriculum0.getMaxNumberOfTerms());
      assertEquals(1000, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3583.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("com.google.common.base.CharMatcher$Ascii", student0.getName());
      assertEquals("t-t/P=rPfx", student0.getDisabilities());
      assertEquals("Wz~b_", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("com.google.common.base.CharMatcher$Ascii", student0.getNationalId());
      assertEquals("_C\"~0qUd+", student0.getSecondarySchoolGraduationYear());
      assertEquals((-4661), student0.getOptionalCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(2000.016397267479, student0.getMc(), 0.01);
      assertEquals(141, student0.getMobilityTerms());
      assertNull(student0.getStatusTerm());
      assertEquals(39, student0.getAttemptedCredits());
      assertEquals("o>LPce]In5(cqL", student0.getAffirmativePolicy());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(1602.222, student0.getIea(), 0.01);
      assertEquals(558, student0.getEnrolledCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("_C\"~0qUd+", student0.getEmail());
      assertEquals(842, student0.getSuspendedTerms());
      assertEquals(1157, student0.getOptionalHours());
      assertEquals("n,)?&4}$NwE v=", student0.getAdmissionStr());
      assertEquals("Wz~b_", student0.getStatusStr());
      assertEquals(461845907, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getCourseCode());
      assertEquals(461845907, student0.getMandatoryHours());
      assertEquals("]ayqWL}b:$z9", student0.getPlaceOfBirth());
      assertEquals(1000, student0.getMandatoryCredits());
      assertEquals("?f96", student0.getCurriculumCode());
      assertEquals(461845907, student0.getComplementaryHours());
      assertEquals("Wz~b_", student0.getCountry());
      assertNull(student0.getRace());
      assertEquals("o>LPce]In5(cqL", student0.getMaritalStatus());
      assertEquals("_C\"~0qUd+", student0.getNationality());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(169, student0.getCompletedTerms());
      assertEquals("_C\"~0qUd+", student0.getBirthDate());
      assertEquals(558, student0.getComplementaryCredits());
      assertEquals((-3103), student0.getCompletedCredits());
      assertFalse(arrayList0.contains(int0));
      assertFalse(set0.contains("com.google.common.base.CharMatcher$Ascii"));
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("", "", "#%6Clwu`ja", "*:vKX07QIDjUAB", "#%6Clwu`ja", "&BYLi.|2C6cY=(w++", "esimh>X4&6fX", (String) null, "Qcn$?1e6;ZHy>T.F", ", statusTerm='", "", "esimh>X4&6fX", studentStatus0, "", "", "yC", "Du~Qg", "", "Qcn$?1e6;ZHy>T.F", "", "*:vKX07QIDjUAB", "1=I<Q2", (Curriculum) null, (-449), (-449), (-512), 4, 0, 5, (-449), 0.0, (-493.8501335881), 0.0, 4, 5, 1236, (-1022), 576, 0.0);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(", statusTerm='", student0.getPlaceOfBirth());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-440), student0.getCompletedCredits());
      assertEquals("&BYLi.|2C6cY=(w++", student0.getGender());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals((-449), student0.getMandatoryCredits());
      assertNull(student0.getNationality());
      assertEquals(5, student0.getSuspendedTerms());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-449), student0.getAttemptedCredits());
      assertEquals("*:vKX07QIDjUAB", student0.getCourseCode());
      assertEquals(1236, student0.getInstitutionalEnrollments());
      assertEquals((-512), student0.getOptionalHours());
      assertEquals("Du~Qg", student0.getDisabilities());
      assertEquals(5, student0.getComplementaryCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("esimh>X4&6fX", student0.getStatusStr());
      assertEquals("#%6Clwu`ja", student0.getName());
      assertEquals(4, student0.getCompletedTerms());
      assertEquals(576, student0.getEnrolledCredits());
      assertEquals("Qcn$?1e6;ZHy>T.F", student0.getSecondarySchool());
      assertEquals("1=I<Q2", student0.getCurriculumCode());
      assertEquals("esimh>X4&6fX", student0.getMaritalStatus());
      assertEquals("#%6Clwu`ja", student0.getEmail());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-449), student0.getMandatoryHours());
      assertEquals((-1022), student0.getMobilityTerms());
      assertEquals("", student0.getRace());
      assertEquals((-493.8501335881), student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationalId());
      assertEquals("Qcn$?1e6;ZHy>T.F", student0.getCountry());
      assertEquals("yC", student0.getAdmissionTerm());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("*:vKX07QIDjUAB", student0.getBirthDate());
      assertEquals("", student0.getStatusTerm());
      assertNotNull(student0);
      
      int int0 = student0.getCompletedCredits();
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(", statusTerm='", student0.getPlaceOfBirth());
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-440), student0.getCompletedCredits());
      assertEquals("&BYLi.|2C6cY=(w++", student0.getGender());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals((-449), student0.getMandatoryCredits());
      assertNull(student0.getNationality());
      assertEquals(5, student0.getSuspendedTerms());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals((-449), student0.getAttemptedCredits());
      assertEquals("*:vKX07QIDjUAB", student0.getCourseCode());
      assertEquals(1236, student0.getInstitutionalEnrollments());
      assertEquals((-512), student0.getOptionalHours());
      assertEquals("Du~Qg", student0.getDisabilities());
      assertEquals(5, student0.getComplementaryCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("esimh>X4&6fX", student0.getStatusStr());
      assertEquals("#%6Clwu`ja", student0.getName());
      assertEquals(4, student0.getCompletedTerms());
      assertEquals(576, student0.getEnrolledCredits());
      assertEquals("Qcn$?1e6;ZHy>T.F", student0.getSecondarySchool());
      assertEquals("1=I<Q2", student0.getCurriculumCode());
      assertEquals("esimh>X4&6fX", student0.getMaritalStatus());
      assertEquals("#%6Clwu`ja", student0.getEmail());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-449), student0.getMandatoryHours());
      assertEquals((-1022), student0.getMobilityTerms());
      assertEquals("", student0.getRace());
      assertEquals((-493.8501335881), student0.getMc(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationalId());
      assertEquals("Qcn$?1e6;ZHy>T.F", student0.getCountry());
      assertEquals("yC", student0.getAdmissionTerm());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("*:vKX07QIDjUAB", student0.getBirthDate());
      assertEquals("", student0.getStatusTerm());
      assertEquals((-440), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("", "CANCELADO NOVO INGRESSO OUTRO CURSO", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, (-1949), Integer.MAX_VALUE, 20, (-1949), Integer.MAX_VALUE, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", studentStatus0, "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0, Integer.MAX_VALUE, 3, 7497, 3, Integer.MAX_VALUE, 72, 0, Integer.MAX_VALUE, 0.0, Integer.MAX_VALUE, Integer.MAX_VALUE, 13, Integer.MAX_VALUE, 0, 0, 13);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", student0.getStatusTerm());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCountry());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAdmissionTerm());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getDisabilities());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getName());
      assertEquals(2.147483647E9, student0.getIea(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals(72, student0.getComplementaryCredits());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals(2.147483647E9, student0.getGpa(), 0.01);
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(2, student0.getStatusIndex());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getGender());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals(Integer.MAX_VALUE, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCourseCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getPlaceOfBirth());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAffirmativePolicy());
      assertEquals("", student0.getRace());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCurriculumCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(3, student0.getMandatoryCredits());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertNotNull(student0);
      
      int int0 = student0.getOptionalCredits();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", student0.getStatusTerm());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCountry());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAdmissionTerm());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getDisabilities());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getName());
      assertEquals(2.147483647E9, student0.getIea(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals(72, student0.getComplementaryCredits());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals(2.147483647E9, student0.getGpa(), 0.01);
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(2, student0.getStatusIndex());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getGender());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals(Integer.MAX_VALUE, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCourseCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getPlaceOfBirth());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAffirmativePolicy());
      assertEquals("", student0.getRace());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCurriculumCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(3, student0.getMandatoryCredits());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "F__file", "F__file", "k", "F__file", "F__file", "F__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", ", minMandatoryCreditsNeeded=", (String) null, studentStatus0, "", "", "", "F__file", (String) null, "T/];x/Gzx(r@(", "=B_MS", "", "k", (Curriculum) null, 669, 669, 669, 96, 3, 669, 669, 0.0, 0.0, 0.0, 96, 3047, 3, 3, 3, 0.0);
      assertEquals("F__file", student0.getName());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals("F__file", student0.getEmail());
      assertEquals(96, student0.getCompletedTerms());
      assertEquals("k", student0.getBirthDate());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("F__file", student0.getDisabilities());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getAffirmativePolicy());
      assertEquals("F__file", student0.getMaritalStatus());
      assertEquals("F__file", student0.getNationalId());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(669, student0.getMandatoryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals(669, student0.getComplementaryCredits());
      assertNull(student0.getStatusStr());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(1434, student0.getCompletedCredits());
      assertEquals(96, student0.getOptionalCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(3, student0.getMobilityTerms());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(669, student0.getAttemptedCredits());
      assertEquals(3047, student0.getSuspendedTerms());
      assertEquals(669, student0.getMandatoryHours());
      assertEquals("=B_MS", student0.getSecondarySchoolGraduationYear());
      assertEquals(", minMandatoryCreditsNeeded=", student0.getRace());
      assertEquals(", ", student0.getCountry());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("F__file", student0.getGender());
      assertEquals(669, student0.getOptionalHours());
      assertEquals("", student0.getAdmissionTerm());
      assertNotNull(student0);
      
      int int0 = student0.getComplementaryCredits();
      assertEquals("F__file", student0.getName());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals("F__file", student0.getEmail());
      assertEquals(96, student0.getCompletedTerms());
      assertEquals("k", student0.getBirthDate());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("F__file", student0.getDisabilities());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getAffirmativePolicy());
      assertEquals("F__file", student0.getMaritalStatus());
      assertEquals("F__file", student0.getNationalId());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(669, student0.getMandatoryCredits());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals(669, student0.getComplementaryCredits());
      assertNull(student0.getStatusStr());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(1434, student0.getCompletedCredits());
      assertEquals(96, student0.getOptionalCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(3, student0.getMobilityTerms());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(669, student0.getAttemptedCredits());
      assertEquals(3047, student0.getSuspendedTerms());
      assertEquals(669, student0.getMandatoryHours());
      assertEquals("=B_MS", student0.getSecondarySchoolGraduationYear());
      assertEquals(", minMandatoryCreditsNeeded=", student0.getRace());
      assertEquals(", ", student0.getCountry());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("F__file", student0.getGender());
      assertEquals(669, student0.getOptionalHours());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(669, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("", "", "", "", "", "", "jm9LYy~6jaj-&", "", "jm9LYy~6jaj-&", "", "com.google.common.base.Predicates$IsEqualToPredicate", "com.google.common.base.Predicates$IsEqualToPredicate", studentStatus0, "CONCLUIDO - NAO COLOU GRAU", "", "", "", "com.google.common.base.Predicates$IsEqualToPredicate", "", "", "CONCLUIDO - NAO COLOU GRAU", "BF&4} D7", (Curriculum) null, (-545), (-545), 0, (-545), (-545), (-545), 0, (-1.0), (-1.0), 0, 0, (-545), 0, 0, (-545), 0);
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-545), student0.getComplementaryHours());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-545), student0.getComplementaryCredits());
      assertEquals("BF&4} D7", student0.getCurriculumCode());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getStatusTerm());
      assertEquals("jm9LYy~6jaj-&", student0.getMaritalStatus());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getRace());
      assertEquals((-545), student0.getMandatoryCredits());
      assertEquals((-545), student0.getEnrolledCredits());
      assertEquals((-545), student0.getOptionalCredits());
      assertEquals((-1635), student0.getCompletedCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-545), student0.getMandatoryHours());
      assertEquals("jm9LYy~6jaj-&", student0.getCountry());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getName());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-545), student0.getSuspendedTerms());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getStatusStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getGender());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getAffirmativePolicy());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getCourseCode());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNotNull(student0);
      
      int int0 = student0.getMandatoryCredits();
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-545), student0.getComplementaryHours());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-545), student0.getComplementaryCredits());
      assertEquals("BF&4} D7", student0.getCurriculumCode());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getStatusTerm());
      assertEquals("jm9LYy~6jaj-&", student0.getMaritalStatus());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getRace());
      assertEquals((-545), student0.getMandatoryCredits());
      assertEquals((-545), student0.getEnrolledCredits());
      assertEquals((-545), student0.getOptionalCredits());
      assertEquals((-1635), student0.getCompletedCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-545), student0.getMandatoryHours());
      assertEquals("jm9LYy~6jaj-&", student0.getCountry());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals((-1.0), student0.getGpa(), 0.01);
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getName());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getAdmissionStr());
      assertEquals((-545), student0.getSuspendedTerms());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getStatusStr());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getGender());
      assertEquals((-1.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals("com.google.common.base.Predicates$IsEqualToPredicate", student0.getAffirmativePolicy());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getCourseCode());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-545), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(1303);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(1303));
      assertNotNull(arrayList0);
      
      Curriculum curriculum0 = new Curriculum("Aha.KS", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, (-1365), 39, 1303, 1303, 1303, (-2277), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1303, curriculum0.getMinNumberOfTerms());
      assertEquals(1303, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Aha.KS", curriculum0.getCourseCode());
      assertEquals((-1365.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2277), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1303, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1365), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains(1303));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("\"", "mRV}xZ8", "mRV}xZ8", "\"", "Ob 's }>%!jKr!sW", "mRV}xZ8", "Ob 's }>%!jKr!sW", "Ob 's }>%!jKr!sW", "8x)Wh-ZAT", "8x)Wh-ZAT", "mRV}xZ8", "8x)Wh-ZAT", studentStatus0, "Aha.KS", "\"g|&<k?8FigUjpd", "mRV}xZ8", "Aha.KS", "\"", "C>'gv", "\"", "Aha.KS", "\"", curriculum0, (-1365), 0, 0, 0, 1645, (-1), 0, (-2277), (-543.0), 0, Integer.MAX_VALUE, (-1365), (-2277), 39, 0, Integer.MAX_VALUE);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1303, curriculum0.getMinNumberOfTerms());
      assertEquals(1303, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Aha.KS", curriculum0.getCourseCode());
      assertEquals((-1365.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2277), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1303, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1365), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-543.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(2.147483647E9, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("mRV}xZ8", student0.getAdmissionTerm());
      assertEquals("Ob 's }>%!jKr!sW", student0.getNationality());
      assertEquals("Aha.KS", student0.getStatusTerm());
      assertEquals("mRV}xZ8", student0.getNationalId());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(39, student0.getMobilityTerms());
      assertEquals("8x)Wh-ZAT", student0.getCountry());
      assertEquals("8x)Wh-ZAT", student0.getPlaceOfBirth());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals((-1365), student0.getMandatoryHours());
      assertEquals("\"g|&<k?8FigUjpd", student0.getAdmissionStr());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-2277.0), student0.getGpa(), 0.01);
      assertEquals("Aha.KS", student0.getCourseCode());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("\"", student0.getBirthDate());
      assertEquals(1645, student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("mRV}xZ8", student0.getRace());
      assertEquals("C>'gv", student0.getSecondarySchool());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("mRV}xZ8", student0.getName());
      assertEquals("Ob 's }>%!jKr!sW", student0.getEmail());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("\"", student0.getCurriculumCode());
      assertEquals((-1), student0.getCompletedCredits());
      assertEquals((-2277), student0.getInstitutionalEnrollments());
      assertEquals("mRV}xZ8", student0.getGender());
      assertEquals((-1365), student0.getSuspendedTerms());
      assertEquals("8x)Wh-ZAT", student0.getStatusStr());
      assertEquals("Aha.KS", student0.getDisabilities());
      assertEquals("\"", student0.getAffirmativePolicy());
      assertEquals((-1), student0.getComplementaryCredits());
      assertEquals("Ob 's }>%!jKr!sW", student0.getMaritalStatus());
      assertEquals("\"", student0.getSecondarySchoolGraduationYear());
      assertFalse(arrayList0.contains(1303));
      assertNotNull(student0);
      
      int int0 = student0.getInstitutionalEnrollments();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1303, curriculum0.getMinNumberOfTerms());
      assertEquals(1303, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("Aha.KS", curriculum0.getCourseCode());
      assertEquals((-1365.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2277), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1303, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1365), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-543.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(2.147483647E9, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("mRV}xZ8", student0.getAdmissionTerm());
      assertEquals("Ob 's }>%!jKr!sW", student0.getNationality());
      assertEquals("Aha.KS", student0.getStatusTerm());
      assertEquals("mRV}xZ8", student0.getNationalId());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(39, student0.getMobilityTerms());
      assertEquals("8x)Wh-ZAT", student0.getCountry());
      assertEquals("8x)Wh-ZAT", student0.getPlaceOfBirth());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals((-1365), student0.getMandatoryHours());
      assertEquals("\"g|&<k?8FigUjpd", student0.getAdmissionStr());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-2277.0), student0.getGpa(), 0.01);
      assertEquals("Aha.KS", student0.getCourseCode());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("\"", student0.getBirthDate());
      assertEquals(1645, student0.getComplementaryHours());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("mRV}xZ8", student0.getRace());
      assertEquals("C>'gv", student0.getSecondarySchool());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("mRV}xZ8", student0.getName());
      assertEquals("Ob 's }>%!jKr!sW", student0.getEmail());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("\"", student0.getCurriculumCode());
      assertEquals((-1), student0.getCompletedCredits());
      assertEquals((-2277), student0.getInstitutionalEnrollments());
      assertEquals("mRV}xZ8", student0.getGender());
      assertEquals((-1365), student0.getSuspendedTerms());
      assertEquals("8x)Wh-ZAT", student0.getStatusStr());
      assertEquals("Aha.KS", student0.getDisabilities());
      assertEquals("\"", student0.getAffirmativePolicy());
      assertEquals((-1), student0.getComplementaryCredits());
      assertEquals("Ob 's }>%!jKr!sW", student0.getMaritalStatus());
      assertEquals("\"", student0.getSecondarySchoolGraduationYear());
      assertFalse(arrayList0.contains(1303));
      assertEquals((-2277), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("TRANSFERIDO PARA OUTRA IES", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, (-2123), 414, 0, (-460), 414, 0, (-2123), (-2123), (-460), set0, set0, set0, set0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-460), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-460), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-2123)));
      assertFalse(set0.contains("TRANSFERIDO PARA OUTRA IES"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("gKG4IH_^1\"2@\"h>:uk", "gKG4IH_^1\"2@\"h>:uk", "", "", "gKG4IH_^1\"2@\"h>:uk", ", disabilities='", "gKG4IH_^1\"2@\"h>:uk", "", "gKG4IH_^1\"2@\"h>:uk", "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", studentStatus0, "", "gKG4IH_^1\"2@\"h>:uk", "gKG4IH_^1\"2@\"h>:uk", ", disabilities='", ", disabilities='", ", disabilities='", "gKG4IH_^1\"2@\"h>:uk", "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", curriculum0, 1298, (-2123), 0, 0, 414, (-2123), 0, 0, 3334.163199, 414, (-2123), 414, (-460), (-2123), 0, 414);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-460), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-460), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionStr());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getNationalId());
      assertEquals(414.0, student0.getIea(), 0.01);
      assertEquals((-460), student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getRace());
      assertEquals((-2123), student0.getCompletedTerms());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getEmail());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(10, student0.getStatusIndex());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(414.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getName());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCourseCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(", disabilities='", student0.getSecondarySchool());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCurriculumCode());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getMaritalStatus());
      assertEquals(1298, student0.getMandatoryHours());
      assertEquals("", student0.getStatusTerm());
      assertEquals(414, student0.getComplementaryHours());
      assertEquals((-2123), student0.getMobilityTerms());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-2123), student0.getMandatoryCredits());
      assertEquals(", disabilities='", student0.getDisabilities());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-2123), student0.getComplementaryCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals((-4246), student0.getCompletedCredits());
      assertEquals(3334.163199, student0.getMc(), 0.01);
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getStatusStr());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationality());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getCountry());
      assertEquals(414, student0.getSuspendedTerms());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(", disabilities='"));
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-460), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-460), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionStr());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getNationalId());
      assertEquals(414.0, student0.getIea(), 0.01);
      assertEquals((-460), student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getRace());
      assertEquals((-2123), student0.getCompletedTerms());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getEmail());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(10, student0.getStatusIndex());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(414.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getName());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCourseCode());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(", disabilities='", student0.getSecondarySchool());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCurriculumCode());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getMaritalStatus());
      assertEquals(1298, student0.getMandatoryHours());
      assertEquals("", student0.getStatusTerm());
      assertEquals(414, student0.getComplementaryHours());
      assertEquals((-2123), student0.getMobilityTerms());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionTerm());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals((-2123), student0.getMandatoryCredits());
      assertEquals(", disabilities='", student0.getDisabilities());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getPlaceOfBirth());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-2123), student0.getComplementaryCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals((-4246), student0.getCompletedCredits());
      assertEquals(3334.163199, student0.getMc(), 0.01);
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getStatusStr());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationality());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getCountry());
      assertEquals(414, student0.getSuspendedTerms());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(", disabilities='"));
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("|X^=1R);", "!X>IC^HX'eZBtQg_<j@", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 2505, 76, 76, 1, 2721, 76, 76, 2, 5869, 2, set0, set0, set0, set0, set0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2505, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2658.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(76, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(76, curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(76, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(76, curriculum0.getMinNumberOfTerms());
      assertEquals(5869, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("!X>IC^HX'eZBtQg_<j@", curriculum0.getCurriculumCode());
      assertEquals(2721, curriculum0.getMinActivitiesNeeded());
      assertEquals("|X^=1R);", curriculum0.getCourseCode());
      assertFalse(arrayList0.contains(2721));
      assertFalse(set0.contains("|X^=1R);"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("com.google.common.primitives.Doubles$DoubleConverter", "3+:}0t=B#J", "!X>IC^HX'eZBtQg_<j@", "3+:}0t=B#J", "", "!X>IC^HX'eZBtQg_<j@", "CONCLUIDO - NAO COLOU GRAU", "CONCLUIDO - NAO COLOU GRAU", "", ", complementaryHours=", "iIMJ_3g{q(wSF>?q", "CONCLUIDO - NAO COLOU GRAU", studentStatus0, "com.google.common.primitives.Doubles$DoubleConverter", "!X>IC^HX'eZBtQg_<j@", "9(hY<T(M(vCiZNQ>", ", complementaryHours=", "", ", complementaryHours=", "|X^=1R);", (String) null, ", complementaryHours=", curriculum0, 2364, (-2840), 1, (-273), 5869, 76, 2, 1.0, 1.0, 1, 5869, 76, 2, (-273), 0, 1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2505, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2658.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(76, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(76, curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(76, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(76, curriculum0.getMinNumberOfTerms());
      assertEquals(5869, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("!X>IC^HX'eZBtQg_<j@", curriculum0.getCurriculumCode());
      assertEquals(2721, curriculum0.getMinActivitiesNeeded());
      assertEquals("|X^=1R);", curriculum0.getCourseCode());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getNationality());
      assertEquals(", complementaryHours=", student0.getSecondarySchool());
      assertEquals("", student0.getCountry());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(", complementaryHours=", student0.getDisabilities());
      assertEquals((-2840), student0.getMandatoryCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("!X>IC^HX'eZBtQg_<j@", student0.getName());
      assertEquals(5869, student0.getCompletedTerms());
      assertEquals("com.google.common.primitives.Doubles$DoubleConverter", student0.getStatusTerm());
      assertEquals("3+:}0t=B#J", student0.getBirthDate());
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals(76, student0.getSuspendedTerms());
      assertEquals("iIMJ_3g{q(wSF>?q", student0.getRace());
      assertEquals("|X^=1R);", student0.getSecondarySchoolGraduationYear());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(1.0, student0.getMc(), 0.01);
      assertEquals((-273), student0.getOptionalCredits());
      assertNull(student0.getCourseCode());
      assertEquals(5869, student0.getComplementaryHours());
      assertEquals(2364, student0.getMandatoryHours());
      assertEquals(1, student0.getOptionalHours());
      assertEquals(9, student0.getStatusIndex());
      assertEquals(1.0, student0.getIea(), 0.01);
      assertEquals(76, student0.getComplementaryCredits());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getMaritalStatus());
      assertEquals((-3037), student0.getCompletedCredits());
      assertEquals(1.0, student0.getGpa(), 0.01);
      assertEquals("!X>IC^HX'eZBtQg_<j@", student0.getAdmissionStr());
      assertEquals("9(hY<T(M(vCiZNQ>", student0.getAdmissionTerm());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(", complementaryHours=", student0.getPlaceOfBirth());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getStatusStr());
      assertEquals("", student0.getEmail());
      assertEquals("!X>IC^HX'eZBtQg_<j@", student0.getGender());
      assertEquals("3+:}0t=B#J", student0.getNationalId());
      assertEquals(", complementaryHours=", student0.getCurriculumCode());
      assertEquals((-273), student0.getMobilityTerms());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(""));
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2505, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2658.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(76, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(76, curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(76, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(76, curriculum0.getMinNumberOfTerms());
      assertEquals(5869, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("!X>IC^HX'eZBtQg_<j@", curriculum0.getCurriculumCode());
      assertEquals(2721, curriculum0.getMinActivitiesNeeded());
      assertEquals("|X^=1R);", curriculum0.getCourseCode());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getNationality());
      assertEquals(", complementaryHours=", student0.getSecondarySchool());
      assertEquals("", student0.getCountry());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(", complementaryHours=", student0.getDisabilities());
      assertEquals((-2840), student0.getMandatoryCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("!X>IC^HX'eZBtQg_<j@", student0.getName());
      assertEquals(5869, student0.getCompletedTerms());
      assertEquals("com.google.common.primitives.Doubles$DoubleConverter", student0.getStatusTerm());
      assertEquals("3+:}0t=B#J", student0.getBirthDate());
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals(76, student0.getSuspendedTerms());
      assertEquals("iIMJ_3g{q(wSF>?q", student0.getRace());
      assertEquals("|X^=1R);", student0.getSecondarySchoolGraduationYear());
      assertEquals(2, student0.getInstitutionalEnrollments());
      assertEquals(1.0, student0.getMc(), 0.01);
      assertEquals((-273), student0.getOptionalCredits());
      assertNull(student0.getCourseCode());
      assertEquals(5869, student0.getComplementaryHours());
      assertEquals(2364, student0.getMandatoryHours());
      assertEquals(1, student0.getOptionalHours());
      assertEquals(9, student0.getStatusIndex());
      assertEquals(1.0, student0.getIea(), 0.01);
      assertEquals(76, student0.getComplementaryCredits());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getMaritalStatus());
      assertEquals((-3037), student0.getCompletedCredits());
      assertEquals(1.0, student0.getGpa(), 0.01);
      assertEquals("!X>IC^HX'eZBtQg_<j@", student0.getAdmissionStr());
      assertEquals("9(hY<T(M(vCiZNQ>", student0.getAdmissionTerm());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(", complementaryHours=", student0.getPlaceOfBirth());
      assertEquals("CONCLUIDO - NAO COLOU GRAU", student0.getStatusStr());
      assertEquals("", student0.getEmail());
      assertEquals("!X>IC^HX'eZBtQg_<j@", student0.getGender());
      assertEquals("3+:}0t=B#J", student0.getNationalId());
      assertEquals(", complementaryHours=", student0.getCurriculumCode());
      assertEquals((-273), student0.getMobilityTerms());
      assertFalse(arrayList0.contains(0));
      assertFalse(set0.contains(""));
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, "CANCELAMENTO P/ SOLICITACAO ALUNO", "CANCELAMENTO P/ SOLICITACAO ALUNO", (String) null, (String) null, (String) null, "-<YXfp{m>g?8", "w9", "Invalid range: ", (String) null, "CANCELAMENTO P/ SOLICITACAO ALUNO", studentStatus0, "", "", "-<YXfp{m>g?8", (String) null, (String) null, "-<YXfp{m>g?8", "CANCELAMENTO P/ SOLICITACAO ALUNO", "Invalid range: ", "CANCELAMENTO P/ SOLICITACAO ALUNO", (Curriculum) null, 20, 20, 20, 20, 20, (-965), 20, 20, 20, 20, (-965), 1, 20, 20, 20, (-965));
      assertEquals(1, student0.getSuspendedTerms());
      assertEquals((-965), student0.getCompletedTerms());
      assertEquals(20, student0.getOptionalHours());
      assertEquals(20, student0.getAttemptedCredits());
      assertEquals("Invalid range: ", student0.getPlaceOfBirth());
      assertEquals(20.0, student0.getIea(), 0.01);
      assertEquals(20, student0.getEnrolledCredits());
      assertEquals(20, student0.getComplementaryHours());
      assertEquals((-925), student0.getCompletedCredits());
      assertEquals(7, student0.getStatusIndex());
      assertNull(student0.getAffirmativePolicy());
      assertNull(student0.getRace());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getStatusStr());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getName());
      assertEquals("-<YXfp{m>g?8", student0.getAdmissionTerm());
      assertEquals(20.0, student0.getMc(), 0.01);
      assertNull(student0.getGender());
      assertEquals(20, student0.getMandatoryCredits());
      assertEquals(20, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getBirthDate());
      assertEquals((-965), student0.getComplementaryCredits());
      assertEquals(20, student0.getMandatoryHours());
      assertNull(student0.getNationalId());
      assertEquals("-<YXfp{m>g?8", student0.getSecondarySchool());
      assertEquals(20, student0.getOptionalCredits());
      assertEquals(20.0, student0.getGpa(), 0.01);
      assertEquals(20, student0.getMobilityTerms());
      assertNull(student0.getEmail());
      assertEquals("-<YXfp{m>g?8", student0.getNationality());
      assertEquals("", student0.getStatusTerm());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getCurriculumCode());
      assertEquals((-965.0), student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getDisabilities());
      assertEquals("w9", student0.getCountry());
      assertEquals("Invalid range: ", student0.getCourseCode());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertNull(student0.getMaritalStatus());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getSecondarySchoolGraduationYear());
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals(1, student0.getSuspendedTerms());
      assertEquals((-965), student0.getCompletedTerms());
      assertEquals(20, student0.getOptionalHours());
      assertEquals(20, student0.getAttemptedCredits());
      assertEquals("Invalid range: ", student0.getPlaceOfBirth());
      assertEquals(20.0, student0.getIea(), 0.01);
      assertEquals(20, student0.getEnrolledCredits());
      assertEquals(20, student0.getComplementaryHours());
      assertEquals((-925), student0.getCompletedCredits());
      assertEquals(7, student0.getStatusIndex());
      assertNull(student0.getAffirmativePolicy());
      assertNull(student0.getRace());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getStatusStr());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getName());
      assertEquals("-<YXfp{m>g?8", student0.getAdmissionTerm());
      assertEquals(20.0, student0.getMc(), 0.01);
      assertNull(student0.getGender());
      assertEquals(20, student0.getMandatoryCredits());
      assertEquals(20, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getBirthDate());
      assertEquals((-965), student0.getComplementaryCredits());
      assertEquals(20, student0.getMandatoryHours());
      assertNull(student0.getNationalId());
      assertEquals("-<YXfp{m>g?8", student0.getSecondarySchool());
      assertEquals(20, student0.getOptionalCredits());
      assertEquals(20.0, student0.getGpa(), 0.01);
      assertEquals(20, student0.getMobilityTerms());
      assertNull(student0.getEmail());
      assertEquals("-<YXfp{m>g?8", student0.getNationality());
      assertEquals("", student0.getStatusTerm());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getCurriculumCode());
      assertEquals((-965.0), student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getDisabilities());
      assertEquals("w9", student0.getCountry());
      assertEquals("Invalid range: ", student0.getCourseCode());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertNull(student0.getMaritalStatus());
      assertEquals("CANCELAMENTO P/ SOLICITACAO ALUNO", student0.getSecondarySchoolGraduationYear());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Curriculum curriculum0 = new Curriculum("", "pattern.flags", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 39, 39, 39, 39, 39, 39, 0, 39, 0, hashSet0, hashSet0, hashSet0, hashSet0, hashSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(39, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(39, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(117.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("pattern.flags", curriculum0.getCurriculumCode());
      assertFalse(arrayList0.contains(0));
      assertFalse(hashSet0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("", "ZH7o*1E{OMT3z", (String) null, "ZH7o*1E{OMT3z", "+qkvlvb[gw~", (String) null, "\"1", "+qkvlvb[gw~", "ZH7o*1E{OMT3z", "i~`K(JIvAm&&#:T", "System", "CANCELAMENTO P/ MUDANCA CURSO", studentStatus0, "ZH7o*1E{OMT3z", "", "pattern.flags", "i~`K(JIvAm&&#:T", "OkY<B.)dePeNW#", "", "", (String) null, "pattern.flags", curriculum0, (-1628), 0, 39, 7, 0, (-3067), (-1003), 7, 723, 1135.068260298834, (-1003), 0, 0, 1, 0, 1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(39, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(39, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(117.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("pattern.flags", curriculum0.getCurriculumCode());
      assertEquals(1135.068260298834, student0.getIea(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("ZH7o*1E{OMT3z", student0.getNationalId());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("i~`K(JIvAm&&#:T", student0.getPlaceOfBirth());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getStatusStr());
      assertEquals((-3060), student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("System", student0.getRace());
      assertEquals("pattern.flags", student0.getCurriculumCode());
      assertEquals("+qkvlvb[gw~", student0.getEmail());
      assertEquals(7.0, student0.getGpa(), 0.01);
      assertEquals("ZH7o*1E{OMT3z", student0.getBirthDate());
      assertEquals(723.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-3067), student0.getComplementaryCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(39, student0.getOptionalHours());
      assertNull(student0.getGender());
      assertEquals("OkY<B.)dePeNW#", student0.getAffirmativePolicy());
      assertNull(student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("i~`K(JIvAm&&#:T", student0.getDisabilities());
      assertEquals("ZH7o*1E{OMT3z", student0.getCountry());
      assertEquals("\"1", student0.getMaritalStatus());
      assertEquals("+qkvlvb[gw~", student0.getNationality());
      assertEquals((-1003), student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(6, student0.getStatusIndex());
      assertNull(student0.getCourseCode());
      assertEquals((-1628), student0.getMandatoryHours());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-1003), student0.getCompletedTerms());
      assertEquals(1, student0.getMobilityTerms());
      assertEquals("ZH7o*1E{OMT3z", student0.getStatusTerm());
      assertEquals(7, student0.getOptionalCredits());
      assertEquals("pattern.flags", student0.getAdmissionTerm());
      assertFalse(arrayList0.contains(1));
      assertFalse(hashSet0.contains(""));
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(39, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(39, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(39, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(117.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("pattern.flags", curriculum0.getCurriculumCode());
      assertEquals(1135.068260298834, student0.getIea(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("ZH7o*1E{OMT3z", student0.getNationalId());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("i~`K(JIvAm&&#:T", student0.getPlaceOfBirth());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getStatusStr());
      assertEquals((-3060), student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("System", student0.getRace());
      assertEquals("pattern.flags", student0.getCurriculumCode());
      assertEquals("+qkvlvb[gw~", student0.getEmail());
      assertEquals(7.0, student0.getGpa(), 0.01);
      assertEquals("ZH7o*1E{OMT3z", student0.getBirthDate());
      assertEquals(723.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-3067), student0.getComplementaryCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(39, student0.getOptionalHours());
      assertNull(student0.getGender());
      assertEquals("OkY<B.)dePeNW#", student0.getAffirmativePolicy());
      assertNull(student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("i~`K(JIvAm&&#:T", student0.getDisabilities());
      assertEquals("ZH7o*1E{OMT3z", student0.getCountry());
      assertEquals("\"1", student0.getMaritalStatus());
      assertEquals("+qkvlvb[gw~", student0.getNationality());
      assertEquals((-1003), student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(6, student0.getStatusIndex());
      assertNull(student0.getCourseCode());
      assertEquals((-1628), student0.getMandatoryHours());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-1003), student0.getCompletedTerms());
      assertEquals(1, student0.getMobilityTerms());
      assertEquals("ZH7o*1E{OMT3z", student0.getStatusTerm());
      assertEquals(7, student0.getOptionalCredits());
      assertEquals("pattern.flags", student0.getAdmissionTerm());
      assertFalse(arrayList0.contains(int0));
      assertFalse(hashSet0.contains(""));
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("", "43Rl|K", "CANCELAMENTO P/ DECISAO JUDICIAL", "gYS:]zHPIN-BJ", "", "CANCELAMENTO P/ DECISAO JUDICIAL", "N3yIQ!G[=h}IPr@0", "EC%teVIm&Zce:*7aO ", (String) null, "N3yIQ!G[=h}IPr@0", "", "CANCELAMENTO P/ DECISAO JUDICIAL", studentStatus0, "@A{^Kk;5wT+_566qN", "", "EC%teVIm&Zce:*7aO ", "EC%teVIm&Zce:*7aO ", "", "com.google.common.cache.LocalCache$LocalLoadingCache", "gYS:]zHPIN-BJ", "KS%", "gYS:]zHPIN-BJ", (Curriculum) null, (-587), (-3075), (-587), 12288, 0, 0, 1, 4.0, 0.5, 3387.551038908, 1553, 0, 53, (-2952), 16, 0);
      assertEquals((-587), student0.getOptionalHours());
      assertEquals(1, student0.getAttemptedCredits());
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals(16, student0.getEnrolledCredits());
      assertEquals("", student0.getRace());
      assertEquals("EC%teVIm&Zce:*7aO ", student0.getNationality());
      assertNull(student0.getCountry());
      assertEquals(3387.551038908, student0.getIea(), 0.01);
      assertEquals("EC%teVIm&Zce:*7aO ", student0.getAdmissionTerm());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getGender());
      assertEquals(5, student0.getStatusIndex());
      assertEquals("@A{^Kk;5wT+_566qN", student0.getStatusTerm());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(12288, student0.getOptionalCredits());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getName());
      assertEquals("EC%teVIm&Zce:*7aO ", student0.getDisabilities());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals((-2952), student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(53, student0.getInstitutionalEnrollments());
      assertEquals(9213, student0.getCompletedCredits());
      assertEquals((-3075), student0.getMandatoryCredits());
      assertEquals("com.google.common.cache.LocalCache$LocalLoadingCache", student0.getSecondarySchool());
      assertEquals("43Rl|K", student0.getNationalId());
      assertEquals("KS%", student0.getCourseCode());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("gYS:]zHPIN-BJ", student0.getCurriculumCode());
      assertEquals("gYS:]zHPIN-BJ", student0.getBirthDate());
      assertEquals("gYS:]zHPIN-BJ", student0.getSecondarySchoolGraduationYear());
      assertEquals(1553, student0.getCompletedTerms());
      assertEquals(0.5, student0.getMc(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getStatusStr());
      assertEquals((-587), student0.getMandatoryHours());
      assertEquals(0, student0.getSuspendedTerms());
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals((-587), student0.getOptionalHours());
      assertEquals(1, student0.getAttemptedCredits());
      assertEquals(4.0, student0.getGpa(), 0.01);
      assertEquals(16, student0.getEnrolledCredits());
      assertEquals("", student0.getRace());
      assertEquals("EC%teVIm&Zce:*7aO ", student0.getNationality());
      assertNull(student0.getCountry());
      assertEquals(3387.551038908, student0.getIea(), 0.01);
      assertEquals("EC%teVIm&Zce:*7aO ", student0.getAdmissionTerm());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getGender());
      assertEquals(5, student0.getStatusIndex());
      assertEquals("@A{^Kk;5wT+_566qN", student0.getStatusTerm());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(12288, student0.getOptionalCredits());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getName());
      assertEquals("EC%teVIm&Zce:*7aO ", student0.getDisabilities());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals((-2952), student0.getMobilityTerms());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(53, student0.getInstitutionalEnrollments());
      assertEquals(9213, student0.getCompletedCredits());
      assertEquals((-3075), student0.getMandatoryCredits());
      assertEquals("com.google.common.cache.LocalCache$LocalLoadingCache", student0.getSecondarySchool());
      assertEquals("43Rl|K", student0.getNationalId());
      assertEquals("KS%", student0.getCourseCode());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("gYS:]zHPIN-BJ", student0.getCurriculumCode());
      assertEquals("gYS:]zHPIN-BJ", student0.getBirthDate());
      assertEquals("gYS:]zHPIN-BJ", student0.getSecondarySchoolGraduationYear());
      assertEquals(1553, student0.getCompletedTerms());
      assertEquals(0.5, student0.getMc(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getStatusStr());
      assertEquals((-587), student0.getMandatoryHours());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("}", "}", "@A{^Kk;5wT+_566qN", "}", "}", ", maritalStatus='", "N3yIQ!G[=h}IPr@0", "N3yIQ!G[=h}IPr@0", "43Rl|K", "@A{^Kk;5wT+_566qN", ", country='", "CANCELAMENTO DE MATRICULA ", studentStatus0, "o-|(`", "CANCELAMENTO P/ DECISAO JUDICIAL", "@A{^Kk;5wT+_566qN", "", "", (String) null, "}", "CANCELAMENTO DE MATRICULA ", "N3yIQ!G[=h}IPr@0", (Curriculum) null, 1, 16, 16, 12288, (-2429), 159, (-1692), (-2517.1839511), (-1692), 159, 5634, 0, (-2917), 0, (-4609), 159);
      assertEquals("}", student0.getBirthDate());
      assertEquals("}", student0.getEmail());
      assertEquals((-2917), student0.getInstitutionalEnrollments());
      assertEquals(12288, student0.getOptionalCredits());
      assertEquals("CANCELAMENTO DE MATRICULA ", student0.getCourseCode());
      assertEquals((-1692.0), student0.getMc(), 0.01);
      assertEquals(159.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("}", student0.getNationalId());
      assertNull(student0.getSecondarySchool());
      assertEquals("CANCELAMENTO DE MATRICULA ", student0.getStatusStr());
      assertEquals("o-|(`", student0.getStatusTerm());
      assertEquals((-4609), student0.getEnrolledCredits());
      assertEquals(159, student0.getComplementaryCredits());
      assertEquals((-2517.1839511), student0.getGpa(), 0.01);
      assertEquals("@A{^Kk;5wT+_566qN", student0.getName());
      assertEquals(16, student0.getMandatoryCredits());
      assertEquals(", maritalStatus='", student0.getGender());
      assertEquals(4, student0.getStatusIndex());
      assertEquals((-2429), student0.getComplementaryHours());
      assertEquals("}", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getDisabilities());
      assertEquals("@A{^Kk;5wT+_566qN", student0.getPlaceOfBirth());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(1, student0.getMandatoryHours());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("43Rl|K", student0.getCountry());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAdmissionStr());
      assertEquals(5634, student0.getCompletedTerms());
      assertEquals(159.0, student0.getIea(), 0.01);
      assertEquals(12463, student0.getCompletedCredits());
      assertEquals(16, student0.getOptionalHours());
      assertEquals(", country='", student0.getRace());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-1692), student0.getAttemptedCredits());
      assertEquals("@A{^Kk;5wT+_566qN", student0.getAdmissionTerm());
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals("}", student0.getBirthDate());
      assertEquals("}", student0.getEmail());
      assertEquals((-2917), student0.getInstitutionalEnrollments());
      assertEquals(12288, student0.getOptionalCredits());
      assertEquals("CANCELAMENTO DE MATRICULA ", student0.getCourseCode());
      assertEquals((-1692.0), student0.getMc(), 0.01);
      assertEquals(159.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("}", student0.getNationalId());
      assertNull(student0.getSecondarySchool());
      assertEquals("CANCELAMENTO DE MATRICULA ", student0.getStatusStr());
      assertEquals("o-|(`", student0.getStatusTerm());
      assertEquals((-4609), student0.getEnrolledCredits());
      assertEquals(159, student0.getComplementaryCredits());
      assertEquals((-2517.1839511), student0.getGpa(), 0.01);
      assertEquals("@A{^Kk;5wT+_566qN", student0.getName());
      assertEquals(16, student0.getMandatoryCredits());
      assertEquals(", maritalStatus='", student0.getGender());
      assertEquals(4, student0.getStatusIndex());
      assertEquals((-2429), student0.getComplementaryHours());
      assertEquals("}", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getDisabilities());
      assertEquals("@A{^Kk;5wT+_566qN", student0.getPlaceOfBirth());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(1, student0.getMandatoryHours());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("43Rl|K", student0.getCountry());
      assertEquals("CANCELAMENTO P/ DECISAO JUDICIAL", student0.getAdmissionStr());
      assertEquals(5634, student0.getCompletedTerms());
      assertEquals(159.0, student0.getIea(), 0.01);
      assertEquals(12463, student0.getCompletedCredits());
      assertEquals(16, student0.getOptionalHours());
      assertEquals(", country='", student0.getRace());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals((-1692), student0.getAttemptedCredits());
      assertEquals("@A{^Kk;5wT+_566qN", student0.getAdmissionTerm());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student(", name='", (String) null, (String) null, (String) null, "_r;4;t^@_jSBn+$", (String) null, "[,!TY{>~K=g/b@w4e", ", name='", (String) null, (String) null, "3zvlqr-v-_`;U", "CANCELADO REPROVOU TODAS POR FALTAS", studentStatus0, "[,!TY{>~K=g/b@w4e", "_r;4;t^@_jSBn+$", (String) null, "gR4<\u0007d", "CANCELADO REPROVOU TODAS POR FALTAS", "[,!TY{>~K=g/b@w4e", "3zvlqr-v-_`;U", "3zvlqr-v-_`;U", "3zvlqr-v-_`;U", (Curriculum) null, 2643, 500, 1086, 500, 500, 1, 1, 0.0, 500, 3.0, 111, 1358, 1358, 2643, 1358, 1358);
      assertEquals(500, student0.getMandatoryCredits());
      assertEquals("[,!TY{>~K=g/b@w4e", student0.getStatusTerm());
      assertEquals(500, student0.getOptionalCredits());
      assertEquals(500.0, student0.getMc(), 0.01);
      assertEquals(", name='", student0.getNationality());
      assertEquals(1358.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(3.0, student0.getIea(), 0.01);
      assertNull(student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(1, student0.getAttemptedCredits());
      assertEquals("[,!TY{>~K=g/b@w4e", student0.getSecondarySchool());
      assertEquals(1358, student0.getEnrolledCredits());
      assertEquals(111, student0.getCompletedTerms());
      assertNull(student0.getName());
      assertEquals("3zvlqr-v-_`;U", student0.getRace());
      assertEquals("[,!TY{>~K=g/b@w4e", student0.getMaritalStatus());
      assertEquals(1001, student0.getCompletedCredits());
      assertEquals("3zvlqr-v-_`;U", student0.getCourseCode());
      assertNull(student0.getNationalId());
      assertNull(student0.getPlaceOfBirth());
      assertEquals(1358, student0.getInstitutionalEnrollments());
      assertNull(student0.getGender());
      assertEquals("3zvlqr-v-_`;U", student0.getCurriculumCode());
      assertEquals(1, student0.getComplementaryCredits());
      assertEquals("3zvlqr-v-_`;U", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getStatusIndex());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getAffirmativePolicy());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getStatusStr());
      assertEquals("_r;4;t^@_jSBn+$", student0.getAdmissionStr());
      assertNull(student0.getBirthDate());
      assertEquals(1086, student0.getOptionalHours());
      assertEquals(1358, student0.getSuspendedTerms());
      assertEquals("_r;4;t^@_jSBn+$", student0.getEmail());
      assertNull(student0.getAdmissionTerm());
      assertEquals(2643, student0.getMobilityTerms());
      assertEquals(2643, student0.getMandatoryHours());
      assertEquals(500, student0.getComplementaryHours());
      assertEquals("gR4<\u0007d", student0.getDisabilities());
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals(500, student0.getMandatoryCredits());
      assertEquals("[,!TY{>~K=g/b@w4e", student0.getStatusTerm());
      assertEquals(500, student0.getOptionalCredits());
      assertEquals(500.0, student0.getMc(), 0.01);
      assertEquals(", name='", student0.getNationality());
      assertEquals(1358.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(3.0, student0.getIea(), 0.01);
      assertNull(student0.getCountry());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(1, student0.getAttemptedCredits());
      assertEquals("[,!TY{>~K=g/b@w4e", student0.getSecondarySchool());
      assertEquals(1358, student0.getEnrolledCredits());
      assertEquals(111, student0.getCompletedTerms());
      assertNull(student0.getName());
      assertEquals("3zvlqr-v-_`;U", student0.getRace());
      assertEquals("[,!TY{>~K=g/b@w4e", student0.getMaritalStatus());
      assertEquals(1001, student0.getCompletedCredits());
      assertEquals("3zvlqr-v-_`;U", student0.getCourseCode());
      assertNull(student0.getNationalId());
      assertNull(student0.getPlaceOfBirth());
      assertEquals(1358, student0.getInstitutionalEnrollments());
      assertNull(student0.getGender());
      assertEquals("3zvlqr-v-_`;U", student0.getCurriculumCode());
      assertEquals(1, student0.getComplementaryCredits());
      assertEquals("3zvlqr-v-_`;U", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getStatusIndex());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getAffirmativePolicy());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getStatusStr());
      assertEquals("_r;4;t^@_jSBn+$", student0.getAdmissionStr());
      assertNull(student0.getBirthDate());
      assertEquals(1086, student0.getOptionalHours());
      assertEquals(1358, student0.getSuspendedTerms());
      assertEquals("_r;4;t^@_jSBn+$", student0.getEmail());
      assertNull(student0.getAdmissionTerm());
      assertEquals(2643, student0.getMobilityTerms());
      assertEquals(2643, student0.getMandatoryHours());
      assertEquals(500, student0.getComplementaryHours());
      assertEquals("gR4<\u0007d", student0.getDisabilities());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("", "CANCELADO NOVO INGRESSO OUTRO CURSO", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, (-1949), Integer.MAX_VALUE, 20, (-1949), Integer.MAX_VALUE, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", studentStatus0, "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0, Integer.MAX_VALUE, 3, 7497, 3, Integer.MAX_VALUE, 72, 0, Integer.MAX_VALUE, 0.0, Integer.MAX_VALUE, Integer.MAX_VALUE, 13, Integer.MAX_VALUE, 0, 0, 13);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAdmissionTerm());
      assertEquals(2.147483647E9, student0.getGpa(), 0.01);
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryHours());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getDisabilities());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCourseCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getRace());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAffirmativePolicy());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals(2.147483647E9, student0.getIea(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCurriculumCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getName());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCountry());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getPlaceOfBirth());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals(Integer.MAX_VALUE, student0.getMandatoryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(2, student0.getStatusIndex());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(72, student0.getComplementaryCredits());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAdmissionTerm());
      assertEquals(2.147483647E9, student0.getGpa(), 0.01);
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryHours());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getDisabilities());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCourseCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getRace());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAffirmativePolicy());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals(2.147483647E9, student0.getIea(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCurriculumCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getName());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCountry());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getPlaceOfBirth());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals(Integer.MAX_VALUE, student0.getMandatoryHours());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(2, student0.getStatusIndex());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getGender());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(72, student0.getComplementaryCredits());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("CANCELAMENTO DE MATRICULA ", "totalLoadTime", "", "bK'-ih", "", "WWSJj-{", "bK'-ih", "", "!", "WWSJj-{", "", "CANCELADO NOVO INGRESSO MESMO CURSO", studentStatus0, "", "", "", "&]I..^s", "", "CANCELADO NOVO INGRESSO MESMO CURSO", "&]I..^s", "!", "", (Curriculum) null, 785, 1, 785, 785, (-2763), 3857, 3857, 841.88794453137, (-855.93437), (-1971.0), (-3329), (-5381), 3857, 0, (-473), 1);
      assertEquals(3857, student0.getComplementaryCredits());
      assertEquals("", student0.getEmail());
      assertEquals("bK'-ih", student0.getBirthDate());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(785, student0.getOptionalCredits());
      assertEquals("!", student0.getCountry());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getName());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(785, student0.getOptionalHours());
      assertEquals(841.88794453137, student0.getGpa(), 0.01);
      assertEquals(3857, student0.getInstitutionalEnrollments());
      assertEquals((-1971.0), student0.getIea(), 0.01);
      assertEquals("!", student0.getCourseCode());
      assertEquals((-3329), student0.getCompletedTerms());
      assertEquals((-855.93437), student0.getMc(), 0.01);
      assertEquals("&]I..^s", student0.getSecondarySchoolGraduationYear());
      assertEquals(1, student0.getStatusIndex());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("totalLoadTime", student0.getNationalId());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getStatusTerm());
      assertEquals(3857, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("CANCELADO NOVO INGRESSO MESMO CURSO", student0.getStatusStr());
      assertEquals((-2763), student0.getComplementaryHours());
      assertEquals("&]I..^s", student0.getDisabilities());
      assertEquals("WWSJj-{", student0.getPlaceOfBirth());
      assertEquals("bK'-ih", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(785, student0.getMandatoryHours());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-5381), student0.getSuspendedTerms());
      assertEquals("WWSJj-{", student0.getGender());
      assertEquals("CANCELADO NOVO INGRESSO MESMO CURSO", student0.getSecondarySchool());
      assertEquals(1, student0.getMandatoryCredits());
      assertEquals(4643, student0.getCompletedCredits());
      assertEquals((-473), student0.getEnrolledCredits());
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals(3857, student0.getComplementaryCredits());
      assertEquals("", student0.getEmail());
      assertEquals("bK'-ih", student0.getBirthDate());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(785, student0.getOptionalCredits());
      assertEquals("!", student0.getCountry());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getName());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(785, student0.getOptionalHours());
      assertEquals(841.88794453137, student0.getGpa(), 0.01);
      assertEquals(3857, student0.getInstitutionalEnrollments());
      assertEquals((-1971.0), student0.getIea(), 0.01);
      assertEquals("!", student0.getCourseCode());
      assertEquals((-3329), student0.getCompletedTerms());
      assertEquals((-855.93437), student0.getMc(), 0.01);
      assertEquals("&]I..^s", student0.getSecondarySchoolGraduationYear());
      assertEquals(1, student0.getStatusIndex());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("totalLoadTime", student0.getNationalId());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getStatusTerm());
      assertEquals(3857, student0.getAttemptedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("CANCELADO NOVO INGRESSO MESMO CURSO", student0.getStatusStr());
      assertEquals((-2763), student0.getComplementaryHours());
      assertEquals("&]I..^s", student0.getDisabilities());
      assertEquals("WWSJj-{", student0.getPlaceOfBirth());
      assertEquals("bK'-ih", student0.getMaritalStatus());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(785, student0.getMandatoryHours());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals((-5381), student0.getSuspendedTerms());
      assertEquals("WWSJj-{", student0.getGender());
      assertEquals("CANCELADO NOVO INGRESSO MESMO CURSO", student0.getSecondarySchool());
      assertEquals(1, student0.getMandatoryCredits());
      assertEquals(4643, student0.getCompletedCredits());
      assertEquals((-473), student0.getEnrolledCredits());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("71b?DU*~%D", "", "", "\")", "71b?DU*~%D", "", "\")", "", "", "", "61+=bs", "", studentStatus0, "", ", country='", "", "", "CANCELAMENTO POR ABANDONO", "", "", "Ln~EU';BJnSv", "", (Curriculum) null, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), 0.0, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183));
      assertEquals((-2183), student0.getEnrolledCredits());
      assertEquals("", student0.getNationality());
      assertEquals((-6549), student0.getCompletedCredits());
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals((-2183.0), student0.getMc(), 0.01);
      assertEquals((-2183), student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-2183.0), student0.getGpa(), 0.01);
      assertEquals((-2183), student0.getOptionalCredits());
      assertEquals("61+=bs", student0.getRace());
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getCurriculumCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals((-2183), student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals((-2183), student0.getComplementaryHours());
      assertEquals((-2183), student0.getOptionalHours());
      assertEquals((-2183), student0.getMobilityTerms());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", student0.getName());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
      assertEquals((-2183.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2183), student0.getMandatoryHours());
      assertEquals("", student0.getDisabilities());
      assertEquals((-2183), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("71b?DU*~%D", student0.getEmail());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getGender());
      assertEquals((-2183), student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getStatusStr());
      assertEquals((-2183), student0.getMandatoryCredits());
      assertEquals((-2183), student0.getSuspendedTerms());
      assertNotNull(student0);
      
      int int0 = student0.getStatusIndex();
      assertEquals((-2183), student0.getEnrolledCredits());
      assertEquals("", student0.getNationality());
      assertEquals((-6549), student0.getCompletedCredits());
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals((-2183.0), student0.getMc(), 0.01);
      assertEquals((-2183), student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals((-2183.0), student0.getGpa(), 0.01);
      assertEquals((-2183), student0.getOptionalCredits());
      assertEquals("61+=bs", student0.getRace());
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("", student0.getCurriculumCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals((-2183), student0.getCompletedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals((-2183), student0.getComplementaryHours());
      assertEquals((-2183), student0.getOptionalHours());
      assertEquals((-2183), student0.getMobilityTerms());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", student0.getName());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
      assertEquals((-2183.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2183), student0.getMandatoryHours());
      assertEquals("", student0.getDisabilities());
      assertEquals((-2183), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("71b?DU*~%D", student0.getEmail());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getGender());
      assertEquals((-2183), student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getStatusStr());
      assertEquals((-2183), student0.getMandatoryCredits());
      assertEquals((-2183), student0.getSuspendedTerms());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", "", "", "", "", "", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", studentStatus0, "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", (String) null, "RU94%DgMEv(%yj_KRZ6", "", "", "s.F_", "s.F_", (Curriculum) null, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, (-460), 0, 0, 0, 2, 0);
      assertEquals(2.0, student0.getIea(), 0.01);
      assertEquals("", student0.getSecondarySchool());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAffirmativePolicy());
      assertEquals("s.F_", student0.getCurriculumCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(2, student0.getComplementaryHours());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getName());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionStr());
      assertEquals(2, student0.getComplementaryCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals("s.F_", student0.getCourseCode());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals(4, student0.getCompletedCredits());
      assertEquals(2, student0.getEnrolledCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(2.0, student0.getMc(), 0.01);
      assertEquals("", student0.getRace());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getEmail());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getStatusStr());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionTerm());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(2.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getGender());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getStatusTerm());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getDisabilities());
      assertEquals("", student0.getNationality());
      assertEquals((-460), student0.getCompletedTerms());
      assertEquals("", student0.getBirthDate());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getPlaceOfBirth());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getCountry());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNotNull(student0);
      
      student0.setAdmissionGrade((-460));
      assertEquals(2.0, student0.getIea(), 0.01);
      assertEquals("", student0.getSecondarySchool());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAffirmativePolicy());
      assertEquals("s.F_", student0.getCurriculumCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(2, student0.getComplementaryHours());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getName());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionStr());
      assertEquals(2, student0.getComplementaryCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals((-460.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("s.F_", student0.getCourseCode());
      assertEquals("", student0.getMaritalStatus());
      assertEquals(2, student0.getOptionalCredits());
      assertEquals(4, student0.getCompletedCredits());
      assertEquals(2, student0.getEnrolledCredits());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(2.0, student0.getMc(), 0.01);
      assertEquals("", student0.getRace());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getStatusStr());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionTerm());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("", student0.getNationalId());
      assertEquals(2, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(2.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getGender());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getStatusTerm());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getDisabilities());
      assertEquals("", student0.getNationality());
      assertEquals((-460), student0.getCompletedTerms());
      assertEquals("", student0.getBirthDate());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getPlaceOfBirth());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getCountry());
      assertEquals(0, student0.getInstitutionalEnrollments());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertNull(student0.getStatusStr());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getNationalId());
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
      assertEquals(", status=", student0.getStatusTerm());
      assertNull(student0.getNationality());
      assertEquals(0, student0.getOptionalCredits());
      assertNull(student0.getAdmissionStr());
      assertNull(student0.getName());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertEquals((-1844), student0.getMobilityTerms());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals((-1844), student0.getCompletedCredits());
      assertEquals((-3786), student0.getMandatoryHours());
      assertEquals(": ", student0.getCourseCode());
      assertNull(student0.getGender());
      assertNull(student0.getMaritalStatus());
      assertNull(student0.getCountry());
      assertEquals(", status=", student0.getRace());
      assertNull(student0.getSecondarySchool());
      assertEquals((-3786), student0.getComplementaryHours());
      assertEquals((-1844), student0.getAttemptedCredits());
      assertNull(student0.getBirthDate());
      assertNull(student0.getEmail());
      assertEquals((-4), student0.getEnrolledCredits());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals((-1844), student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryCredits());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-4.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNotNull(student0);
      
      student0.setMandatoryHours((-1844));
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertNull(student0.getStatusStr());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getNationalId());
      assertEquals((-1844), student0.getMandatoryHours());
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
      assertEquals(", status=", student0.getStatusTerm());
      assertNull(student0.getNationality());
      assertEquals(0, student0.getOptionalCredits());
      assertNull(student0.getAdmissionStr());
      assertNull(student0.getName());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertEquals((-1844), student0.getMobilityTerms());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals((-1844), student0.getCompletedCredits());
      assertEquals(": ", student0.getCourseCode());
      assertNull(student0.getGender());
      assertNull(student0.getMaritalStatus());
      assertNull(student0.getCountry());
      assertEquals(", status=", student0.getRace());
      assertNull(student0.getSecondarySchool());
      assertEquals((-3786), student0.getComplementaryHours());
      assertEquals((-1844), student0.getAttemptedCredits());
      assertNull(student0.getBirthDate());
      assertNull(student0.getEmail());
      assertEquals((-4), student0.getEnrolledCredits());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals((-1844), student0.getSuspendedTerms());
      assertEquals(0, student0.getMandatoryCredits());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals((-4.0), student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(0.0, student0.getGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("7>dOoq]>JvA't=ykf2", "", "7>dOoq]>JvA't=ykf2", "7>dOoq]>JvA't=ykf2", "", "CANCELADO REPROVOU TODAS POR FALTAS", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", (String) null, "RT", ", complementaryHours=", (String) null, studentStatus0, "W%0k[GzP:el", "org.apache.commons.io.filefilter.DelegateFileFilter", "7>dOoq]>JvA't=ykf2", "CANCELAMENTO POR ABANDONO", ", secondarySchool='", "CANCELAMENTO P/ MUDANCA CURSO", "", "CCNvW^xQjbE$'|Nbk", "W%0k[GzP:el", (Curriculum) null, 329, 329, 329, 329, 329, 11, 329, 0.03, (-1040.8452), 0.03, 0, 0, (-1107), 0, 0, 1.0);
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertNull(student0.getCountry());
      assertEquals(329, student0.getMandatoryHours());
      assertEquals(329, student0.getAttemptedCredits());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals(329, student0.getMandatoryCredits());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals((-1107), student0.getInstitutionalEnrollments());
      assertEquals(669, student0.getCompletedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertNull(student0.getStatusStr());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("", student0.getNationalId());
      assertEquals(329, student0.getOptionalHours());
      assertEquals((-1040.8452), student0.getMc(), 0.01);
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals(329, student0.getOptionalCredits());
      assertEquals("", student0.getEmail());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals(329, student0.getComplementaryHours());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertNotNull(student0);
      
      student0.setEmail("");
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertNull(student0.getCountry());
      assertEquals(329, student0.getMandatoryHours());
      assertEquals(329, student0.getAttemptedCredits());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals(329, student0.getMandatoryCredits());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals((-1107), student0.getInstitutionalEnrollments());
      assertEquals(669, student0.getCompletedCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertNull(student0.getStatusStr());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("", student0.getNationalId());
      assertEquals(329, student0.getOptionalHours());
      assertEquals((-1040.8452), student0.getMc(), 0.01);
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals(329, student0.getOptionalCredits());
      assertEquals("", student0.getEmail());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals(329, student0.getComplementaryHours());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ", disabilities='", ", disabilities='", ", disabilities='", ", status=", ", status=", ", disabilities='", "", studentStatus0, ", disabilities='", ", disabilities='", "", "0LzRj5H", ", disabilities='", "", "", "", "", (Curriculum) null, 0, 0, 0, 0, 0, 0, 0, 203.24446603172936, 0, 474.793453, 0, 0, 0, 677, 0, 0);
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", status=", student0.getEmail());
      assertEquals("", student0.getBirthDate());
      assertEquals(", disabilities='", student0.getRace());
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals(", disabilities='", student0.getStatusTerm());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(", disabilities='", student0.getAdmissionStr());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(", status=", student0.getCountry());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(0, student0.getOptionalHours());
      assertNotNull(student0);
      
      Registration registration0 = student0.getRegistration();
      assertEquals("", student0.getNationalId());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", status=", student0.getEmail());
      assertEquals("", student0.getBirthDate());
      assertEquals(", disabilities='", student0.getRace());
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals(", disabilities='", student0.getStatusTerm());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(", disabilities='", student0.getAdmissionStr());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(", status=", student0.getCountry());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(", disabilities='", registration0.getRegistration());
      assertEquals(", disabilities='", registration0.toString());
      assertNotNull(registration0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Curriculum curriculum0 = new Curriculum("", "CANCELADO NOVO INGRESSO OUTRO CURSO", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, (-1949), Integer.MAX_VALUE, 20, (-1949), Integer.MAX_VALUE, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", studentStatus0, "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0, Integer.MAX_VALUE, 3, 7497, 3, Integer.MAX_VALUE, 72, 0, Integer.MAX_VALUE, 0.0, Integer.MAX_VALUE, Integer.MAX_VALUE, 13, Integer.MAX_VALUE, 0, 0, 13);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAdmissionTerm());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals(2.147483647E9, student0.getGpa(), 0.01);
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getDisabilities());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCourseCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("", student0.getRace());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getName());
      assertEquals(2.147483647E9, student0.getIea(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAffirmativePolicy());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCountry());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getPlaceOfBirth());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getGender());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryHours());
      assertEquals(2, student0.getStatusIndex());
      assertEquals(72, student0.getComplementaryCredits());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertNotNull(student0);
      
      double double0 = student0.getIea();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1949), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinActivitiesNeeded());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(20, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMaxNumberOfTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1949), curriculum0.getMinNumberOfTerms());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAdmissionTerm());
      assertEquals(7497, student0.getOptionalHours());
      assertEquals(2.147483647E9, student0.getGpa(), 0.01);
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(13, student0.getSuspendedTerms());
      assertEquals(78, student0.getCompletedCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals(13.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getDisabilities());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getEmail());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCourseCode());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(3, student0.getMandatoryCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationalId());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("", student0.getRace());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCurriculumCode());
      assertEquals(Integer.MAX_VALUE, student0.getMandatoryHours());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getBirthDate());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getName());
      assertEquals(2.147483647E9, student0.getIea(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getAffirmativePolicy());
      assertEquals(Integer.MAX_VALUE, student0.getInstitutionalEnrollments());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getStatusStr());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getCountry());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getPlaceOfBirth());
      assertEquals(Integer.MAX_VALUE, student0.getCompletedTerms());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(3, student0.getOptionalCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getGender());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getStatusTerm());
      assertEquals(Integer.MAX_VALUE, student0.getComplementaryHours());
      assertEquals(2, student0.getStatusIndex());
      assertEquals(72, student0.getComplementaryCredits());
      assertFalse(linkedHashSet0.contains("CANCELADO NOVO INGRESSO OUTRO CURSO"));
      assertEquals(2.147483647E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", studentStatus0, "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", (Curriculum) null, 14, 14, 14, 1592, 1592, 14, 14, 14, 5379.97808, (-1866.5970733057043), 1592, (-1761), 14, 14, 1592, 14);
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals((-1866.5970733057043), student0.getIea(), 0.01);
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals(14, student0.getMandatoryHours());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals("oe_", student0.getNationality());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals("oe_", student0.getDisabilities());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getStatusStr());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals("oe_", student0.getNationalId());
      assertEquals("oe_", student0.getBirthDate());
      assertEquals(14, student0.getOptionalHours());
      assertEquals("oe_", student0.getEmail());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals("oe_", student0.getName());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getGender());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertNotNull(student0);
      
      student0.setIea(5379.97808);
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals(14, student0.getMandatoryHours());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals("oe_", student0.getNationality());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals(5379.97808, student0.getIea(), 0.01);
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals("oe_", student0.getDisabilities());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getStatusStr());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals("oe_", student0.getNationalId());
      assertEquals("oe_", student0.getBirthDate());
      assertEquals(14, student0.getOptionalHours());
      assertEquals("oe_", student0.getEmail());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals("oe_", student0.getName());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getGender());
      assertEquals(14, student0.getInstitutionalEnrollments());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", studentStatus0, "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", (Curriculum) null, 14, 14, 14, 1592, 1592, 14, 14, 14, 5379.97808, (-1866.5970733057043), 1592, (-1761), 14, 14, 1592, 14);
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals("oe_", student0.getNationality());
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals((-1866.5970733057043), student0.getIea(), 0.01);
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(14, student0.getMandatoryHours());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals(14, student0.getOptionalHours());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals("oe_", student0.getNationalId());
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getName());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getEmail());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals("oe_", student0.getGender());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals("oe_", student0.getDisabilities());
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals("oe_", student0.getStatusStr());
      assertEquals("oe_", student0.getBirthDate());
      assertNotNull(student0);
      
      student0.setBirthDate("");
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals("oe_", student0.getNationality());
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals((-1866.5970733057043), student0.getIea(), 0.01);
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals("", student0.getBirthDate());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(14, student0.getMandatoryHours());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals(14, student0.getOptionalHours());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals("oe_", student0.getNationalId());
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getName());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getEmail());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals("oe_", student0.getGender());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals(14, student0.getMandatoryCredits());
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals("oe_", student0.getDisabilities());
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals("oe_", student0.getStatusStr());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("71b?DU*~%D", "", "", "\")", "71b?DU*~%D", "", "\")", "", "", "", "61+=bs", "", studentStatus0, "", ", country='", "", "", "CANCELAMENTO POR ABANDONO", "", "", "Ln~EU';BJnSv", "", (Curriculum) null, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), 0.0, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183));
      assertEquals((-2183), student0.getAttemptedCredits());
      assertEquals((-2183), student0.getCompletedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-2183), student0.getOptionalHours());
      assertEquals((-2183), student0.getSuspendedTerms());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-2183.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2183.0), student0.getMc(), 0.01);
      assertEquals((-2183), student0.getEnrolledCredits());
      assertEquals((-6549), student0.getCompletedCredits());
      assertEquals("", student0.getName());
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCountry());
      assertEquals("71b?DU*~%D", student0.getEmail());
      assertEquals((-2183), student0.getInstitutionalEnrollments());
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals((-2183), student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals((-2183), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals("61+=bs", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getNationalId());
      assertEquals((-2183), student0.getComplementaryHours());
      assertEquals((-2183), student0.getMobilityTerms());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
      assertEquals((-2183), student0.getComplementaryCredits());
      assertEquals((-2183), student0.getMandatoryHours());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-2183.0), student0.getGpa(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getDisabilities());
      assertNotNull(student0);
      
      student0.setStatusTerm("71b?DU*~%D");
      assertEquals((-2183), student0.getAttemptedCredits());
      assertEquals((-2183), student0.getCompletedTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals((-2183), student0.getOptionalHours());
      assertEquals((-2183), student0.getSuspendedTerms());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getSecondarySchool());
      assertEquals((-2183.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2183.0), student0.getMc(), 0.01);
      assertEquals((-2183), student0.getEnrolledCredits());
      assertEquals((-6549), student0.getCompletedCredits());
      assertEquals("", student0.getName());
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getCountry());
      assertEquals("71b?DU*~%D", student0.getStatusTerm());
      assertEquals("71b?DU*~%D", student0.getEmail());
      assertEquals((-2183), student0.getInstitutionalEnrollments());
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals((-2183), student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals((-2183), student0.getOptionalCredits());
      assertEquals("", student0.getGender());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals("61+=bs", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getNationalId());
      assertEquals((-2183), student0.getComplementaryHours());
      assertEquals((-2183), student0.getMobilityTerms());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
      assertEquals((-2183), student0.getComplementaryCredits());
      assertEquals((-2183), student0.getMandatoryHours());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals((-2183.0), student0.getGpa(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("", student0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", studentStatus0, "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", (Curriculum) null, 14, 14, 14, 1592, 1592, 14, 14, 14, 5379.97808, (-1866.5970733057043), 1592, (-1761), 14, 14, 1592, 14);
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getNationalId());
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getGender());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getName());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("oe_", student0.getEmail());
      assertEquals(14, student0.getOptionalHours());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals(14, student0.getMandatoryHours());
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals((-1866.5970733057043), student0.getIea(), 0.01);
      assertEquals("oe_", student0.getDisabilities());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals("oe_", student0.getBirthDate());
      assertEquals("oe_", student0.getStatusStr());
      assertEquals("oe_", student0.getNationality());
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals(14, student0.getMandatoryCredits());
      assertNotNull(student0);
      
      student0.setCountry("oe_");
      assertEquals(14.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("oe_", student0.getNationalId());
      assertEquals("oe_", student0.getAdmissionStr());
      assertEquals("oe_", student0.getSecondarySchoolGraduationYear());
      assertEquals("oe_", student0.getAffirmativePolicy());
      assertEquals("oe_", student0.getGender());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(1592, student0.getOptionalCredits());
      assertEquals("oe_", student0.getPlaceOfBirth());
      assertEquals(14, student0.getMobilityTerms());
      assertEquals("oe_", student0.getCourseCode());
      assertEquals("oe_", student0.getCountry());
      assertEquals("oe_", student0.getRace());
      assertEquals("oe_", student0.getName());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("oe_", student0.getEmail());
      assertEquals(14, student0.getOptionalHours());
      assertEquals(5379.97808, student0.getMc(), 0.01);
      assertEquals("oe_", student0.getCurriculumCode());
      assertEquals("oe_", student0.getAdmissionTerm());
      assertEquals(14, student0.getMandatoryHours());
      assertEquals("oe_", student0.getSecondarySchool());
      assertEquals(1592, student0.getCompletedTerms());
      assertEquals("oe_", student0.getStatusTerm());
      assertEquals(14.0, student0.getGpa(), 0.01);
      assertEquals((-1761), student0.getSuspendedTerms());
      assertEquals(14, student0.getInstitutionalEnrollments());
      assertEquals(1620, student0.getCompletedCredits());
      assertEquals((-1866.5970733057043), student0.getIea(), 0.01);
      assertEquals("oe_", student0.getDisabilities());
      assertEquals(14, student0.getAttemptedCredits());
      assertEquals("oe_", student0.getMaritalStatus());
      assertEquals(1592, student0.getComplementaryHours());
      assertEquals(1592, student0.getEnrolledCredits());
      assertEquals("oe_", student0.getBirthDate());
      assertEquals("oe_", student0.getStatusStr());
      assertEquals("oe_", student0.getNationality());
      assertEquals(14, student0.getComplementaryCredits());
      assertEquals(14, student0.getMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      assertNull(student0.getGender());
      assertNull(student0.getStatusStr());
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertNull(student0.getNationalId());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
      assertNull(student0.getNationality());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNull(student0.getBirthDate());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals((-1844), student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNull(student0.getMaritalStatus());
      assertEquals((-4.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-1844), student0.getSuspendedTerms());
      assertEquals(", status=", student0.getRace());
      assertEquals((-3786), student0.getComplementaryHours());
      assertEquals((-4), student0.getEnrolledCredits());
      assertEquals(": ", student0.getCourseCode());
      assertEquals((-3786), student0.getMandatoryHours());
      assertEquals(0, student0.getMandatoryCredits());
      assertNull(student0.getSecondarySchool());
      assertNull(student0.getEmail());
      assertEquals((-1844), student0.getMobilityTerms());
      assertEquals(", status=", student0.getStatusTerm());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-1844), student0.getCompletedCredits());
      assertNull(student0.getName());
      assertEquals(0, student0.getOptionalCredits());
      assertNull(student0.getCountry());
      assertNull(student0.getAdmissionStr());
      assertNotNull(student0);
      
      student0.setGender((String) null);
      assertNull(student0.getGender());
      assertNull(student0.getStatusStr());
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertNull(student0.getNationalId());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
      assertNull(student0.getNationality());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNull(student0.getBirthDate());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals((-1844), student0.getAttemptedCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertNull(student0.getMaritalStatus());
      assertEquals((-4.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-1844), student0.getSuspendedTerms());
      assertEquals(", status=", student0.getRace());
      assertEquals((-3786), student0.getComplementaryHours());
      assertEquals((-4), student0.getEnrolledCredits());
      assertEquals(": ", student0.getCourseCode());
      assertEquals((-3786), student0.getMandatoryHours());
      assertEquals(0, student0.getMandatoryCredits());
      assertNull(student0.getSecondarySchool());
      assertNull(student0.getEmail());
      assertEquals((-1844), student0.getMobilityTerms());
      assertEquals(", status=", student0.getStatusTerm());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-1844), student0.getCompletedCredits());
      assertNull(student0.getName());
      assertEquals(0, student0.getOptionalCredits());
      assertNull(student0.getCountry());
      assertNull(student0.getAdmissionStr());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Curriculum curriculum0 = new Curriculum("TRANSFERIDO PARA OUTRA IES", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, (-2123), 414, 0, (-460), 414, 0, (-2123), (-2123), (-460), set0, set0, set0, set0, set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals((-460), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-460), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertFalse(arrayList0.contains((-460)));
      assertFalse(set0.contains("TRANSFERIDO PARA OUTRA IES"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student("gKG4IH_^1\"2@\"h>:uk", "gKG4IH_^1\"2@\"h>:uk", "", "", "gKG4IH_^1\"2@\"h>:uk", ", disabilities='", "gKG4IH_^1\"2@\"h>:uk", "", "gKG4IH_^1\"2@\"h>:uk", "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", studentStatus0, "", "gKG4IH_^1\"2@\"h>:uk", "gKG4IH_^1\"2@\"h>:uk", ", disabilities='", ", disabilities='", ", disabilities='", "gKG4IH_^1\"2@\"h>:uk", "TRANSFERIDO PARA OUTRA IES", "TRANSFERIDO PARA OUTRA IES", curriculum0, 1298, (-2123), 0, 0, 414, (-2123), 0, 0, 3334.163199, 414, (-2123), 414, (-460), (-2123), 0, 414);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals((-460), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-460), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", disabilities='", student0.getDisabilities());
      assertEquals(414, student0.getComplementaryHours());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(1298, student0.getMandatoryHours());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-2123), student0.getMobilityTerms());
      assertEquals(", disabilities='", student0.getSecondarySchool());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionTerm());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCourseCode());
      assertEquals("", student0.getName());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusTerm());
      assertEquals(414.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getMaritalStatus());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getEmail());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCurriculumCode());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getPlaceOfBirth());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getRace());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(414.0, student0.getIea(), 0.01);
      assertEquals((-2123), student0.getCompletedTerms());
      assertEquals(414, student0.getSuspendedTerms());
      assertEquals((-460), student0.getInstitutionalEnrollments());
      assertEquals(10, student0.getStatusIndex());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getNationalId());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionStr());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getCountry());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getStatusStr());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3334.163199, student0.getMc(), 0.01);
      assertEquals((-2123), student0.getComplementaryCredits());
      assertEquals((-2123), student0.getMandatoryCredits());
      assertEquals((-4246), student0.getCompletedCredits());
      assertFalse(arrayList0.contains((-460)));
      assertFalse(set0.contains(", disabilities='"));
      assertNotNull(student0);
      
      String string0 = student0.getRace();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(601, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2123), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(414, curriculum0.getMinNumberOfTerms());
      assertEquals(414, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2123), curriculum0.getMinOptionalCreditsNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-2123), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("TRANSFERIDO PARA OUTRA IES", curriculum0.getCourseCode());
      assertEquals((-460), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1709.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-460), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(", disabilities='", student0.getDisabilities());
      assertEquals(414, student0.getComplementaryHours());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(1298, student0.getMandatoryHours());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals((-2123), student0.getMobilityTerms());
      assertEquals(", disabilities='", student0.getSecondarySchool());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionTerm());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCourseCode());
      assertEquals("", student0.getName());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusTerm());
      assertEquals(414.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getMaritalStatus());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getEmail());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getCurriculumCode());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getPlaceOfBirth());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getRace());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(414.0, student0.getIea(), 0.01);
      assertEquals((-2123), student0.getCompletedTerms());
      assertEquals(414, student0.getSuspendedTerms());
      assertEquals((-460), student0.getInstitutionalEnrollments());
      assertEquals(10, student0.getStatusIndex());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getNationalId());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getAdmissionStr());
      assertEquals("gKG4IH_^1\"2@\"h>:uk", student0.getCountry());
      assertEquals("TRANSFERIDO PARA OUTRA IES", student0.getStatusStr());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getBirthDate());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3334.163199, student0.getMc(), 0.01);
      assertEquals((-2123), student0.getComplementaryCredits());
      assertEquals((-2123), student0.getMandatoryCredits());
      assertEquals((-4246), student0.getCompletedCredits());
      assertFalse(arrayList0.contains((-460)));
      assertFalse(set0.contains(", disabilities='"));
      assertEquals("TRANSFERIDO PARA OUTRA IES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "IbcH>X1Mf<:F", (Curriculum) null, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, (-251.647), 4054, 4054, 4054, 4054, 4054, 4054, 4054);
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("", student0.getCourseCode());
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getDisabilities());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals(4054, student0.getSuspendedTerms());
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
      assertNotNull(student0);
      
      student0.setAttemptedCredits(4054);
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("", student0.getCourseCode());
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getDisabilities());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals(4054, student0.getSuspendedTerms());
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("7>dOoq]>JvA't=ykf2", "", "7>dOoq]>JvA't=ykf2", "7>dOoq]>JvA't=ykf2", "", "CANCELADO REPROVOU TODAS POR FALTAS", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", (String) null, "RT", ", complementaryHours=", (String) null, studentStatus0, "W%0k[GzP:el", "org.apache.commons.io.filefilter.DelegateFileFilter", "7>dOoq]>JvA't=ykf2", "CANCELAMENTO POR ABANDONO", ", secondarySchool='", "CANCELAMENTO P/ MUDANCA CURSO", "", "CCNvW^xQjbE$'|Nbk", "W%0k[GzP:el", (Curriculum) null, 329, 329, 329, 329, 329, 11, 329, 0.03, (-1040.8452), 0.03, 0, 0, (-1107), 0, 0, 1.0);
      assertEquals(329, student0.getMandatoryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getCountry());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals(329, student0.getAttemptedCredits());
      assertEquals((-1040.8452), student0.getMc(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals(669, student0.getCompletedCredits());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals(329, student0.getMandatoryCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals(329, student0.getOptionalHours());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertNull(student0.getStatusStr());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals((-1107), student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getNationalId());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals("", student0.getEmail());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals(329, student0.getOptionalCredits());
      assertEquals(329, student0.getComplementaryHours());
      assertNotNull(student0);
      
      String string0 = student0.getName();
      assertEquals(329, student0.getMandatoryHours());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertNull(student0.getCountry());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals(329, student0.getAttemptedCredits());
      assertEquals((-1040.8452), student0.getMc(), 0.01);
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals(669, student0.getCompletedCredits());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals(329, student0.getMandatoryCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals(329, student0.getOptionalHours());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertNull(student0.getStatusStr());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals((-1107), student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals("", student0.getNationalId());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals("", student0.getEmail());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals(329, student0.getOptionalCredits());
      assertEquals(329, student0.getComplementaryHours());
      assertEquals("7>dOoq]>JvA't=ykf2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("K", "K", (String) null, "#}H%d4", "K", (String) null, (String) null, "H4!{NQ~#cf(W", "#}H%d4", (String) null, "#}H%d4", (String) null, studentStatus0, "K", "H4!{NQ~#cf(W", "#_HI8`):*m", "The list of names must not be null", "K", "H4!{NQ~#cf(W", "H4!{NQ~#cf(W", "#_HI8`):*m", "#}H%d4", (Curriculum) null, 0, (-862048943), 0, (-1613), (-862048943), (-1613), (-862048943), (-1613), 0, (-862048943), (-2247), (-862048943), (-2247), (-2247), 0, (-2247));
      assertNull(student0.getPlaceOfBirth());
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("K", student0.getEmail());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals("K", student0.getNationalId());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals("#}H%d4", student0.getRace());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals((-1613), student0.getOptionalCredits());
      assertEquals((-2247), student0.getMobilityTerms());
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals((-1613.0), student0.getGpa(), 0.01);
      assertEquals((-2247), student0.getCompletedTerms());
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertNull(student0.getGender());
      assertEquals("K", student0.getStatusTerm());
      assertEquals((-2247.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2247), student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getName());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertNull(student0.getStatusStr());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals((-862052169), student0.getCompletedCredits());
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertNull(student0.getMaritalStatus());
      assertEquals((-862048943), student0.getSuspendedTerms());
      assertEquals((-862048943), student0.getAttemptedCredits());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals("#}H%d4", student0.getBirthDate());
      assertEquals((-1613), student0.getComplementaryCredits());
      assertNotNull(student0);
      
      student0.setCompletedTerms(0);
      assertNull(student0.getPlaceOfBirth());
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals("K", student0.getEmail());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals("K", student0.getNationalId());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals("#}H%d4", student0.getRace());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals((-1613), student0.getOptionalCredits());
      assertEquals((-2247), student0.getMobilityTerms());
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals((-1613.0), student0.getGpa(), 0.01);
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertNull(student0.getGender());
      assertEquals("K", student0.getStatusTerm());
      assertEquals((-2247.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-2247), student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getName());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getStatusStr());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals((-862052169), student0.getCompletedCredits());
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertNull(student0.getMaritalStatus());
      assertEquals((-862048943), student0.getSuspendedTerms());
      assertEquals((-862048943), student0.getAttemptedCredits());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals("#}H%d4", student0.getBirthDate());
      assertEquals((-1613), student0.getComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("(", "k+;!vUeBpWW", "", "k+;!vUeBpWW", "k+;!vUeBpWW", "(", "", "bI6C+PGqo'P-bv7JW", "bI6C+PGqo'P-bv7JW", "(", "bI6C+PGqo'P-bv7JW", "bI6C+PGqo'P-bv7JW", studentStatus0, "k+;!vUeBpWW", "k+;!vUeBpWW", "k+;!vUeBpWW", "k+;!vUeBpWW", "(", "(", "k+;!vUeBpWW", "(", "(", (Curriculum) null, (-1739), (-1739), 473, (-13), 473, 884, 884, 473, (-1739), (-67.3342870374516), 1682554634, 1682554634, (-1283), 1682554634, 0, 3579.9640306723686);
      assertEquals(3579.9640306723686, student0.getAdmissionGrade(), 0.01);
      assertEquals("k+;!vUeBpWW", student0.getSecondarySchoolGraduationYear());
      assertEquals(473.0, student0.getGpa(), 0.01);
      assertEquals("k+;!vUeBpWW", student0.getAdmissionStr());
      assertEquals("k+;!vUeBpWW", student0.getBirthDate());
      assertEquals("k+;!vUeBpWW", student0.getNationalId());
      assertEquals("(", student0.getCurriculumCode());
      assertEquals("(", student0.getCourseCode());
      assertEquals("k+;!vUeBpWW", student0.getDisabilities());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getCountry());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1682554634, student0.getCompletedTerms());
      assertEquals(1682554634, student0.getMobilityTerms());
      assertEquals(884, student0.getAttemptedCredits());
      assertEquals((-868), student0.getCompletedCredits());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getRace());
      assertEquals("k+;!vUeBpWW", student0.getEmail());
      assertEquals((-13), student0.getOptionalCredits());
      assertEquals("k+;!vUeBpWW", student0.getStatusTerm());
      assertEquals("", student0.getName());
      assertEquals(473, student0.getOptionalHours());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getStatusStr());
      assertEquals(884, student0.getComplementaryCredits());
      assertEquals((-1739), student0.getMandatoryHours());
      assertEquals((-1283), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("(", student0.getSecondarySchool());
      assertEquals("k+;!vUeBpWW", student0.getAdmissionTerm());
      assertEquals((-1739), student0.getMandatoryCredits());
      assertEquals((-1739.0), student0.getMc(), 0.01);
      assertEquals("(", student0.getPlaceOfBirth());
      assertEquals("", student0.getMaritalStatus());
      assertEquals((-67.3342870374516), student0.getIea(), 0.01);
      assertEquals(1682554634, student0.getSuspendedTerms());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("(", student0.getGender());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getNationality());
      assertEquals("(", student0.getAffirmativePolicy());
      assertEquals(473, student0.getComplementaryHours());
      assertNotNull(student0);
      
      student0.setSecondarySchoolGraduationYear("jo=[:-H\")UJ [a%$");
      assertEquals(3579.9640306723686, student0.getAdmissionGrade(), 0.01);
      assertEquals(473.0, student0.getGpa(), 0.01);
      assertEquals("k+;!vUeBpWW", student0.getAdmissionStr());
      assertEquals("k+;!vUeBpWW", student0.getBirthDate());
      assertEquals("k+;!vUeBpWW", student0.getNationalId());
      assertEquals("(", student0.getCurriculumCode());
      assertEquals("(", student0.getCourseCode());
      assertEquals("jo=[:-H\")UJ [a%$", student0.getSecondarySchoolGraduationYear());
      assertEquals("k+;!vUeBpWW", student0.getDisabilities());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getCountry());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1682554634, student0.getCompletedTerms());
      assertEquals(1682554634, student0.getMobilityTerms());
      assertEquals(884, student0.getAttemptedCredits());
      assertEquals((-868), student0.getCompletedCredits());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getRace());
      assertEquals("k+;!vUeBpWW", student0.getEmail());
      assertEquals((-13), student0.getOptionalCredits());
      assertEquals("k+;!vUeBpWW", student0.getStatusTerm());
      assertEquals("", student0.getName());
      assertEquals(473, student0.getOptionalHours());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getStatusStr());
      assertEquals(884, student0.getComplementaryCredits());
      assertEquals((-1739), student0.getMandatoryHours());
      assertEquals((-1283), student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("(", student0.getSecondarySchool());
      assertEquals("k+;!vUeBpWW", student0.getAdmissionTerm());
      assertEquals((-1739), student0.getMandatoryCredits());
      assertEquals((-1739.0), student0.getMc(), 0.01);
      assertEquals("(", student0.getPlaceOfBirth());
      assertEquals("", student0.getMaritalStatus());
      assertEquals((-67.3342870374516), student0.getIea(), 0.01);
      assertEquals(1682554634, student0.getSuspendedTerms());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("(", student0.getGender());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getNationality());
      assertEquals("(", student0.getAffirmativePolicy());
      assertEquals(473, student0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("K", "K", (String) null, "#}H%d4", "K", (String) null, (String) null, "H4!{NQ~#cf(W", "#}H%d4", (String) null, "#}H%d4", (String) null, studentStatus0, "K", "H4!{NQ~#cf(W", "#_HI8`):*m", "The list of names must not be null", "K", "H4!{NQ~#cf(W", "H4!{NQ~#cf(W", "#_HI8`):*m", "#}H%d4", (Curriculum) null, 0, (-862048943), 0, (-1613), (-862048943), (-1613), (-862048943), (-1613), 0, (-862048943), (-2247), (-862048943), (-2247), (-2247), 0, (-2247));
      assertNull(student0.getStatusStr());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals((-1613), student0.getOptionalCredits());
      assertEquals((-2247), student0.getMobilityTerms());
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals((-1613.0), student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getPlaceOfBirth());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals("#}H%d4", student0.getRace());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getName());
      assertEquals("K", student0.getNationalId());
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertEquals("K", student0.getStatusTerm());
      assertEquals("K", student0.getEmail());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals((-2247), student0.getInstitutionalEnrollments());
      assertNull(student0.getGender());
      assertEquals((-2247.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-862052169), student0.getCompletedCredits());
      assertEquals("#}H%d4", student0.getBirthDate());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertEquals((-862048943), student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-2247), student0.getCompletedTerms());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals((-1613), student0.getComplementaryCredits());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertEquals((-862048943), student0.getSuspendedTerms());
      assertNull(student0.getMaritalStatus());
      assertNotNull(student0);
      
      String string0 = student0.getStatusTerm();
      assertNull(student0.getStatusStr());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals((-1613), student0.getOptionalCredits());
      assertEquals((-2247), student0.getMobilityTerms());
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals((-1613.0), student0.getGpa(), 0.01);
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getPlaceOfBirth());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals("#}H%d4", student0.getRace());
      assertEquals(0, student0.getOptionalHours());
      assertNull(student0.getName());
      assertEquals("K", student0.getNationalId());
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertEquals("K", student0.getStatusTerm());
      assertEquals("K", student0.getEmail());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals((-2247), student0.getInstitutionalEnrollments());
      assertNull(student0.getGender());
      assertEquals((-2247.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-862052169), student0.getCompletedCredits());
      assertEquals("#}H%d4", student0.getBirthDate());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertEquals((-862048943), student0.getAttemptedCredits());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals((-2247), student0.getCompletedTerms());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals((-1613), student0.getComplementaryCredits());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertEquals((-862048943), student0.getSuspendedTerms());
      assertNull(student0.getMaritalStatus());
      assertEquals("K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      assertNull(student0.getNationality());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(": ", student0.getCourseCode());
      assertEquals((-3786), student0.getMandatoryHours());
      assertNull(student0.getSecondarySchool());
      assertNull(student0.getNationalId());
      assertNull(student0.getGender());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals(", status=", student0.getStatusTerm());
      assertNull(student0.getCountry());
      assertNull(student0.getAdmissionStr());
      assertNull(student0.getName());
      assertEquals((-1844), student0.getMobilityTerms());
      assertEquals((-1844), student0.getCompletedCredits());
      assertEquals((-1844), student0.getAttemptedCredits());
      assertEquals((-3786), student0.getComplementaryHours());
      assertNull(student0.getBirthDate());
      assertNull(student0.getEmail());
      assertEquals((-4), student0.getEnrolledCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertEquals(", status=", student0.getRace());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-4.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getMaritalStatus());
      assertEquals((-1844), student0.getSuspendedTerms());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNull(student0.getStatusStr());
      assertNotNull(student0);
      
      student0.setNationality((String) null);
      assertNull(student0.getNationality());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
      assertEquals((-1844), student0.getComplementaryCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals((-3786.0), student0.getMc(), 0.01);
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(": ", student0.getCourseCode());
      assertEquals((-3786), student0.getMandatoryHours());
      assertNull(student0.getSecondarySchool());
      assertNull(student0.getNationalId());
      assertNull(student0.getGender());
      assertNull(student0.getSecondarySchoolGraduationYear());
      assertEquals(407.070019434, student0.getIea(), 0.01);
      assertEquals(", status=", student0.getStatusTerm());
      assertNull(student0.getCountry());
      assertNull(student0.getAdmissionStr());
      assertNull(student0.getName());
      assertEquals((-1844), student0.getMobilityTerms());
      assertEquals((-1844), student0.getCompletedCredits());
      assertEquals((-1844), student0.getAttemptedCredits());
      assertEquals((-3786), student0.getComplementaryHours());
      assertNull(student0.getBirthDate());
      assertNull(student0.getEmail());
      assertEquals((-4), student0.getEnrolledCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertEquals(", status=", student0.getRace());
      assertEquals(0, student0.getOptionalHours());
      assertEquals((-4.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(0, student0.getCompletedTerms());
      assertNull(student0.getMaritalStatus());
      assertEquals((-1844), student0.getSuspendedTerms());
      assertNull(student0.getAdmissionTerm());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertNull(student0.getStatusStr());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "", "", "k", "", "", "", "", "k", "pV#Ggn~z9&.>2", "", "k", studentStatus0, "", "pV#Ggn~z9&.>2", "pV#Ggn~z9&.>2", "", "k", "", "pV#Ggn~z9&.>2", "pV#Ggn~z9&.>2", "k", (Curriculum) null, 715, 715, 715, 715, 3, 715, 715, 715, 715, 715, 715, 3056, 3, 3, 3, 3);
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("k", student0.getAffirmativePolicy());
      assertEquals("k", student0.getBirthDate());
      assertEquals("", student0.getRace());
      assertEquals(715, student0.getOptionalCredits());
      assertEquals(715, student0.getMandatoryHours());
      assertEquals("k", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals("", student0.getEmail());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals("k", student0.getCountry());
      assertEquals("pV#Ggn~z9&.>2", student0.getAdmissionTerm());
      assertEquals(2145, student0.getCompletedCredits());
      assertEquals(715.0, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(715, student0.getComplementaryCredits());
      assertEquals(715, student0.getMandatoryCredits());
      assertEquals(715.0, student0.getMc(), 0.01);
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(3056, student0.getSuspendedTerms());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("pV#Ggn~z9&.>2", student0.getCourseCode());
      assertEquals("", student0.getStatusTerm());
      assertEquals(715, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getNationalId());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("pV#Ggn~z9&.>2", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(715, student0.getOptionalHours());
      assertEquals(715.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals("pV#Ggn~z9&.>2", student0.getAdmissionStr());
      assertEquals(715, student0.getCompletedTerms());
      assertNotNull(student0);
      
      student0.setMaritalStatus("k");
      assertEquals("", student0.getDisabilities());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("k", student0.getAffirmativePolicy());
      assertEquals("k", student0.getBirthDate());
      assertEquals("", student0.getRace());
      assertEquals(715, student0.getOptionalCredits());
      assertEquals(715, student0.getMandatoryHours());
      assertEquals("k", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals("", student0.getEmail());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals("k", student0.getCountry());
      assertEquals("pV#Ggn~z9&.>2", student0.getAdmissionTerm());
      assertEquals(2145, student0.getCompletedCredits());
      assertEquals(715.0, student0.getIea(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals("", student0.getGender());
      assertEquals(715, student0.getComplementaryCredits());
      assertEquals(715, student0.getMandatoryCredits());
      assertEquals(715.0, student0.getMc(), 0.01);
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(3056, student0.getSuspendedTerms());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("pV#Ggn~z9&.>2", student0.getCourseCode());
      assertEquals("", student0.getStatusTerm());
      assertEquals(715, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getNationalId());
      assertEquals("k", student0.getMaritalStatus());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("pV#Ggn~z9&.>2", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(715, student0.getOptionalHours());
      assertEquals(715.0, student0.getGpa(), 0.01);
      assertEquals("pV#Ggn~z9&.>2", student0.getAdmissionStr());
      assertEquals(715, student0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("K", "K", (String) null, "#}H%d4", "K", (String) null, (String) null, "H4!{NQ~#cf(W", "#}H%d4", (String) null, "#}H%d4", (String) null, studentStatus0, "K", "H4!{NQ~#cf(W", "#_HI8`):*m", "The list of names must not be null", "K", "H4!{NQ~#cf(W", "H4!{NQ~#cf(W", "#_HI8`):*m", "#}H%d4", (Curriculum) null, 0, (-862048943), 0, (-1613), (-862048943), (-1613), (-862048943), (-1613), 0, (-862048943), (-2247), (-862048943), (-2247), (-2247), 0, (-2247));
      assertEquals((-862052169), student0.getCompletedCredits());
      assertEquals((-2247.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-862048943), student0.getAttemptedCredits());
      assertEquals("#}H%d4", student0.getBirthDate());
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertEquals((-862048943), student0.getSuspendedTerms());
      assertEquals("K", student0.getStatusTerm());
      assertNull(student0.getMaritalStatus());
      assertEquals("#}H%d4", student0.getRace());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getName());
      assertNull(student0.getPlaceOfBirth());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1613), student0.getOptionalCredits());
      assertEquals((-2247), student0.getCompletedTerms());
      assertNull(student0.getStatusStr());
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals((-1613.0), student0.getGpa(), 0.01);
      assertEquals((-2247), student0.getInstitutionalEnrollments());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals((-2247), student0.getMobilityTerms());
      assertNull(student0.getGender());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals("K", student0.getEmail());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals("K", student0.getNationalId());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals((-1613), student0.getComplementaryCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertNotNull(student0);
      
      int int0 = student0.getMandatoryHours();
      assertEquals((-862052169), student0.getCompletedCredits());
      assertEquals((-2247.0), student0.getAdmissionGrade(), 0.01);
      assertEquals((-862048943), student0.getAttemptedCredits());
      assertEquals("#}H%d4", student0.getBirthDate());
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertEquals((-862048943), student0.getSuspendedTerms());
      assertEquals("K", student0.getStatusTerm());
      assertNull(student0.getMaritalStatus());
      assertEquals("#}H%d4", student0.getRace());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertNull(student0.getName());
      assertNull(student0.getPlaceOfBirth());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals((-1613), student0.getOptionalCredits());
      assertEquals((-2247), student0.getCompletedTerms());
      assertNull(student0.getStatusStr());
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals((-1613.0), student0.getGpa(), 0.01);
      assertEquals((-2247), student0.getInstitutionalEnrollments());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals((-2247), student0.getMobilityTerms());
      assertNull(student0.getGender());
      assertEquals((-862048943), student0.getComplementaryHours());
      assertEquals((-862048943), student0.getMandatoryCredits());
      assertEquals("K", student0.getEmail());
      assertEquals(0, student0.getOptionalHours());
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals("K", student0.getNationalId());
      assertEquals((-8.62048943E8), student0.getIea(), 0.01);
      assertEquals((-1613), student0.getComplementaryCredits());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "__file", "__file", "k", "__file", "__file", "__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", "__file", (String) null, studentStatus0, (String) null, "", "", "__file", (String) null, "T/];x/Gzx(r@(", "__file", "", "k", (Curriculum) null, 702, 702, 702, 702, 3, 702, 702, 3, 3, 3, 702, 3, 3, 3, 3, 3);
      assertEquals(2106, student0.getCompletedCredits());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals(702, student0.getMandatoryCredits());
      assertEquals(3.0, student0.getIea(), 0.01);
      assertEquals("k", student0.getBirthDate());
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals(702, student0.getOptionalCredits());
      assertEquals(702, student0.getMandatoryHours());
      assertEquals("__file", student0.getRace());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals("__file", student0.getGender());
      assertNull(student0.getStatusTerm());
      assertNull(student0.getAffirmativePolicy());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertEquals(702, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("__file", student0.getName());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertNull(student0.getStatusStr());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(702, student0.getCompletedTerms());
      assertEquals("__file", student0.getNationalId());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals("", student0.getCourseCode());
      assertEquals("__file", student0.getEmail());
      assertEquals(", ", student0.getCountry());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(702, student0.getAttemptedCredits());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals(702, student0.getOptionalHours());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("__file", student0.getDisabilities());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertNotNull(student0);
      
      int int0 = student0.getMobilityTerms();
      assertEquals(2106, student0.getCompletedCredits());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals(702, student0.getMandatoryCredits());
      assertEquals(3.0, student0.getIea(), 0.01);
      assertEquals("k", student0.getBirthDate());
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals(702, student0.getOptionalCredits());
      assertEquals(702, student0.getMandatoryHours());
      assertEquals("__file", student0.getRace());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals("__file", student0.getGender());
      assertNull(student0.getStatusTerm());
      assertNull(student0.getAffirmativePolicy());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertEquals(702, student0.getComplementaryCredits());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("__file", student0.getName());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertNull(student0.getStatusStr());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(702, student0.getCompletedTerms());
      assertEquals("__file", student0.getNationalId());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals("", student0.getCourseCode());
      assertEquals("__file", student0.getEmail());
      assertEquals(", ", student0.getCountry());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(702, student0.getAttemptedCredits());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals(702, student0.getOptionalHours());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("__file", student0.getDisabilities());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("RU94%DgMEv(%yj_KRZ6", ", birthDate='", "RU94%DgMEv(%yj_KRZ6", ", birthDate='", ", birthDate='", ", birthDate='", ", birthDate='", ", birthDate='", "5_N_Ng\"", "5_N_Ng\"", "", ", birthDate='", studentStatus0, ", birthDate='", "RU94%DgMEv(%yj_KRZ6", "l", ", birthDate='", "l", (String) null, "", "s.F_", "", (Curriculum) null, 0, 0, 0, 0, (-2142), 0, 0, 0, 0, 0, 0, (-2238), 125, (-2238), 125, 0.0);
      assertEquals("5_N_Ng\"", student0.getCountry());
      assertEquals(125, student0.getInstitutionalEnrollments());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", birthDate='", student0.getBirthDate());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(", birthDate='", student0.getNationalId());
      assertEquals(", birthDate='", student0.getEmail());
      assertEquals((-2238), student0.getSuspendedTerms());
      assertEquals("s.F_", student0.getCourseCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", birthDate='", student0.getGender());
      assertEquals((-2142), student0.getComplementaryHours());
      assertNull(student0.getSecondarySchool());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("l", student0.getAdmissionTerm());
      assertEquals(125, student0.getEnrolledCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("5_N_Ng\"", student0.getPlaceOfBirth());
      assertEquals(", birthDate='", student0.getStatusTerm());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", birthDate='", student0.getNationality());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-2238), student0.getMobilityTerms());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionStr());
      assertEquals(", birthDate='", student0.getDisabilities());
      assertEquals(", birthDate='", student0.getMaritalStatus());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getName());
      assertEquals("l", student0.getAffirmativePolicy());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", birthDate='", student0.getStatusStr());
      assertNotNull(student0);
      
      int int0 = student0.getComplementaryHours();
      assertEquals("5_N_Ng\"", student0.getCountry());
      assertEquals(125, student0.getInstitutionalEnrollments());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(", birthDate='", student0.getBirthDate());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(", birthDate='", student0.getNationalId());
      assertEquals(", birthDate='", student0.getEmail());
      assertEquals((-2238), student0.getSuspendedTerms());
      assertEquals("s.F_", student0.getCourseCode());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(", birthDate='", student0.getGender());
      assertEquals((-2142), student0.getComplementaryHours());
      assertNull(student0.getSecondarySchool());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals("l", student0.getAdmissionTerm());
      assertEquals(125, student0.getEnrolledCredits());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals("5_N_Ng\"", student0.getPlaceOfBirth());
      assertEquals(", birthDate='", student0.getStatusTerm());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", birthDate='", student0.getNationality());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals((-2238), student0.getMobilityTerms());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionStr());
      assertEquals(", birthDate='", student0.getDisabilities());
      assertEquals(", birthDate='", student0.getMaritalStatus());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getName());
      assertEquals("l", student0.getAffirmativePolicy());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(", birthDate='", student0.getStatusStr());
      assertEquals((-2142), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "IbcH>X1Mf<:F", (Curriculum) null, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, (-251.647), 4054, 4054, 4054, 4054, 4054, 4054, 4054);
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("", student0.getDisabilities());
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals(4054, student0.getSuspendedTerms());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getRace());
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals("", student0.getStatusTerm());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("", student0.getCourseCode());
      assertNotNull(student0);
      
      student0.setRace("IbcH>X1Mf<:F");
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("", student0.getDisabilities());
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals(4054, student0.getSuspendedTerms());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals(11, student0.getStatusIndex());
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getRace());
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals("", student0.getStatusTerm());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("", student0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Curriculum curriculum0 = new Curriculum("C", "C", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 4, 4, 4, 92, 92, 4, 4, 92, 92, (-2045), priorityQueue0, priorityQueue0, priorityQueue0, priorityQueue0, priorityQueue0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(4, curriculum0.getMinNumberOfTerms());
      assertEquals(4, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("C", curriculum0.getCurriculumCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2045), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(92, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(92, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(104.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(92, curriculum0.getMinActivitiesNeeded());
      assertEquals("C", curriculum0.getCourseCode());
      assertFalse(treeSet0.contains(92));
      assertFalse(arrayList0.contains(92));
      assertFalse(priorityQueue0.contains("C"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student((String) null, "C", "C", "C", "C", "C", "C", (String) null, "H!n", "C", "C", "C", studentStatus0, "H!n", "C", "C", "C", "C", (String) null, "C", "C", (String) null, curriculum0, 4, 0, 0, 4, 4, 1313, 4, 92, 4, 4, 4, 1313, 92, 4, 92, 92);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(4, curriculum0.getMinNumberOfTerms());
      assertEquals(4, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("C", curriculum0.getCurriculumCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2045), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(92, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(92, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(104.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(92, curriculum0.getMinActivitiesNeeded());
      assertEquals("C", curriculum0.getCourseCode());
      assertEquals(4, student0.getMandatoryHours());
      assertEquals("C", student0.getBirthDate());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(92, student0.getEnrolledCredits());
      assertEquals(92.0, student0.getGpa(), 0.01);
      assertEquals("C", student0.getEmail());
      assertEquals(1313, student0.getSuspendedTerms());
      assertEquals(4, student0.getAttemptedCredits());
      assertEquals(4, student0.getCompletedTerms());
      assertEquals("C", student0.getAdmissionStr());
      assertNull(student0.getNationality());
      assertEquals("C", student0.getNationalId());
      assertEquals("C", student0.getGender());
      assertEquals("C", student0.getName());
      assertEquals("C", student0.getSecondarySchoolGraduationYear());
      assertEquals("C", student0.getPlaceOfBirth());
      assertEquals("C", student0.getAffirmativePolicy());
      assertEquals("C", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("C", student0.getCourseCode());
      assertNull(student0.getSecondarySchool());
      assertEquals(4, student0.getComplementaryHours());
      assertEquals(4.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("H!n", student0.getCountry());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(92, student0.getInstitutionalEnrollments());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals(1317, student0.getCompletedCredits());
      assertEquals(1313, student0.getComplementaryCredits());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(4, student0.getMobilityTerms());
      assertEquals("C", student0.getMaritalStatus());
      assertNull(student0.getCurriculumCode());
      assertEquals("C", student0.getDisabilities());
      assertEquals("C", student0.getStatusStr());
      assertEquals(92.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("C", student0.getAdmissionTerm());
      assertEquals("H!n", student0.getStatusTerm());
      assertFalse(treeSet0.contains(92));
      assertFalse(arrayList0.contains(92));
      assertFalse(priorityQueue0.contains("C"));
      assertNotNull(student0);
      
      String string0 = student0.getGender();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(4, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(4, curriculum0.getMinNumberOfTerms());
      assertEquals(4, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("C", curriculum0.getCurriculumCode());
      assertEquals(4, curriculum0.getMaxNumberOfTerms());
      assertEquals(4, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-2045), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(92, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(92, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(104.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(92, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(92, curriculum0.getMinActivitiesNeeded());
      assertEquals("C", curriculum0.getCourseCode());
      assertEquals(4, student0.getMandatoryHours());
      assertEquals("C", student0.getBirthDate());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(92, student0.getEnrolledCredits());
      assertEquals(92.0, student0.getGpa(), 0.01);
      assertEquals("C", student0.getEmail());
      assertEquals(1313, student0.getSuspendedTerms());
      assertEquals(4, student0.getAttemptedCredits());
      assertEquals(4, student0.getCompletedTerms());
      assertEquals("C", student0.getAdmissionStr());
      assertNull(student0.getNationality());
      assertEquals("C", student0.getNationalId());
      assertEquals("C", student0.getGender());
      assertEquals("C", student0.getName());
      assertEquals("C", student0.getSecondarySchoolGraduationYear());
      assertEquals("C", student0.getPlaceOfBirth());
      assertEquals("C", student0.getAffirmativePolicy());
      assertEquals("C", student0.getRace());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("C", student0.getCourseCode());
      assertNull(student0.getSecondarySchool());
      assertEquals(4, student0.getComplementaryHours());
      assertEquals(4.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals("H!n", student0.getCountry());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(92, student0.getInstitutionalEnrollments());
      assertEquals(4, student0.getOptionalCredits());
      assertEquals(1317, student0.getCompletedCredits());
      assertEquals(1313, student0.getComplementaryCredits());
      assertEquals(4.0, student0.getMc(), 0.01);
      assertEquals(4, student0.getMobilityTerms());
      assertEquals("C", student0.getMaritalStatus());
      assertNull(student0.getCurriculumCode());
      assertEquals("C", student0.getDisabilities());
      assertEquals("C", student0.getStatusStr());
      assertEquals(92.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("C", student0.getAdmissionTerm());
      assertEquals("H!n", student0.getStatusTerm());
      assertFalse(treeSet0.contains(92));
      assertFalse(arrayList0.contains(92));
      assertFalse(priorityQueue0.contains("C"));
      assertEquals("C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "__file", "__file", "k", "__file", "__file", "__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", "__file", (String) null, studentStatus0, (String) null, "", "", "__file", (String) null, "T/];x/Gzx(r@(", "__file", "", "k", (Curriculum) null, 702, 702, 702, 702, 3, 702, 702, 3, 3, 3, 702, 3, 3, 3, 3, 3);
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals(702, student0.getComplementaryCredits());
      assertEquals(3.0, student0.getIea(), 0.01);
      assertEquals(2106, student0.getCompletedCredits());
      assertEquals(702, student0.getOptionalCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("k", student0.getBirthDate());
      assertEquals("__file", student0.getDisabilities());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertEquals(702, student0.getOptionalHours());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertNull(student0.getStatusStr());
      assertEquals("__file", student0.getNationalId());
      assertEquals(702, student0.getCompletedTerms());
      assertEquals("", student0.getCourseCode());
      assertEquals("__file", student0.getEmail());
      assertEquals("__file", student0.getGender());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(", ", student0.getCountry());
      assertEquals(702, student0.getAttemptedCredits());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals("__file", student0.getRace());
      assertEquals("k", student0.getCurriculumCode());
      assertNull(student0.getStatusTerm());
      assertEquals(702, student0.getMandatoryHours());
      assertEquals(702, student0.getMandatoryCredits());
      assertEquals("__file", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertNull(student0.getAffirmativePolicy());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertNotNull(student0);
      
      int int0 = student0.getEnrolledCredits();
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals(702, student0.getComplementaryCredits());
      assertEquals(3.0, student0.getIea(), 0.01);
      assertEquals(2106, student0.getCompletedCredits());
      assertEquals(702, student0.getOptionalCredits());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("k", student0.getBirthDate());
      assertEquals("__file", student0.getDisabilities());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertEquals(702, student0.getOptionalHours());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("", student0.getAdmissionTerm());
      assertNull(student0.getStatusStr());
      assertEquals("__file", student0.getNationalId());
      assertEquals(702, student0.getCompletedTerms());
      assertEquals("", student0.getCourseCode());
      assertEquals("__file", student0.getEmail());
      assertEquals("__file", student0.getGender());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(", ", student0.getCountry());
      assertEquals(702, student0.getAttemptedCredits());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals("__file", student0.getRace());
      assertEquals("k", student0.getCurriculumCode());
      assertNull(student0.getStatusTerm());
      assertEquals(702, student0.getMandatoryHours());
      assertEquals(702, student0.getMandatoryCredits());
      assertEquals("__file", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertNull(student0.getAffirmativePolicy());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", "", ", placeOfBirth='", "", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", studentStatus0, ", placeOfBirth='", ", placeOfBirth='", "", "'", "", "ri7P|?dA", ", mandatoryCredits=", "", ", placeOfBirth='", (Curriculum) null, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, (-2090), (-2090), (-2090), (-2090), (-2090), 1060.1224063210616);
      assertEquals((-2090), student0.getMobilityTerms());
      assertEquals(1682554634, student0.getAttemptedCredits());
      assertEquals((-2090), student0.getEnrolledCredits());
      assertEquals(", placeOfBirth='", student0.getCountry());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals("", student0.getCourseCode());
      assertEquals(1.682554634E9, student0.getIea(), 0.01);
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(1.682554634E9, student0.getMc(), 0.01);
      assertEquals(", placeOfBirth='", student0.getStatusTerm());
      assertEquals((-2090), student0.getInstitutionalEnrollments());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1682554634, student0.getComplementaryCredits());
      assertEquals((-2090), student0.getSuspendedTerms());
      assertEquals(", placeOfBirth='", student0.getCurriculumCode());
      assertEquals((-2090), student0.getCompletedTerms());
      assertEquals(", placeOfBirth='", student0.getGender());
      assertEquals("", student0.getName());
      assertEquals(1682554634, student0.getOptionalCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("'", student0.getDisabilities());
      assertEquals(752696606, student0.getCompletedCredits());
      assertEquals(", placeOfBirth='", student0.getAdmissionStr());
      assertEquals(1682554634, student0.getMandatoryCredits());
      assertEquals("", student0.getEmail());
      assertEquals(", mandatoryCredits=", student0.getSecondarySchoolGraduationYear());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals(1682554634, student0.getComplementaryHours());
      assertEquals(", placeOfBirth='", student0.getStatusStr());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(1682554634, student0.getOptionalHours());
      assertEquals(1682554634, student0.getMandatoryHours());
      assertEquals(1.682554634E9, student0.getGpa(), 0.01);
      assertEquals(", placeOfBirth='", student0.getNationality());
      assertEquals("ri7P|?dA", student0.getSecondarySchool());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(1060.1224063210616, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertNotNull(student0);
      
      String string0 = student0.getDisabilities();
      assertEquals((-2090), student0.getMobilityTerms());
      assertEquals(1682554634, student0.getAttemptedCredits());
      assertEquals((-2090), student0.getEnrolledCredits());
      assertEquals(", placeOfBirth='", student0.getCountry());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals("", student0.getCourseCode());
      assertEquals(1.682554634E9, student0.getIea(), 0.01);
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals(1.682554634E9, student0.getMc(), 0.01);
      assertEquals(", placeOfBirth='", student0.getStatusTerm());
      assertEquals((-2090), student0.getInstitutionalEnrollments());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(1682554634, student0.getComplementaryCredits());
      assertEquals((-2090), student0.getSuspendedTerms());
      assertEquals(", placeOfBirth='", student0.getCurriculumCode());
      assertEquals((-2090), student0.getCompletedTerms());
      assertEquals(", placeOfBirth='", student0.getGender());
      assertEquals("", student0.getName());
      assertEquals(1682554634, student0.getOptionalCredits());
      assertEquals("", student0.getBirthDate());
      assertEquals("'", student0.getDisabilities());
      assertEquals(752696606, student0.getCompletedCredits());
      assertEquals(", placeOfBirth='", student0.getAdmissionStr());
      assertEquals(1682554634, student0.getMandatoryCredits());
      assertEquals("", student0.getEmail());
      assertEquals(", mandatoryCredits=", student0.getSecondarySchoolGraduationYear());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals(1682554634, student0.getComplementaryHours());
      assertEquals(", placeOfBirth='", student0.getStatusStr());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(1682554634, student0.getOptionalHours());
      assertEquals(1682554634, student0.getMandatoryHours());
      assertEquals(1.682554634E9, student0.getGpa(), 0.01);
      assertEquals(", placeOfBirth='", student0.getNationality());
      assertEquals("ri7P|?dA", student0.getSecondarySchool());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(1060.1224063210616, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getMaritalStatus());
      assertEquals("'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ", disabilities='", ", disabilities='", ", disabilities='", ", status=", ", status=", ", disabilities='", "", studentStatus0, ", disabilities='", ", disabilities='", "", "0LzRj5H", ", disabilities='", "", "", "", "", (Curriculum) null, 0, 0, 0, 0, 0, 0, 0, 203.24446603172936, 0, 474.793453, 0, 0, 0, 677, 0, 0);
      assertEquals("", student0.getBirthDate());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(", status=", student0.getEmail());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", disabilities='", student0.getStatusTerm());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(", status=", student0.getCountry());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(", disabilities='", student0.getRace());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertNotNull(student0);
      
      student0.setSecondarySchool(", status=");
      assertEquals("", student0.getBirthDate());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(", status=", student0.getEmail());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals(", disabilities='", student0.getStatusTerm());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals(", status=", student0.getCountry());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(0, student0.getOptionalHours());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(0, student0.getComplementaryCredits());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(", status=", student0.getSecondarySchool());
      assertEquals(", disabilities='", student0.getRace());
      assertEquals("", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(474.793453, student0.getIea(), 0.01);
      assertEquals(", disabilities='", student0.getGender());
      assertEquals(677, student0.getMobilityTerms());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getAdmissionStr());
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(0.0, student0.getMc(), 0.01);
      assertEquals(0, student0.getOptionalCredits());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMandatoryCredits());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(203.24446603172936, student0.getGpa(), 0.01);
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "IbcH>X1Mf<:F", (Curriculum) null, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, (-251.647), 4054, 4054, 4054, 4054, 4054, 4054, 4054);
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals(4054, student0.getSuspendedTerms());
      assertNotNull(student0);
      
      student0.setOptionalCredits(4054);
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getRace());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("", student0.getStatusTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getCourseCode());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getStatusStr());
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals(4054, student0.getSuspendedTerms());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "__file", "__file", "k", "__file", "__file", "__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", "__file", (String) null, studentStatus0, (String) null, "", "", "__file", (String) null, "T/];x/Gzx(r@(", "__file", "", "k", (Curriculum) null, 702, 702, 702, 702, 3, 702, 702, 3, 3, 3, 702, 3, 3, 3, 3, 3);
      assertEquals(702, student0.getMandatoryHours());
      assertNull(student0.getStatusTerm());
      assertEquals("__file", student0.getGender());
      assertEquals(702, student0.getMandatoryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(702, student0.getOptionalCredits());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertEquals("__file", student0.getEmail());
      assertEquals(702, student0.getComplementaryCredits());
      assertEquals("__file", student0.getNationalId());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertNull(student0.getAffirmativePolicy());
      assertEquals("__file", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("__file", student0.getRace());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertEquals(702, student0.getOptionalHours());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("__file", student0.getDisabilities());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("k", student0.getBirthDate());
      assertEquals(3.0, student0.getIea(), 0.01);
      assertEquals(", ", student0.getCountry());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(702, student0.getAttemptedCredits());
      assertEquals(2106, student0.getCompletedCredits());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(702, student0.getCompletedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertNull(student0.getStatusStr());
      assertNotNull(student0);
      
      String string0 = student0.getCountry();
      assertEquals(702, student0.getMandatoryHours());
      assertNull(student0.getStatusTerm());
      assertEquals("__file", student0.getGender());
      assertEquals(702, student0.getMandatoryCredits());
      assertEquals("", student0.getCourseCode());
      assertEquals(3, student0.getSuspendedTerms());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(702, student0.getOptionalCredits());
      assertEquals(3, student0.getEnrolledCredits());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertEquals("__file", student0.getEmail());
      assertEquals(702, student0.getComplementaryCredits());
      assertEquals("__file", student0.getNationalId());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertNull(student0.getAffirmativePolicy());
      assertEquals("__file", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("__file", student0.getRace());
      assertEquals(3.0, student0.getMc(), 0.01);
      assertEquals(702, student0.getOptionalHours());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("__file", student0.getDisabilities());
      assertEquals(3, student0.getInstitutionalEnrollments());
      assertEquals(StudentStatus.ALUMNUS, student0.getStatus());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals(3.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("k", student0.getBirthDate());
      assertEquals(3.0, student0.getIea(), 0.01);
      assertEquals(", ", student0.getCountry());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(3, student0.getComplementaryHours());
      assertEquals(702, student0.getAttemptedCredits());
      assertEquals(2106, student0.getCompletedCredits());
      assertEquals(3, student0.getMobilityTerms());
      assertEquals(702, student0.getCompletedTerms());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(3.0, student0.getGpa(), 0.01);
      assertNull(student0.getStatusStr());
      assertEquals(", ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Curriculum curriculum0 = new Curriculum((String) null, ".m7@\";%Lx", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 125, 125, 0, 159, 125, 159, 159, 159, 0, 125, arrayList1, arrayList1, arrayList1, arrayList1, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(159, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(159, curriculum0.getMinNumberOfTerms());
      assertEquals(409.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(159, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(".m7@\";%Lx", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(159, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertFalse(arrayList0.contains(159));
      assertFalse(arrayList1.contains(".m7@\";%Lx"));
      assertNotNull(curriculum0);
      
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, "", "", "", (String) null, (String) null, (String) null, "", "", studentStatus0, "CANCELAMENTO POR ABANDONO", "", "ChUe` p", ".m7@\";%Lx", "[V.$P@=u`v", (String) null, "", ".m7@\";%Lx", (String) null, curriculum0, 159, 125, 159, 125, 0, 159, 831, 159, 159, (-1058.04731761144), 831, 0, 125, (-40), 159, 1.0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(159, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(159, curriculum0.getMinNumberOfTerms());
      assertEquals(409.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(159, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(".m7@\";%Lx", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(159, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(159, student0.getMandatoryHours());
      assertNull(student0.getNationality());
      assertEquals(831, student0.getAttemptedCredits());
      assertEquals((-1058.04731761144), student0.getIea(), 0.01);
      assertEquals(".m7@\";%Lx", student0.getDisabilities());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getStatusTerm());
      assertEquals(409, student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("ChUe` p", student0.getAdmissionTerm());
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals(".m7@\";%Lx", student0.getCourseCode());
      assertEquals("[V.$P@=u`v", student0.getAffirmativePolicy());
      assertEquals(159.0, student0.getMc(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertNull(student0.getBirthDate());
      assertEquals(159, student0.getOptionalHours());
      assertEquals(125, student0.getInstitutionalEnrollments());
      assertEquals(159.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals(125, student0.getOptionalCredits());
      assertEquals(159, student0.getEnrolledCredits());
      assertEquals(159, student0.getComplementaryCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-40), student0.getMobilityTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertNull(student0.getSecondarySchool());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(831, student0.getCompletedTerms());
      assertNull(student0.getCountry());
      assertEquals("", student0.getAdmissionStr());
      assertNull(student0.getNationalId());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertNull(student0.getCurriculumCode());
      assertNull(student0.getName());
      assertFalse(arrayList0.contains(125));
      assertFalse(arrayList1.contains("[V.$P@=u`v"));
      assertNotNull(student0);
      
      String string0 = student0.getSecondarySchool();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(159, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(159, curriculum0.getMinNumberOfTerms());
      assertEquals(409.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(159, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(125, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(".m7@\";%Lx", curriculum0.getCurriculumCode());
      assertEquals(125, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(159, curriculum0.getMaxNumberOfTerms());
      assertEquals(125, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(159, student0.getMandatoryHours());
      assertNull(student0.getNationality());
      assertEquals(831, student0.getAttemptedCredits());
      assertEquals((-1058.04731761144), student0.getIea(), 0.01);
      assertEquals(".m7@\";%Lx", student0.getDisabilities());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getStatusTerm());
      assertEquals(409, student0.getCompletedCredits());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("ChUe` p", student0.getAdmissionTerm());
      assertEquals(125, student0.getMandatoryCredits());
      assertEquals(".m7@\";%Lx", student0.getCourseCode());
      assertEquals("[V.$P@=u`v", student0.getAffirmativePolicy());
      assertEquals(159.0, student0.getMc(), 0.01);
      assertEquals("", student0.getStatusStr());
      assertNull(student0.getBirthDate());
      assertEquals(159, student0.getOptionalHours());
      assertEquals(125, student0.getInstitutionalEnrollments());
      assertEquals(159.0, student0.getGpa(), 0.01);
      assertEquals("", student0.getEmail());
      assertEquals(125, student0.getOptionalCredits());
      assertEquals(159, student0.getEnrolledCredits());
      assertEquals(159, student0.getComplementaryCredits());
      assertEquals("", student0.getGender());
      assertEquals(11, student0.getStatusIndex());
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals((-40), student0.getMobilityTerms());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertNull(student0.getSecondarySchool());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(831, student0.getCompletedTerms());
      assertNull(student0.getCountry());
      assertEquals("", student0.getAdmissionStr());
      assertNull(student0.getNationalId());
      assertNull(student0.getPlaceOfBirth());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertNull(student0.getCurriculumCode());
      assertNull(student0.getName());
      assertFalse(arrayList0.contains(125));
      assertFalse(arrayList1.contains("[V.$P@=u`v"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("7>dOoq]>JvA't=ykf2", "", "7>dOoq]>JvA't=ykf2", "7>dOoq]>JvA't=ykf2", "", "CANCELADO REPROVOU TODAS POR FALTAS", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", (String) null, "RT", ", complementaryHours=", (String) null, studentStatus0, "W%0k[GzP:el", "org.apache.commons.io.filefilter.DelegateFileFilter", "7>dOoq]>JvA't=ykf2", "CANCELAMENTO POR ABANDONO", ", secondarySchool='", "CANCELAMENTO P/ MUDANCA CURSO", "", "CCNvW^xQjbE$'|Nbk", "W%0k[GzP:el", (Curriculum) null, 329, 329, 329, 329, 329, 11, 329, 0.03, (-1040.8452), 0.03, 0, 0, (-1107), 0, 0, 1.0);
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(329, student0.getAttemptedCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals((-1107), student0.getInstitutionalEnrollments());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals(669, student0.getCompletedCredits());
      assertNull(student0.getStatusStr());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(329, student0.getOptionalHours());
      assertEquals(329, student0.getMandatoryHours());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals(329, student0.getOptionalCredits());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals(329, student0.getMandatoryCredits());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals("", student0.getEmail());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(329, student0.getComplementaryHours());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertNull(student0.getCountry());
      assertEquals("", student0.getNationalId());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals((-1040.8452), student0.getMc(), 0.01);
      assertNotNull(student0);
      
      int int0 = student0.getOptionalHours();
      assertEquals(StudentStatus.ACTIVE, student0.getStatus());
      assertEquals(329, student0.getAttemptedCredits());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals((-1107), student0.getInstitutionalEnrollments());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals(669, student0.getCompletedCredits());
      assertNull(student0.getStatusStr());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(329, student0.getOptionalHours());
      assertEquals(329, student0.getMandatoryHours());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals(329, student0.getOptionalCredits());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals(329, student0.getMandatoryCredits());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals("", student0.getEmail());
      assertEquals(0, student0.getEnrolledCredits());
      assertEquals(329, student0.getComplementaryHours());
      assertEquals(0.03, student0.getIea(), 0.01);
      assertEquals(11, student0.getComplementaryCredits());
      assertEquals(1.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertEquals(0.03, student0.getGpa(), 0.01);
      assertNull(student0.getCountry());
      assertEquals("", student0.getNationalId());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals((-1040.8452), student0.getMc(), 0.01);
      assertEquals(329, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "IbcH>X1Mf<:F", (Curriculum) null, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, (-251.647), 4054, 4054, 4054, 4054, 4054, 4054, 4054);
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4054, student0.getSuspendedTerms());
      assertEquals("", student0.getRace());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals("", student0.getCourseCode());
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getStatusStr());
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
      assertNotNull(student0);
      
      student0.setPlaceOfBirth("IbcH>X1Mf<:F");
      assertEquals(4054.0, student0.getAdmissionGrade(), 0.01);
      assertEquals("", student0.getDisabilities());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals(StudentStatus.DROPOUT, student0.getStatus());
      assertEquals(4054, student0.getSuspendedTerms());
      assertEquals("", student0.getRace());
      assertEquals(4054, student0.getCompletedTerms());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals(4054.0, student0.getIea(), 0.01);
      assertEquals("", student0.getStatusTerm());
      assertEquals(4054, student0.getMandatoryHours());
      assertEquals("", student0.getCourseCode());
      assertEquals(4054, student0.getOptionalHours());
      assertEquals(4054, student0.getMobilityTerms());
      assertEquals(4054, student0.getOptionalCredits());
      assertEquals(4054, student0.getComplementaryCredits());
      assertEquals(4054, student0.getEnrolledCredits());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals(4054, student0.getComplementaryHours());
      assertEquals(12162, student0.getCompletedCredits());
      assertEquals(11, student0.getStatusIndex());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals(4054.0, student0.getGpa(), 0.01);
      assertEquals((-251.647), student0.getMc(), 0.01);
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals(4054, student0.getInstitutionalEnrollments());
      assertEquals(4054, student0.getMandatoryCredits());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getStatusStr());
      assertEquals(4054, student0.getAttemptedCredits());
      assertEquals("", student0.getNationality());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("71b?DU*~%D", "", "", "\")", "71b?DU*~%D", "", "\")", "", "", "", "61+=bs", "", studentStatus0, "", ", country='", "", "", "CANCELAMENTO POR ABANDONO", "", "", "Ln~EU';BJnSv", "", (Curriculum) null, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), 0.0, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183));
      assertEquals("", student0.getStatusStr());
      
      student0.setStatusStr("Student{registration='71b?DU*~%D', nationalId='', name='', birthDate='\")', email='71b?DU*~%D', gender='', maritalStatus='\")', nationality='', country='', placeOfBirth='', race='61+=bs', statusStr='', status=ALUMNUS, statusTerm='71b?DU*~%D', admissionStr=', country='', admissionTerm='', disabilities='', affirmativePolicy='CANCELAMENTO POR ABANDONO', secondarySchool='', secondarySchoolGraduationYear='', courseCode='Ln~EU';BJnSv', curriculumCode='', curriculum='null', mandatoryHours=-2183, mandatoryCredits=-2183, optionalHours=-2183, optionalCredits=-2183, complementaryHours=-3164, complementaryCredits=9, attemptedCredits=-2183, gpa=-2183.0, mc=-2183.0, iea=0.0, completedTerms=-2183, suspendedTerms=-2183, institutionalTerms=-2183, mobilityTerms=-2183, enrolledCredits=-2183, admissionGrade=-2183.0}");
      int int0 = student0.getStatusIndex();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "#;lB&sg", "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", ", placeOfBirth='", ", placeOfBirth='", "UmR\"m%v%,ucoojPWDs", studentStatus0, "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", "UmR\"m%v%,ucoojPWDs", "UmR\"m%v%,ucoojPWDs", ", placeOfBirth='", "~5/<e]-^Fd4R-Pu", "/OS|K", "", (Curriculum) null, 13, 13, 13, 13, 0, 13, 13, 0, 4516.7628, 13, 13, 13, 0, 0, 0, 4516.7628);
      student0.setEnrolledCredits(13);
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getDisabilities());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals("/OS|K", student0.getCourseCode());
      assertEquals("#;lB&sg", student0.getNationality());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getName());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getEmail());
      assertEquals("#;lB&sg", student0.getStatusTerm());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getBirthDate());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("#;lB&sg", student0.getMaritalStatus());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getAffirmativePolicy());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getAdmissionTerm());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getNationalId());
      assertEquals("#;lB&sg", student0.getGender());
      assertEquals(", placeOfBirth='", student0.getSecondarySchool());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getSecondarySchoolGraduationYear());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getStatusStr());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getCountry());
      assertEquals("#;lB&sg", student0.getAdmissionStr());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Curriculum curriculum0 = new Curriculum("", "6= gF@!j", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 6, 0, 0, 0, 0, 1913, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      Student student0 = new Student("dEb-#/yPI=pD|U&/+N", "dEb-#/yPI=pD|U&/+N", "dEb-#/yPI=pD|U&/+N", "85Vx [cx)oG", "dEb-#/yPI=pD|U&/+N", "85Vx [cx)oG", "dEb-#/yPI=pD|U&/+N", ", mandatoryHours=", ", mandatoryHours=", "85Vx [cx)oG", "", "totalLoadTime", studentStatus0, "85Vx [cx)oG", ", mandatoryHours=", "dEb-#/yPI=pD|U&/+N", (String) null, "dEb-#/yPI=pD|U&/+N", ", attemptedCredits=", "dEb-#/yPI=pD|U&/+N", "It)lk,F>en", "6= gF@!j", curriculum0, 0, 0, 6, 18, 0, 18, 0, 18, 1913, 1913, 6, 0, 0, 0, 6, (-1312.50381482));
      String string0 = student0.getAdmissionTerm();
      assertEquals("85Vx [cx)oG", student0.getPlaceOfBirth());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getName());
      assertEquals(", mandatoryHours=", student0.getCountry());
      assertEquals("dEb-#/yPI=pD|U&/+N", string0);
      assertEquals("85Vx [cx)oG", student0.getBirthDate());
      assertEquals("85Vx [cx)oG", student0.getStatusTerm());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getAffirmativePolicy());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getMaritalStatus());
      assertEquals(", mandatoryHours=", student0.getAdmissionStr());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getSecondarySchoolGraduationYear());
      assertEquals(", attemptedCredits=", student0.getSecondarySchool());
      assertNotNull(string0);
      assertEquals(", mandatoryHours=", student0.getNationality());
      assertEquals("It)lk,F>en", student0.getCourseCode());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getNationalId());
      assertEquals("85Vx [cx)oG", student0.getGender());
      assertEquals("totalLoadTime", student0.getStatusStr());
      assertEquals("6= gF@!j", student0.getCurriculumCode());
      assertEquals("dEb-#/yPI=pD|U&/+N", student0.getEmail());
      assertEquals("", student0.getRace());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "#;lB&sg", "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", ", placeOfBirth='", ", placeOfBirth='", "UmR\"m%v%,ucoojPWDs", studentStatus0, "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", "UmR\"m%v%,ucoojPWDs", "UmR\"m%v%,ucoojPWDs", ", placeOfBirth='", "~5/<e]-^Fd4R-Pu", "/OS|K", "", (Curriculum) null, 13, 13, 13, 13, 0, 13, 13, 0, 4516.7628, 13, 13, 13, 0, 0, 0, 4516.7628);
      student0.getGpa();
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getDisabilities());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getCountry());
      assertEquals("#;lB&sg", student0.getAdmissionStr());
      assertEquals("#;lB&sg", student0.getStatusTerm());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getEmail());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals("#;lB&sg", student0.getGender());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals("#;lB&sg", student0.getMaritalStatus());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getNationalId());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getAdmissionTerm());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getAffirmativePolicy());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getStatusStr());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getBirthDate());
      assertEquals(", placeOfBirth='", student0.getSecondarySchool());
      assertEquals("#;lB&sg", student0.getNationality());
      assertEquals("/OS|K", student0.getCourseCode());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getSecondarySchoolGraduationYear());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getName());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      assertEquals(": ", student0.getCourseCode());
      
      student0.setCourseCode(": ");
      assertEquals(", status=", student0.getStatusTerm());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(", status=", student0.getRace());
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", "", "", "", "", "", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", studentStatus0, "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", (String) null, "RU94%DgMEv(%yj_KRZ6", "", "", "s.F_", "s.F_", (Curriculum) null, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, (-460), 0, 0, 0, 2, 0);
      String string0 = student0.getAdmissionStr();
      assertEquals("", student0.getSecondarySchool());
      assertEquals("s.F_", student0.getCurriculumCode());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getName());
      assertEquals("RU94%DgMEv(%yj_KRZ6", string0);
      assertEquals("", student0.getBirthDate());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAffirmativePolicy());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionTerm());
      assertEquals("", student0.getNationalId());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getPlaceOfBirth());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getCountry());
      assertEquals("", student0.getEmail());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getRace());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getStatusTerm());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("s.F_", student0.getCourseCode());
      assertEquals("", student0.getGender());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      assertEquals(", status=", student0.getAffirmativePolicy());
      
      student0.setAffirmativePolicy("g}75JGx={Rk^)))<F");
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("", "CANCELADO NOVO INGRESSO OUTRO CURSO", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, (-1949), Integer.MAX_VALUE, 20, (-1949), Integer.MAX_VALUE, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      Student student0 = new Student("CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", studentStatus0, "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", "", "", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", curriculum0, Integer.MAX_VALUE, 3, 7497, 3, Integer.MAX_VALUE, 72, 0, Integer.MAX_VALUE, 0.0, Integer.MAX_VALUE, Integer.MAX_VALUE, 13, Integer.MAX_VALUE, 0, 0, 13);
      assertEquals("", student0.getAdmissionStr());
      
      student0.setAdmissionStr("CANCELADO NOVO INGRESSO OUTRO CURSO");
      assertEquals("", student0.getStatusTerm());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("_l", "com.google.common.base.CharMatcher$None", "_l", ", optionalHours=", "", ", optionalHours=", ", optionalHours=", ", optionalHours=", ", optionalHours=", ", optionalHours=", ", optionalHours=", ", optionalHours=", studentStatus0, "_l", ", optionalHours=", "_l", "com.google.common.base.CharMatcher$None", "com.google.common.base.CharMatcher$None", "", ", optionalHours=", "com.google.common.base.CharMatcher$None", ", optionalHours=", (Curriculum) null, 0, 0, 0, 0, 0, 0, 1406, 0, 3181.63, 0.0, 0, (-1392), (-1392), 343, 10, (-1392));
      student0.getPlaceOfBirth();
      assertEquals(", optionalHours=", student0.getAdmissionStr());
      assertEquals("", student0.getEmail());
      assertEquals("_l", student0.getAdmissionTerm());
      assertEquals(", optionalHours=", student0.getCurriculumCode());
      assertEquals("com.google.common.base.CharMatcher$None", student0.getAffirmativePolicy());
      assertEquals(", optionalHours=", student0.getNationality());
      assertEquals(", optionalHours=", student0.getBirthDate());
      assertEquals("com.google.common.base.CharMatcher$None", student0.getNationalId());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("com.google.common.base.CharMatcher$None", student0.getCourseCode());
      assertEquals("com.google.common.base.CharMatcher$None", student0.getDisabilities());
      assertEquals("_l", student0.getName());
      assertEquals(", optionalHours=", student0.getGender());
      assertEquals("_l", student0.getStatusTerm());
      assertEquals(", optionalHours=", student0.getMaritalStatus());
      assertEquals(", optionalHours=", student0.getStatusStr());
      assertEquals(", optionalHours=", student0.getSecondarySchoolGraduationYear());
      assertEquals(", optionalHours=", student0.getRace());
      assertEquals(", optionalHours=", student0.getCountry());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", studentStatus0, "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", (Curriculum) null, 14, 14, 14, 1592, 1592, 14, 14, 14, 5379.97808, (-1866.5970733057043), 1592, (-1761), 14, 14, 1592, 14);
      String string0 = student0.getBirthDate();
      assertEquals("oe_", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student(", complementaryCredits=", (String) null, "", ", nationalId='", ", nationality='", ", status=", "grvzwcE_gk}", "", "grvzwcE_gk}", "t", "", "", studentStatus0, "", (String) null, ", nationality='", "", "", ", idealMandatoryCreditsList=", "grvzwcE_gk}", "AyZR}$}C@z", "", (Curriculum) null, 0, (-3862), 0, 5059, 5, (-2218), 5, 0, (-3862), 5, (-568), 88, 1144, 5059, 306654252, (-866.503693620107));
      double double0 = student0.getAdmissionGrade();
      assertEquals(", idealMandatoryCreditsList=", student0.getSecondarySchool());
      assertEquals("t", student0.getPlaceOfBirth());
      assertEquals("grvzwcE_gk}", student0.getMaritalStatus());
      assertEquals("", student0.getCurriculumCode());
      assertEquals(", nationality='", student0.getAdmissionTerm());
      assertEquals("", student0.getStatusStr());
      assertEquals("grvzwcE_gk}", student0.getCountry());
      assertEquals("", student0.getName());
      assertEquals("grvzwcE_gk}", student0.getSecondarySchoolGraduationYear());
      assertEquals(", nationalId='", student0.getBirthDate());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("", student0.getDisabilities());
      assertEquals(", nationality='", student0.getEmail());
      assertEquals(", status=", student0.getGender());
      assertEquals((-866.503693620107), double0, 0.01);
      assertEquals("", student0.getNationality());
      assertEquals("AyZR}$}C@z", student0.getCourseCode());
      assertEquals("", student0.getStatusTerm());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("71b?DU*~%D", "", "", "\")", "71b?DU*~%D", "", "\")", "", "", "", "61+=bs", "", studentStatus0, "", ", country='", "", "", "CANCELAMENTO POR ABANDONO", "", "", "Ln~EU';BJnSv", "", (Curriculum) null, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), 0.0, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183));
      student0.setCurriculum((Curriculum) null);
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
      assertEquals("", student0.getStatusTerm());
      assertEquals("71b?DU*~%D", student0.getEmail());
      assertEquals("61+=bs", student0.getRace());
      assertEquals("", student0.getGender());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getName());
      assertEquals("", student0.getNationalId());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "__file", "__file", "k", "__file", "__file", "__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", "__file", (String) null, studentStatus0, (String) null, "", "", "__file", (String) null, "T/];x/Gzx(r@(", "__file", "", "k", (Curriculum) null, 702, 702, 702, 702, 3, 702, 702, 3, 3, 3, 702, 3, 3, 3, 3, 3);
      String string0 = student0.getCourseCode();
      assertEquals("k", student0.getBirthDate());
      assertEquals("", string0);
      assertEquals("__file", student0.getGender());
      assertEquals("__file", student0.getNationalId());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals("__file", student0.getEmail());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(", ", student0.getCountry());
      assertNotNull(string0);
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("__file", student0.getName());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("__file", student0.getRace());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("__file", student0.getDisabilities());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      student0.setAdmissionTerm("c0=Z*Q`O8,eC+bi");
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
      assertEquals(": ", student0.getCourseCode());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(", status=", student0.getRace());
      assertEquals(", status=", student0.getAffirmativePolicy());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("71b?DU*~%D", "", "", "\")", "71b?DU*~%D", "", "\")", "", "", "", "61+=bs", "", studentStatus0, "", ", country='", "", "", "CANCELAMENTO POR ABANDONO", "", "", "Ln~EU';BJnSv", "", (Curriculum) null, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), 0.0, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183));
      String string0 = student0.getAffirmativePolicy();
      assertEquals("61+=bs", student0.getRace());
      assertEquals("", student0.getStatusStr());
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals("", student0.getGender());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("71b?DU*~%D", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals("CANCELAMENTO POR ABANDONO", string0);
      assertEquals("", student0.getStatusTerm());
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "IbcH>X1Mf<:F", (Curriculum) null, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, (-251.647), 4054, 4054, 4054, 4054, 4054, 4054, 4054);
      assertEquals("", student0.getDisabilities());
      
      student0.setDisabilities("");
      assertEquals("IbcH>X1Mf<:F", student0.getPlaceOfBirth());
      assertEquals("", student0.getStatusStr());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("", student0.getRace());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchoolGraduationYear());
      assertEquals("IbcH>X1Mf<:F", student0.getAffirmativePolicy());
      assertEquals("IbcH>X1Mf<:F", student0.getCountry());
      assertEquals("", student0.getNationality());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getStatusTerm());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("71b?DU*~%D", "", "", "\")", "71b?DU*~%D", "", "\")", "", "", "", "61+=bs", "", studentStatus0, "", ", country='", "", "", "CANCELAMENTO POR ABANDONO", "", "", "Ln~EU';BJnSv", "", (Curriculum) null, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), 0.0, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183));
      String string0 = student0.getEmail();
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getDisabilities());
      assertEquals("61+=bs", student0.getRace());
      assertEquals("", student0.getStatusTerm());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("", student0.getNationalId());
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getGender());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals("", student0.getName());
      assertEquals("71b?DU*~%D", string0);
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", "", "", "", "", "", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", studentStatus0, "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", (String) null, "RU94%DgMEv(%yj_KRZ6", "", "", "s.F_", "s.F_", (Curriculum) null, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, (-460), 0, 0, 0, 2, 0);
      student0.isActive();
      assertEquals("", student0.getRace());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getStatusStr());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionStr());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getCountry());
      assertEquals("", student0.getBirthDate());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getPlaceOfBirth());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAffirmativePolicy());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getAdmissionTerm());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getStatusTerm());
      assertEquals("", student0.getNationalId());
      assertEquals("s.F_", student0.getCurriculumCode());
      assertEquals("", student0.getSecondarySchool());
      assertEquals("RU94%DgMEv(%yj_KRZ6", student0.getName());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getGender());
      assertEquals("s.F_", student0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("K", "K", (String) null, "#}H%d4", "K", (String) null, (String) null, "H4!{NQ~#cf(W", "#}H%d4", (String) null, "#}H%d4", (String) null, studentStatus0, "K", "H4!{NQ~#cf(W", "#_HI8`):*m", "The list of names must not be null", "K", "H4!{NQ~#cf(W", "H4!{NQ~#cf(W", "#_HI8`):*m", "#}H%d4", (Curriculum) null, 0, (-862048943), 0, (-1613), (-862048943), (-1613), (-862048943), (-1613), 0, (-862048943), (-2247), (-862048943), (-2247), (-2247), 0, (-2247));
      String string0 = student0.getCurriculumCode();
      assertEquals("#}H%d4", student0.getRace());
      assertEquals("K", student0.getNationalId());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals("#}H%d4", string0);
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals("K", student0.getEmail());
      assertNotNull(string0);
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertEquals("K", student0.getStatusTerm());
      assertEquals("#}H%d4", student0.getBirthDate());
      assertEquals("#_HI8`):*m", student0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("(", "k+;!vUeBpWW", "", "k+;!vUeBpWW", "k+;!vUeBpWW", "(", "", "bI6C+PGqo'P-bv7JW", "bI6C+PGqo'P-bv7JW", "(", "bI6C+PGqo'P-bv7JW", "bI6C+PGqo'P-bv7JW", studentStatus0, "k+;!vUeBpWW", "k+;!vUeBpWW", "k+;!vUeBpWW", "k+;!vUeBpWW", "(", "(", "k+;!vUeBpWW", "(", "(", (Curriculum) null, (-1739), (-1739), 473, (-13), 473, 884, 884, 473, (-1739), (-67.3342870374516), 1682554634, 1682554634, (-1283), 1682554634, 0, 3579.9640306723686);
      String string0 = student0.getStatusStr();
      assertEquals("(", student0.getGender());
      assertEquals("k+;!vUeBpWW", student0.getNationalId());
      assertEquals("k+;!vUeBpWW", student0.getAdmissionTerm());
      assertEquals("k+;!vUeBpWW", student0.getAdmissionStr());
      assertEquals("(", student0.getCourseCode());
      assertEquals("(", student0.getSecondarySchool());
      assertEquals("k+;!vUeBpWW", student0.getEmail());
      assertEquals("", student0.getName());
      assertEquals("k+;!vUeBpWW", student0.getBirthDate());
      assertEquals("k+;!vUeBpWW", student0.getSecondarySchoolGraduationYear());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getRace());
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getCountry());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("k+;!vUeBpWW", student0.getStatusTerm());
      assertEquals("k+;!vUeBpWW", student0.getDisabilities());
      assertEquals("(", student0.getAffirmativePolicy());
      assertEquals("(", student0.getPlaceOfBirth());
      assertEquals("bI6C+PGqo'P-bv7JW", string0);
      assertEquals("bI6C+PGqo'P-bv7JW", student0.getNationality());
      assertEquals("(", student0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(1303);
      Curriculum curriculum0 = new Curriculum("Ob 's }>%!jKr!sW", "mRV}xZ8", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1303, 1303, 1303, 0, 1303, 1303, 1303, 1303, (-2277), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      Student student0 = new Student("\"v", "mRV}xZ8", "mRV}xZ8", "\"v", "Ob 's }>%!jKr!sW", "mRV}xZ8", "Ob 's }>%!jKr!sW", "Ob 's }>%!jKr!sW", "8x)Wh-ZAT", "8x)Wh-ZAT", "mRV}xZ8", "8x)Wh-ZAT", studentStatus0, "mRV}xZ8", "\"g|&<k8FigUjpd", "mRV}xZ8", "mRV}xZ8", "\"v", "mRV}xZ8", "\"v", "mRV}xZ8", "\"v", curriculum0, 0, 0, 0, 0, (-2277), 1303, 1303, (-2277), (-543.0), 0, 1303, 0, (-2277), 1303, 0, 1303);
      student0.getMc();
      assertEquals("mRV}xZ8", student0.getRace());
      assertEquals("mRV}xZ8", student0.getDisabilities());
      assertEquals("\"v", student0.getCurriculumCode());
      assertEquals("8x)Wh-ZAT", student0.getPlaceOfBirth());
      assertEquals("mRV}xZ8", student0.getCourseCode());
      assertEquals("Ob 's }>%!jKr!sW", student0.getMaritalStatus());
      assertEquals("mRV}xZ8", student0.getStatusTerm());
      assertEquals("mRV}xZ8", student0.getGender());
      assertEquals("8x)Wh-ZAT", student0.getCountry());
      assertEquals("8x)Wh-ZAT", student0.getStatusStr());
      assertEquals("mRV}xZ8", student0.getNationalId());
      assertEquals("mRV}xZ8", student0.getAdmissionTerm());
      assertEquals("mRV}xZ8", student0.getSecondarySchool());
      assertEquals("\"v", student0.getBirthDate());
      assertEquals("mRV}xZ8", student0.getName());
      assertEquals("\"g|&<k8FigUjpd", student0.getAdmissionStr());
      assertEquals("\"v", student0.getAffirmativePolicy());
      assertEquals("Ob 's }>%!jKr!sW", student0.getEmail());
      assertEquals("Ob 's }>%!jKr!sW", student0.getNationality());
      assertEquals("\"v", student0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", studentStatus0, "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", "oe_", (Curriculum) null, 14, 14, 14, 1592, 1592, 14, 14, 14, 5379.97808, (-1866.5970733057043), 1592, (-1761), 14, 14, 1592, 14);
      student0.setSuspendedTerms(14);
      assertEquals(14, student0.getAttemptedCredits());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ", disabilities='", ", disabilities='", ", disabilities='", ", status=", ", status=", ", disabilities='", "", studentStatus0, ", disabilities='", ", disabilities='", "", "0LzRj5H", ", disabilities='", "", "", "", "", (Curriculum) null, 0, 0, 0, 0, 0, 0, 0, 203.24446603172936, 0, 474.793453, 0, 0, 0, 677, 0, 0);
      student0.setComplementaryCredits(0);
      assertEquals(", status=", student0.getEmail());
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getAdmissionStr());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getStatusStr());
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
      assertEquals(", disabilities='", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(", status=", student0.getCountry());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(", disabilities='", student0.getStatusTerm());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("71b?DU*~%D", "", "", "\")", "71b?DU*~%D", "", "\")", "", "", "", "61+=bs", "", studentStatus0, "", ", country='", "", "", "CANCELAMENTO POR ABANDONO", "", "", "Ln~EU';BJnSv", "", (Curriculum) null, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), (-2183), 0.0, (-2183), (-2183), (-2183), (-2183), (-2183), (-2183));
      student0.isDropout();
      assertEquals("", student0.getSecondarySchool());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("\")", student0.getMaritalStatus());
      assertEquals("61+=bs", student0.getRace());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getAffirmativePolicy());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", student0.getNationalId());
      assertEquals("Ln~EU';BJnSv", student0.getCourseCode());
      assertEquals("", student0.getNationality());
      assertEquals("71b?DU*~%D", student0.getEmail());
      assertEquals("\")", student0.getBirthDate());
      assertEquals("", student0.getPlaceOfBirth());
      assertEquals("", student0.getName());
      assertEquals(", country='", student0.getAdmissionStr());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getCountry());
      assertEquals("", student0.getGender());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "#;lB&sg", "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", ", placeOfBirth='", ", placeOfBirth='", "UmR\"m%v%,ucoojPWDs", studentStatus0, "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", "UmR\"m%v%,ucoojPWDs", "UmR\"m%v%,ucoojPWDs", ", placeOfBirth='", "~5/<e]-^Fd4R-Pu", "/OS|K", "", (Curriculum) null, 13, 13, 13, 13, 0, 13, 13, 0, 4516.7628, 13, 13, 13, 0, 0, 0, 4516.7628);
      student0.setMc(0);
      assertEquals("#;lB&sg", student0.getMaritalStatus());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getAffirmativePolicy());
      assertEquals("#;lB&sg", student0.getGender());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getNationalId());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getEmail());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals("", student0.getCurriculumCode());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getDisabilities());
      assertEquals("#;lB&sg", student0.getStatusTerm());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getBirthDate());
      assertEquals("#;lB&sg", student0.getNationality());
      assertEquals("UmR\"m%v%,ucoojPWDs", student0.getStatusStr());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getName());
      assertEquals("/OS|K", student0.getCourseCode());
      assertEquals("#;lB&sg", student0.getAdmissionStr());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getSecondarySchoolGraduationYear());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getCountry());
      assertEquals("~5/<e]-^Fd4R-Pu", student0.getAdmissionTerm());
      assertEquals(", placeOfBirth='", student0.getSecondarySchool());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student(", disabilities='", "", "0LzRj5H", "", ", status=", ", disabilities='", ", disabilities='", ", disabilities='", ", status=", ", status=", ", disabilities='", "", studentStatus0, ", disabilities='", ", disabilities='", "", "0LzRj5H", ", disabilities='", "", "", "", "", (Curriculum) null, 0, 0, 0, 0, 0, 0, 0, 203.24446603172936, 0, 474.793453, 0, 0, 0, 677, 0, 0);
      assertEquals("", student0.getCurriculumCode());
      
      student0.setCurriculumCode("");
      assertEquals(", disabilities='", student0.getMaritalStatus());
      assertEquals("", student0.getStatusStr());
      assertEquals(", disabilities='", student0.getGender());
      assertEquals("", student0.getSecondarySchool());
      assertEquals(", status=", student0.getEmail());
      assertEquals(", disabilities='", student0.getStatusTerm());
      assertEquals("0LzRj5H", student0.getName());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals("0LzRj5H", student0.getDisabilities());
      assertEquals(", disabilities='", student0.getNationality());
      assertEquals(", status=", student0.getCountry());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", disabilities='", student0.getAdmissionStr());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getBirthDate());
      assertEquals(", disabilities='", student0.getAffirmativePolicy());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "~5/<e]-^Fd4R-Pu", "#;lB&sg", "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", ", placeOfBirth='", ", placeOfBirth='", "UmR\"m%v%,ucoojPWDs", studentStatus0, "#;lB&sg", "#;lB&sg", "~5/<e]-^Fd4R-Pu", "UmR\"m%v%,ucoojPWDs", "UmR\"m%v%,ucoojPWDs", ", placeOfBirth='", "~5/<e]-^Fd4R-Pu", "/OS|K", "", (Curriculum) null, 13, 13, 13, 13, 0, 13, 13, 0, 4516.7628, 13, 13, 13, 0, 0, 0, 4516.7628);
      student0.setMandatoryCredits(3255);
      assertEquals(3281, student0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "", studentStatus0, "", "IbcH>X1Mf<:F", "", "", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "IbcH>X1Mf<:F", "", "IbcH>X1Mf<:F", (Curriculum) null, 4054, 4054, 4054, 4054, 4054, 4054, 4054, 4054, (-251.647), 4054, 4054, 4054, 4054, 4054, 4054, 4054);
      student0.getSuspendedTerms();
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getName());
      assertEquals("IbcH>X1Mf<:F", student0.getBirthDate());
      assertEquals("", student0.getStatusTerm());
      assertEquals("IbcH>X1Mf<:F", student0.getAdmissionStr());
      assertEquals("", student0.getNationality());
      assertEquals("", student0.getCourseCode());
      assertEquals("", student0.getRace());
      assertEquals("IbcH>X1Mf<:F", student0.getGender());
      assertEquals("", student0.getDisabilities());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("IbcH>X1Mf<:F", student0.getCurriculumCode());
      assertEquals("IbcH>X1Mf<:F", student0.getNationalId());
      assertEquals("IbcH>X1Mf<:F", student0.getSecondarySchool());
      assertEquals("IbcH>X1Mf<:F", student0.getEmail());
      assertEquals("", student0.getStatusStr());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("7>dOoq]>JvA't=ykf2", "", "7>dOoq]>JvA't=ykf2", "7>dOoq]>JvA't=ykf2", "", "CANCELADO REPROVOU TODAS POR FALTAS", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", (String) null, "RT", ", complementaryHours=", (String) null, studentStatus0, "W%0k[GzP:el", "org.apache.commons.io.filefilter.DelegateFileFilter", "7>dOoq]>JvA't=ykf2", "CANCELAMENTO POR ABANDONO", ", secondarySchool='", "CANCELAMENTO P/ MUDANCA CURSO", "", "CCNvW^xQjbE$'|Nbk", "W%0k[GzP:el", (Curriculum) null, 329, 329, 329, 329, 329, 11, 329, 0.03, (-1040.8452), 0.03, 0, 0, (-1107), 0, 0, 1.0);
      String string0 = student0.getSecondarySchoolGraduationYear();
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals(", complementaryHours=", student0.getRace());
      assertEquals("W%0k[GzP:el", student0.getCurriculumCode());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("", student0.getEmail());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals("", student0.getNationalId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "data length is zero!", "", "LIZQk,8LNj8,0r", "", (String) null, (String) null, "com.google.common.base.CharMatcher$IsNot", "P*b+,", (String) null, "wtQQ6Bv", studentStatus0, "", (String) null, "'", ", gender='", "Z~p@Ss|QnFXVo5", "T5I7)fLb%W+={|7", "wtQQ6Bv", "", ", gender='", (Curriculum) null, 0, (-845), (-845), 0, 0, 15, 0, 15, (-845), 0.0, 1382, 0, (-143), 1382, 127, (-1444.632512171972));
      String string0 = student0.getNationalId();
      assertEquals(", gender='", student0.getDisabilities());
      assertEquals("", student0.getBirthDate());
      assertEquals("P*b+,", student0.getPlaceOfBirth());
      assertEquals("data length is zero!", student0.getName());
      assertEquals("", student0.getStatusTerm());
      assertEquals("", student0.getCourseCode());
      assertEquals("LIZQk,8LNj8,0r", student0.getEmail());
      assertEquals(", gender='", student0.getCurriculumCode());
      assertEquals("Z~p@Ss|QnFXVo5", student0.getAffirmativePolicy());
      assertEquals("", string0);
      assertEquals("T5I7)fLb%W+={|7", student0.getSecondarySchool());
      assertEquals("com.google.common.base.CharMatcher$IsNot", student0.getCountry());
      assertEquals("wtQQ6Bv", student0.getStatusStr());
      assertEquals("wtQQ6Bv", student0.getSecondarySchoolGraduationYear());
      assertEquals("'", student0.getAdmissionTerm());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "data length is zero!", "", "LIZQk,8LNj8,0r", "", (String) null, (String) null, "com.google.common.base.CharMatcher$IsNot", "P*b+,", (String) null, "wtQQ6Bv", studentStatus0, "", (String) null, "'", ", gender='", "Z~p@Ss|QnFXVo5", "T5I7)fLb%W+={|7", "wtQQ6Bv", "", ", gender='", (Curriculum) null, 0, (-845), (-845), 0, 0, 15, 0, 15, (-845), 0.0, 1382, 0, (-143), 1382, 127, (-1444.632512171972));
      // Undeclared exception!
      try { 
        student0.computeRiskClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Student", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      student0.isAlumnus();
      assertEquals(", status=", student0.getStatusTerm());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals(": ", student0.getCourseCode());
      assertEquals(", status=", student0.getRace());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(", status=", student0.getAffirmativePolicy());
      assertEquals("g}75JGx={Rk^)))<F", student0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "__file", "__file", "k", "__file", "__file", "__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", "__file", (String) null, studentStatus0, (String) null, "", "", "__file", (String) null, "T/];x/Gzx(r@(", "__file", "", "k", (Curriculum) null, 702, 702, 702, 702, 3, 702, 702, 3, 3, 3, 702, 3, 3, 3, 3, 3);
      assertEquals("__file", student0.getName());
      
      student0.setName("");
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("7>dOoq]>JvA't=ykf2", "", "7>dOoq]>JvA't=ykf2", "7>dOoq]>JvA't=ykf2", "", "CANCELADO REPROVOU TODAS POR FALTAS", "CANCELADO NOVO INGRESSO OUTRO CURSO", "CANCELADO NOVO INGRESSO OUTRO CURSO", (String) null, "RT", ", complementaryHours=", (String) null, studentStatus0, "W%0k[GzP:el", "org.apache.commons.io.filefilter.DelegateFileFilter", "7>dOoq]>JvA't=ykf2", "CANCELAMENTO POR ABANDONO", ", secondarySchool='", "CANCELAMENTO P/ MUDANCA CURSO", "", "CCNvW^xQjbE$'|Nbk", "W%0k[GzP:el", (Curriculum) null, 329, 329, 329, 329, 329, 11, 329, 0.03, (-1040.8452), 0.03, 0, 0, (-1107), 0, 0, 1.0);
      student0.setGpa(0);
      assertEquals("", student0.getEmail());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", student0.getAdmissionStr());
      assertEquals(", secondarySchool='", student0.getAffirmativePolicy());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getName());
      assertEquals("CANCELAMENTO P/ MUDANCA CURSO", student0.getSecondarySchool());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getNationality());
      assertEquals("CANCELADO REPROVOU TODAS POR FALTAS", student0.getGender());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getAdmissionTerm());
      assertEquals("", student0.getNationalId());
      assertEquals("W%0k[GzP:el", student0.getStatusTerm());
      assertEquals("CANCELADO NOVO INGRESSO OUTRO CURSO", student0.getMaritalStatus());
      assertEquals("7>dOoq]>JvA't=ykf2", student0.getBirthDate());
      assertEquals("CANCELAMENTO POR ABANDONO", student0.getDisabilities());
      assertEquals("CCNvW^xQjbE$'|Nbk", student0.getCourseCode());
      assertEquals("RT", student0.getPlaceOfBirth());
      assertEquals("", student0.getSecondarySchoolGraduationYear());
      assertEquals(", complementaryHours=", student0.getRace());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      String string0 = student0.toString();
      assertEquals("Student{registration='null', nationalId='null', name='null', birthDate='null', email='null', gender='null', maritalStatus='null', nationality='null', country='null', placeOfBirth=', status=', race=', status=', statusStr='null', status=ALUMNUS, statusTerm=', status=', admissionStr='null', admissionTerm='null', disabilities='g}75JGx={Rk^)))<F', affirmativePolicy=', status=', secondarySchool='null', secondarySchoolGraduationYear='null', courseCode=': ', curriculumCode='|Hh1P>?;j@PN+\"', curriculum='null', mandatoryHours=-3786, mandatoryCredits=0, optionalHours=0, optionalCredits=0, complementaryHours=-3786, complementaryCredits=-1844, attemptedCredits=-1844, gpa=0.0, mc=-3786.0, iea=407.070019434, completedTerms=0, suspendedTerms=-1844, institutionalTerms=0, mobilityTerms=-1844, enrolledCredits=-4, admissionGrade=-4.0}", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("K", "K", (String) null, "#}H%d4", "K", (String) null, (String) null, "H4!{NQ~#cf(W", "#}H%d4", (String) null, "#}H%d4", (String) null, studentStatus0, "K", "H4!{NQ~#cf(W", "#_HI8`):*m", "The list of names must not be null", "K", "H4!{NQ~#cf(W", "H4!{NQ~#cf(W", "#_HI8`):*m", "#}H%d4", (Curriculum) null, 0, (-862048943), 0, (-1613), (-862048943), (-1613), (-862048943), (-1613), 0, (-862048943), (-2247), (-862048943), (-2247), (-2247), 0, (-2247));
      assertEquals("K", student0.getNationalId());
      
      student0.setNationalId("K");
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals("K", student0.getEmail());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals("K", student0.getStatusTerm());
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals("The list of names must not be null", student0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "__file", "__file", "k", "__file", "__file", "__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", "__file", (String) null, studentStatus0, (String) null, "", "", "__file", (String) null, "T/];x/Gzx(r@(", "__file", "", "k", (Curriculum) null, 702, 702, 702, 702, 3, 702, 702, 3, 3, 3, 702, 3, 3, 3, 3, 3);
      student0.getStatus();
      assertEquals("", student0.getCourseCode());
      assertEquals("T/];x/Gzx(r@(", student0.getNationality());
      assertEquals("__file", student0.getNationalId());
      assertEquals("__file", student0.getName());
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals("__file", student0.getDisabilities());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("__file", student0.getGender());
      assertEquals("__file", student0.getEmail());
      assertEquals("k", student0.getBirthDate());
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals(", ", student0.getCountry());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("K", "K", (String) null, "#}H%d4", "K", (String) null, (String) null, "H4!{NQ~#cf(W", "#}H%d4", (String) null, "#}H%d4", (String) null, studentStatus0, "K", "H4!{NQ~#cf(W", "#_HI8`):*m", "The list of names must not be null", "K", "H4!{NQ~#cf(W", "H4!{NQ~#cf(W", "#_HI8`):*m", "#}H%d4", (Curriculum) null, 0, (-862048943), 0, (-1613), (-862048943), (-1613), (-862048943), (-1613), 0, (-862048943), (-2247), (-862048943), (-2247), (-2247), 0, (-2247));
      String string0 = student0.getMaritalStatus();
      assertEquals("#_HI8`):*m", student0.getAdmissionTerm());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchoolGraduationYear());
      assertEquals("H4!{NQ~#cf(W", student0.getAdmissionStr());
      assertEquals("The list of names must not be null", student0.getDisabilities());
      assertEquals("#_HI8`):*m", student0.getCourseCode());
      assertEquals("K", student0.getEmail());
      assertNull(string0);
      assertEquals("#}H%d4", student0.getCurriculumCode());
      assertEquals("K", student0.getAffirmativePolicy());
      assertEquals("K", student0.getStatusTerm());
      assertEquals("#}H%d4", student0.getCountry());
      assertEquals("H4!{NQ~#cf(W", student0.getSecondarySchool());
      assertEquals("#}H%d4", student0.getRace());
      assertEquals("K", student0.getNationalId());
      assertEquals("H4!{NQ~#cf(W", student0.getNationality());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("", "", "data length is zero!", "", "LIZQk,8LNj8,0r", "", (String) null, (String) null, "com.google.common.base.CharMatcher$IsNot", "P*b+,", (String) null, "wtQQ6Bv", studentStatus0, "", (String) null, "'", ", gender='", "Z~p@Ss|QnFXVo5", "T5I7)fLb%W+={|7", "wtQQ6Bv", "", ", gender='", (Curriculum) null, 0, (-845), (-845), 0, 0, 15, 0, 15, (-845), 0.0, 1382, 0, (-143), 1382, 127, (-1444.632512171972));
      student0.setInstitutionalEnrollments(15);
      assertEquals(15, student0.getInstitutionalEnrollments());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("k", "__file", "__file", "k", "__file", "__file", "__file", "T/];x/Gzx(r@(", ", ", "pV#Ggn~z9&.>2", "__file", (String) null, studentStatus0, (String) null, "", "", "__file", (String) null, "T/];x/Gzx(r@(", "__file", "", "k", (Curriculum) null, 702, 702, 702, 702, 3, 702, 702, 3, 3, 3, 702, 3, 3, 3, 3, 3);
      String string0 = student0.getNationality();
      assertEquals("__file", student0.getSecondarySchoolGraduationYear());
      assertNotNull(string0);
      assertEquals("", student0.getAdmissionStr());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals("k", student0.getBirthDate());
      assertEquals("__file", student0.getGender());
      assertEquals("__file", student0.getMaritalStatus());
      assertEquals("T/];x/Gzx(r@(", string0);
      assertEquals("pV#Ggn~z9&.>2", student0.getPlaceOfBirth());
      assertEquals("k", student0.getCurriculumCode());
      assertEquals(", ", student0.getCountry());
      assertEquals("__file", student0.getRace());
      assertEquals("__file", student0.getName());
      assertEquals("", student0.getCourseCode());
      assertEquals("__file", student0.getEmail());
      assertEquals("T/];x/Gzx(r@(", student0.getSecondarySchool());
      assertEquals("__file", student0.getNationalId());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, ", status=", ", status=", (String) null, studentStatus0, ", status=", (String) null, (String) null, "g}75JGx={Rk^)))<F", ", status=", (String) null, (String) null, ": ", "|Hh1P>?;j@PN+\"", (Curriculum) null, (-3786), 0, 0, 0, (-3786), (-1844), (-1844), 0, (-3786), 407.070019434, 0, (-1844), 0, (-1844), (-4), (-4));
      student0.setMobilityTerms(125);
      assertEquals(": ", student0.getCourseCode());
      assertEquals(", status=", student0.getPlaceOfBirth());
      assertEquals("|Hh1P>?;j@PN+\"", student0.getCurriculumCode());
      assertEquals(", status=", student0.getStatusTerm());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      Student student0 = new Student("RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", "", "", "", "", "", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "", "RU94%DgMEv(%yj_KRZ6", studentStatus0, "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", "RU94%DgMEv(%yj_KRZ6", (String) null, "RU94%DgMEv(%yj_KRZ6", "", "", "s.F_", "s.F_", (Curriculum) null, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, (-460), 0, 0, 0, 2, 0);
      student0.setOptionalHours(2);
      assertEquals(2, student0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", "", ", placeOfBirth='", "", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", studentStatus0, ", placeOfBirth='", ", placeOfBirth='", "", "'", "", "ri7P|?dA", ", mandatoryCredits=", "", ", placeOfBirth='", (Curriculum) null, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, (-2090), (-2090), (-2090), (-2090), (-2090), 1060.1224063210616);
      // Undeclared exception!
      try { 
        student0.compareTo(", placeOfBirth='");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.core.models.Student
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Student", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", "", "", "", "", ", placeOfBirth='", "", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", ", placeOfBirth='", studentStatus0, ", placeOfBirth='", ", placeOfBirth='", "", "'", "", "ri7P|?dA", ", mandatoryCredits=", "", ", placeOfBirth='", (Curriculum) null, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, 1682554634, (-2090), (-2090), (-2090), (-2090), (-2090), 1060.1224063210616);
      student0.setStatus(studentStatus0);
      assertEquals(", placeOfBirth='", student0.getCurriculumCode());
      assertEquals(", placeOfBirth='", student0.getGender());
      assertEquals("'", student0.getDisabilities());
      assertEquals("ri7P|?dA", student0.getSecondarySchool());
      assertEquals("", student0.getMaritalStatus());
      assertEquals("", student0.getNationalId());
      assertEquals("", student0.getAffirmativePolicy());
      assertEquals("", student0.getAdmissionTerm());
      assertEquals(", placeOfBirth='", student0.getCountry());
      assertEquals(", placeOfBirth='", student0.getNationality());
      assertEquals("", student0.getName());
      assertEquals(", mandatoryCredits=", student0.getSecondarySchoolGraduationYear());
      assertEquals("", student0.getCourseCode());
      assertEquals(", placeOfBirth='", student0.getRace());
      assertEquals(", placeOfBirth='", student0.getPlaceOfBirth());
      assertEquals(", placeOfBirth='", student0.getStatusStr());
      assertEquals("", student0.getEmail());
      assertEquals(", placeOfBirth='", student0.getAdmissionStr());
  }
}
