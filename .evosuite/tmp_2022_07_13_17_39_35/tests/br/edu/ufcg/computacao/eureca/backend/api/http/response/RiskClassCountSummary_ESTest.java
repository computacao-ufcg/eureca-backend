/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:27:08 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.RiskClassCountSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RiskClassCountSummary_ESTest extends RiskClassCountSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-3986), (-3986), (-3986), (-3986), (-7328), (-7328), (-3986));
      riskClassCountSummary0.add(riskClassCountSummary0);
      assertEquals((-7972), riskClassCountSummary0.getAverage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, (-3336), 1, (-2880));
      int int0 = riskClassCountSummary0.getUnfeasible();
      assertEquals(1, int0);
      assertEquals((-3336), riskClassCountSummary0.getHigh());
      assertEquals((-2880), riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      RiskClassCountSummary riskClassCountSummary1 = new RiskClassCountSummary((-162), 0, 0, 0, 0, (-1200), 0);
      riskClassCountSummary0.add(riskClassCountSummary1);
      int int0 = riskClassCountSummary0.getUnfeasible();
      assertEquals((-1200), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(1701, 1701, 1701, (-2303), 4405, 1, 1701);
      int int0 = riskClassCountSummary0.getSafe();
      assertEquals((-2303), riskClassCountSummary0.getAverage());
      assertEquals(1701, riskClassCountSummary0.getNotApplicable());
      assertEquals(1701, riskClassCountSummary0.getLow());
      assertEquals(1701, riskClassCountSummary0.getInaccurate());
      assertEquals(1, riskClassCountSummary0.getUnfeasible());
      assertEquals(4405, riskClassCountSummary0.getHigh());
      assertEquals(1701, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(3150, (-1221), (-1221), 0, 0, 3150, 0);
      int int0 = riskClassCountSummary0.getSafe();
      assertEquals(3150, riskClassCountSummary0.getUnfeasible());
      assertEquals(3150, riskClassCountSummary0.getInaccurate());
      assertEquals((-1221), riskClassCountSummary0.getLow());
      assertEquals((-1221), int0);
      assertEquals(0, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getHigh());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(861, 861, (-1161), (-1161), 861, (-1618), (-1618));
      riskClassCountSummary0.setNotApplicable(0);
      int int0 = riskClassCountSummary0.getNotApplicable();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(37, 37, 37, (-67), 37, 37, (-67));
      assertEquals((-67), riskClassCountSummary0.getNotApplicable());
      
      riskClassCountSummary0.setNotApplicable(37);
      int int0 = riskClassCountSummary0.getNotApplicable();
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1), 0, 0, (-1), 648, 0, 0);
      int int0 = riskClassCountSummary0.getLow();
      assertEquals((-1), riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, int0);
      assertEquals((-1), riskClassCountSummary0.getAverage());
      assertEquals(648, riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getSafe());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(887, 887, (-744), (-744), (-744), (-744), 887);
      int int0 = riskClassCountSummary0.getInaccurate();
      assertEquals((-744), riskClassCountSummary0.getLow());
      assertEquals((-744), riskClassCountSummary0.getAverage());
      assertEquals(887, int0);
      assertEquals((-744), riskClassCountSummary0.getUnfeasible());
      assertEquals(887, riskClassCountSummary0.getSafe());
      assertEquals(887, riskClassCountSummary0.getNotApplicable());
      assertEquals((-744), riskClassCountSummary0.getHigh());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-162), 0, 0, 0, 0, (-1200), 0);
      int int0 = riskClassCountSummary0.getInaccurate();
      assertEquals(0, riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals((-162), int0);
      assertEquals(0, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals((-1200), riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, 0, 0, (-97));
      int int0 = riskClassCountSummary0.getHigh();
      assertEquals((-97), riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getLow());
      assertEquals(0, int0);
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(0, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, (-1360), 0, 1, (-1360), 0, (-862));
      int int0 = riskClassCountSummary0.getHigh();
      assertEquals((-1360), riskClassCountSummary0.getSafe());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getLow());
      assertEquals((-862), riskClassCountSummary0.getNotApplicable());
      assertEquals((-1360), int0);
      assertEquals(1, riskClassCountSummary0.getAverage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, 0, (-3964), 0);
      int int0 = riskClassCountSummary0.getAverage();
      assertEquals(0, riskClassCountSummary0.getLow());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(0, int0);
      assertEquals((-3964), riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(37, 37, 37, (-67), 37, 37, (-67));
      int int0 = riskClassCountSummary0.getAverage();
      assertEquals(37, riskClassCountSummary0.getLow());
      assertEquals(37, riskClassCountSummary0.getInaccurate());
      assertEquals((-67), riskClassCountSummary0.getNotApplicable());
      assertEquals(37, riskClassCountSummary0.getSafe());
      assertEquals((-67), int0);
      assertEquals(37, riskClassCountSummary0.getUnfeasible());
      assertEquals(37, riskClassCountSummary0.getHigh());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 0, 0, 0, (-2543), (-2543));
      // Undeclared exception!
      try { 
        riskClassCountSummary0.add((RiskClassCountSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.RiskClassCountSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-3986), (-3986), (-3986), (-3986), (-7328), (-7328), (-3986));
      int int0 = riskClassCountSummary0.getNotApplicable();
      assertEquals((-3986), riskClassCountSummary0.getSafe());
      assertEquals((-7328), riskClassCountSummary0.getHigh());
      assertEquals((-3986), riskClassCountSummary0.getInaccurate());
      assertEquals((-3986), riskClassCountSummary0.getLow());
      assertEquals((-3986), int0);
      assertEquals((-7328), riskClassCountSummary0.getUnfeasible());
      assertEquals((-3986), riskClassCountSummary0.getAverage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      int int0 = riskClassCountSummary0.getUnfeasible();
      assertEquals(2204, riskClassCountSummary0.getLow());
      assertEquals(2204, riskClassCountSummary0.getHigh());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(1272, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, int0);
      assertEquals(2204, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getSafe());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      int int0 = riskClassCountSummary0.getSafe();
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(2204, riskClassCountSummary0.getLow());
      assertEquals(0, int0);
      assertEquals(2204, riskClassCountSummary0.getAverage());
      assertEquals(2204, riskClassCountSummary0.getHigh());
      assertEquals(1272, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      int int0 = riskClassCountSummary0.getAverage();
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(2204, riskClassCountSummary0.getHigh());
      assertEquals(2204, int0);
      assertEquals(2204, riskClassCountSummary0.getLow());
      assertEquals(1272, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(0, riskClassCountSummary0.getSafe());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary((-1), (-1), (-1), 1888, 1888, (-1340), 0);
      int int0 = riskClassCountSummary0.getHigh();
      assertEquals((-1340), riskClassCountSummary0.getUnfeasible());
      assertEquals(1888, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getNotApplicable());
      assertEquals(1888, int0);
      assertEquals((-1), riskClassCountSummary0.getSafe());
      assertEquals((-1), riskClassCountSummary0.getInaccurate());
      assertEquals((-1), riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      int int0 = riskClassCountSummary0.getLow();
      assertEquals(2204, riskClassCountSummary0.getHigh());
      assertEquals(2204, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(2204, int0);
      assertEquals(1272, riskClassCountSummary0.getNotApplicable());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      assertEquals(0, riskClassCountSummary0.getSafe());
      
      riskClassCountSummary0.setSafe(1272);
      assertEquals(2204, riskClassCountSummary0.getHigh());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      riskClassCountSummary0.setInaccurate(0);
      assertEquals(2204, riskClassCountSummary0.getLow());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(2204, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(1272, riskClassCountSummary0.getNotApplicable());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(2204, riskClassCountSummary0.getHigh());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      riskClassCountSummary0.setLow((-162));
      int int0 = riskClassCountSummary0.getLow();
      assertEquals((-162), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      int int0 = riskClassCountSummary0.getInaccurate();
      assertEquals(2204, riskClassCountSummary0.getHigh());
      assertEquals(1272, riskClassCountSummary0.getNotApplicable());
      assertEquals(2204, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(0, int0);
      assertEquals(2204, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      assertEquals(2204, riskClassCountSummary0.getHigh());
      
      riskClassCountSummary0.setHigh(0);
      assertEquals(2204, riskClassCountSummary0.getLow());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      riskClassCountSummary0.setUnfeasible(0);
      assertEquals(0, riskClassCountSummary0.getUnfeasible());
      assertEquals(0, riskClassCountSummary0.getSafe());
      assertEquals(2204, riskClassCountSummary0.getAverage());
      assertEquals(0, riskClassCountSummary0.getInaccurate());
      assertEquals(1272, riskClassCountSummary0.getNotApplicable());
      assertEquals(2204, riskClassCountSummary0.getLow());
      assertEquals(2204, riskClassCountSummary0.getHigh());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RiskClassCountSummary riskClassCountSummary0 = new RiskClassCountSummary(0, 0, 2204, 2204, 2204, 0, 1272);
      riskClassCountSummary0.setAverage(4492);
      assertEquals(4492, riskClassCountSummary0.getAverage());
  }
}
