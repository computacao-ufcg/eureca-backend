/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:57:28 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Subject_ESTest extends Subject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("8q|L!-7T{,", "8q|L!-7T{,", "8q|L!-7T{,", "8q|L!-7T{,", (String) null, 0, 0, "8q|L!-7T{,", priorityQueue0, 0, priorityQueue0, set0);
      boolean boolean0 = subject0.isComposed();
      assertEquals(0, subject0.getCredits());
      assertTrue(boolean0);
      assertEquals(0, subject0.getIdealTerm());
      assertEquals(0, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Subject subject0 = new Subject((String) null, (String) null, (String) null, "", (String) null, 0, 2577, (String) null, arrayList0, (-366), (Collection<String>) null, (Collection<String>) null);
      String string0 = subject0.getType();
      assertFalse(subject0.isComposed());
      assertEquals(0, subject0.getCredits());
      assertEquals((-366), subject0.getIdealTerm());
      assertEquals(2577, subject0.getHours());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject((String) null, "Subject{courseCode='", (String) null, "", "", 487, 127, "", treeSet0, 487, treeSet0, treeSet0);
      String string0 = subject0.getType();
      assertEquals("", string0);
      assertEquals(487, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(127, subject0.getHours());
      assertNotNull(string0);
      assertEquals("", subject0.getName());
      assertEquals("", subject0.getAcademicUnit());
      assertEquals("Subject{courseCode='", subject0.getCurriculumCode());
      assertEquals(487, subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject((String) null, "WqA@bWYazBvl", (String) null, (String) null, "WqA@bWYazBvl", 661, 0, (String) null, linkedHashSet0, 661, linkedHashSet0, linkedHashSet0);
      String string0 = subject0.getSubjectCode();
      assertFalse(subject0.isComposed());
      assertEquals(661, subject0.getIdealTerm());
      assertEquals(0, subject0.getHours());
      assertEquals(661, subject0.getCredits());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject((String) null, (String) null, "2;BA", (String) null, (String) null, (-1103), 0, "", vector0, 1201, vector0, (Collection<String>) null);
      assertEquals("2;BA", subject0.getSubjectCode());
      
      subject0.setSubjectCode("");
      subject0.getSubjectCode();
      assertEquals(0, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Subject subject0 = new Subject(", equivalentCodesList=", ", equivalentCodesList=", "", (String) null, "org.apache.commons.io.filefilter.EmptyFileFilter", 0, 0, "41tqpNa", (Collection<String>) null, (-1435), (Collection<String>) null, (Collection<String>) null);
      subject0.getPreRequirementsList();
      assertEquals((-1435), subject0.getIdealTerm());
      assertEquals("", subject0.getSubjectCode());
      assertEquals(", equivalentCodesList=", subject0.getCourseCode());
      assertEquals(0, subject0.getHours());
      assertEquals("org.apache.commons.io.filefilter.EmptyFileFilter", subject0.getType());
      assertFalse(subject0.isComposed());
      assertEquals("41tqpNa", subject0.getName());
      assertEquals(", equivalentCodesList=", subject0.getCurriculumCode());
      assertEquals(0, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject((String) null, (String) null, (String) null, (String) null, "", (-405), (-1874), (String) null, set0, 41, set0, set0);
      String string0 = subject0.getName();
      assertEquals((-405), subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(41, subject0.getIdealTerm());
      assertNull(string0);
      assertEquals((-1874), subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject("k'jP'e9##/l-+J?_", "6UX3dE7XyO", "k'jP'e9##/l-+J?_", "6UX3dE7XyO", "okSXkMR", 2181, (-1159), "", linkedHashSet0, (-1159), linkedHashSet0, linkedHashSet0);
      String string0 = subject0.getName();
      assertEquals("", string0);
      assertEquals("okSXkMR", subject0.getType());
      assertEquals("6UX3dE7XyO", subject0.getCurriculumCode());
      assertEquals("k'jP'e9##/l-+J?_", subject0.getCourseCode());
      assertEquals((-1159), subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(2181, subject0.getCredits());
      assertEquals("6UX3dE7XyO", subject0.getAcademicUnit());
      assertEquals("k'jP'e9##/l-+J?_", subject0.getSubjectCode());
      assertEquals((-1159), subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject("", ", curriculumCode='", "", ", curriculumCode='", "xh1E>aTm~5'% c;", (-859), (-859), "xh1E>aTm~5'% c;", priorityQueue0, 0, priorityQueue0, priorityQueue0);
      int int0 = subject0.getIdealTerm();
      assertEquals(", curriculumCode='", subject0.getAcademicUnit());
      assertEquals((-859), subject0.getCredits());
      assertEquals(0, int0);
      assertEquals("xh1E>aTm~5'% c;", subject0.getType());
      assertEquals("xh1E>aTm~5'% c;", subject0.getName());
      assertFalse(subject0.isComposed());
      assertEquals((-859), subject0.getHours());
      assertEquals("", subject0.getSubjectCode());
      assertEquals("", subject0.getCourseCode());
      assertEquals(", curriculumCode='", subject0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Subject subject0 = new Subject("", "WQI$Ii'&4k4)_X", "", "", "aK(>v\"OcdnA", 0, 0, "WQI$Ii'&4k4)_X", set0, 2862, set0, set0);
      int int0 = subject0.getIdealTerm();
      assertEquals(0, subject0.getCredits());
      assertEquals("", subject0.getAcademicUnit());
      assertEquals(2862, int0);
      assertEquals(0, subject0.getHours());
      assertEquals("aK(>v\"OcdnA", subject0.getType());
      assertFalse(subject0.isComposed());
      assertEquals("", subject0.getSubjectCode());
      assertEquals("WQI$Ii'&4k4)_X", subject0.getCurriculumCode());
      assertEquals("WQI$Ii'&4k4)_X", subject0.getName());
      assertEquals("", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Subject subject0 = new Subject(", equivalentCodesList=", ", equivalentCodesList=", "", (String) null, "org.apache.commons.io.filefilter.EmptyFileFilter", 0, 0, "41tqpNa", (Collection<String>) null, (-1435), (Collection<String>) null, (Collection<String>) null);
      int int0 = subject0.getHours();
      assertEquals("", subject0.getSubjectCode());
      assertEquals("41tqpNa", subject0.getName());
      assertFalse(subject0.isComposed());
      assertEquals(0, subject0.getCredits());
      assertEquals(", equivalentCodesList=", subject0.getCurriculumCode());
      assertEquals((-1435), subject0.getIdealTerm());
      assertEquals("org.apache.commons.io.filefilter.EmptyFileFilter", subject0.getType());
      assertEquals(", equivalentCodesList=", subject0.getCourseCode());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("", "K,&@5*qy#2.", "K,&@5*qy#2.", "K,&@5*qy#2.", "Ne`,G.KB3E:5)fe,v", (-1616), (-2413), "", stack0, (-2413), stack0, stack0);
      int int0 = subject0.getHours();
      assertEquals("Ne`,G.KB3E:5)fe,v", subject0.getType());
      assertEquals("K,&@5*qy#2.", subject0.getCurriculumCode());
      assertFalse(subject0.isComposed());
      assertEquals("", subject0.getCourseCode());
      assertEquals((-2413), int0);
      assertEquals((-2413), subject0.getIdealTerm());
      assertEquals((-1616), subject0.getCredits());
      assertEquals("", subject0.getName());
      assertEquals("K,&@5*qy#2.", subject0.getAcademicUnit());
      assertEquals("K,&@5*qy#2.", subject0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Subject subject0 = new Subject("&4[;xw&qI!!6HkwN;Y", "", "fy0$uo&3bvDmUD7", "&4[;xw&qI!!6HkwN;Y", "The filters must not be null", (-714), (-714), "|BYZKx!r!LO)c|", (Collection<String>) null, 1376, (Collection<String>) null, (Collection<String>) null);
      subject0.getEquivalentCodesList();
      assertEquals("fy0$uo&3bvDmUD7", subject0.getSubjectCode());
      assertEquals(1376, subject0.getIdealTerm());
      assertEquals("", subject0.getCurriculumCode());
      assertEquals("|BYZKx!r!LO)c|", subject0.getName());
      assertEquals("&4[;xw&qI!!6HkwN;Y", subject0.getCourseCode());
      assertEquals((-714), subject0.getCredits());
      assertEquals("&4[;xw&qI!!6HkwN;Y", subject0.getAcademicUnit());
      assertEquals((-714), subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals("The filters must not be null", subject0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Subject subject0 = new Subject("7bG|??npTC[B", ", type='", "7bG|??npTC[B", ", type='", "7bG|??npTC[B", 0, 0, "", arrayList0, 0, arrayList0, arrayList0);
      assertEquals(", type='", subject0.getCurriculumCode());
      
      subject0.setCurriculumCode((String) null);
      subject0.getCurriculumCode();
      assertEquals("7bG|??npTC[B", subject0.getCourseCode());
      assertEquals("7bG|??npTC[B", subject0.getSubjectCode());
      assertEquals(0, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(0, subject0.getHours());
      assertEquals(0, subject0.getIdealTerm());
      assertEquals(", type='", subject0.getAcademicUnit());
      assertEquals("", subject0.getName());
      assertEquals("7bG|??npTC[B", subject0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("$4tDm", "", "$4tDm", "Y+-fic`", "$4tDm", (-1408), (-1408), "", set0, (-1408), stack0, set0);
      String string0 = subject0.getCurriculumCode();
      assertEquals((-1408), subject0.getCredits());
      assertEquals("$4tDm", subject0.getSubjectCode());
      assertEquals("Y+-fic`", subject0.getAcademicUnit());
      assertEquals("$4tDm", subject0.getCourseCode());
      assertEquals((-1408), subject0.getHours());
      assertEquals((-1408), subject0.getIdealTerm());
      assertEquals("", subject0.getName());
      assertEquals("", string0);
      assertEquals("$4tDm", subject0.getType());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject((String) null, "WqA@bWYazBvl", (String) null, (String) null, "WqA@bWYazBvl", 661, 0, (String) null, linkedHashSet0, 661, linkedHashSet0, linkedHashSet0);
      assertEquals(661, subject0.getCredits());
      
      subject0.setCredits(0);
      int int0 = subject0.getCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Subject subject0 = new Subject((String) null, "d)^yA5L,zp", "", "5$njS}?Fk", "5$njS}?Fk", (-744), (-744), "5$njS}?Fk", (Collection<String>) null, (-744), (Collection<String>) null, (Collection<String>) null);
      int int0 = subject0.getCredits();
      assertFalse(subject0.isComposed());
      assertEquals("d)^yA5L,zp", subject0.getCurriculumCode());
      assertEquals((-744), subject0.getIdealTerm());
      assertEquals("5$njS}?Fk", subject0.getType());
      assertEquals("", subject0.getSubjectCode());
      assertEquals((-744), subject0.getHours());
      assertEquals("5$njS}?Fk", subject0.getAcademicUnit());
      assertEquals("5$njS}?Fk", subject0.getName());
      assertEquals((-744), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Subject subject0 = new Subject((String) null, (String) null, (String) null, (String) null, "", (-405), (-1874), (String) null, set0, 41, set0, set0);
      String string0 = subject0.getCourseCode();
      assertNull(string0);
      assertEquals((-405), subject0.getCredits());
      assertEquals((-1874), subject0.getHours());
      assertEquals(41, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject((String) null, (String) null, "2;BA", (String) null, (String) null, (-1103), 0, "", vector0, 1201, vector0, (Collection<String>) null);
      subject0.setCourseCode("");
      subject0.getCourseCode();
      assertEquals((-1103), subject0.getCredits());
      assertEquals("", subject0.getName());
      assertEquals("2;BA", subject0.getSubjectCode());
      assertEquals(0, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(1201, subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject((String) null, (String) null, "2;BA", (String) null, (String) null, (-1103), 0, "", vector0, 1201, vector0, (Collection<String>) null);
      Collection<String> collection0 = subject0.getCoRequirementsList();
      assertEquals("2;BA", subject0.getSubjectCode());
      assertNull(collection0);
      assertEquals("", subject0.getName());
      assertEquals(0, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals((-1103), subject0.getCredits());
      assertEquals(1201, subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Subject subject0 = new Subject("", "", "", (String) null, ": ", 0, 0, ")/8", (Collection<String>) null, 6, (Collection<String>) null, (Collection<String>) null);
      String string0 = subject0.getAcademicUnit();
      assertEquals(0, subject0.getCredits());
      assertNull(string0);
      assertEquals(6, subject0.getIdealTerm());
      assertEquals(")/8", subject0.getName());
      assertEquals(0, subject0.getHours());
      assertEquals("", subject0.getCurriculumCode());
      assertFalse(subject0.isComposed());
      assertEquals("", subject0.getSubjectCode());
      assertEquals(": ", subject0.getType());
      assertEquals("", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("", "", "", "", ", academicUnit='", (-765), 2, "", treeSet0, 0, treeSet0, treeSet0);
      String string0 = subject0.getAcademicUnit();
      assertEquals(", academicUnit='", subject0.getType());
      assertEquals(0, subject0.getIdealTerm());
      assertEquals("", string0);
      assertEquals("", subject0.getName());
      assertEquals(2, subject0.getHours());
      assertEquals((-765), subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals("", subject0.getCurriculumCode());
      assertEquals("", subject0.getCourseCode());
      assertEquals("", subject0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject(", gype=+", ", gype=+", ", gype=+", ", gype=+", ", gype=+", 124, 124, ", gype=+", linkedHashSet0, 124, linkedHashSet0, linkedHashSet0);
      Subject subject1 = new Subject(", gype=+", ", gype=+", ", gype=+", (String) null, ", gype=+", 124, 124, ", gype=+", linkedHashSet0, 124, linkedHashSet0, linkedHashSet0);
      assertTrue(subject1.equals((Object)subject0));
      
      subject1.setSubjectCode(", name='");
      boolean boolean0 = subject0.equals(subject1);
      assertFalse(subject1.equals((Object)subject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("3acAOWf:Ajm&", "3acAOWf:Ajm&", "3acAOWf:Ajm&", "3acAOWf:Ajm&", "3acAOWf:Ajm&", (-191), (-191), "3acAOWf:Ajm&", set0, (-191), set0, set0);
      Subject subject1 = new Subject("3acAOWf:Ajm&", "&jM?rcd<Kwd ", "3acAOWf:Ajm&", "3acAOWf:Ajm&", "3acAOWf:Ajm&", (-191), (-191), "3acAOWf:Ajm&", set0, (-191), set0, set0);
      boolean boolean0 = subject0.equals(subject1);
      assertEquals("3acAOWf:Ajm&", subject1.getAcademicUnit());
      assertEquals("3acAOWf:Ajm&", subject1.getCourseCode());
      assertEquals((-191), subject1.getHours());
      assertFalse(boolean0);
      assertTrue(subject1.isComposed());
      assertEquals("3acAOWf:Ajm&", subject1.getName());
      assertEquals("3acAOWf:Ajm&", subject1.getSubjectCode());
      assertEquals("3acAOWf:Ajm&", subject1.getType());
      assertEquals((-191), subject1.getCredits());
      assertEquals((-191), subject1.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject(", gype=+", ", gype=+", ", gype=+", ", gype=+", ", gype=+", 124, 124, ", gype=+", linkedHashSet0, 124, linkedHashSet0, linkedHashSet0);
      Subject subject1 = new Subject(", gype=+", ", gype=+", ", gype=+", (String) null, ", gype=+", 124, 124, ", gype=+", linkedHashSet0, 124, linkedHashSet0, linkedHashSet0);
      boolean boolean0 = subject0.equals(subject1);
      assertEquals(124, subject1.getHours());
      assertEquals(124, subject1.getIdealTerm());
      assertFalse(subject1.isComposed());
      assertEquals(124, subject1.getCredits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      Subject subject1 = new Subject((String) null, "", "44i2-=nupm/(Qa$<=", " )by&l7Vv5Dq<Yg", "?9J5h[9", 2, 3, "44i2-=nupm/(Qa$<=", treeSet0, 615, treeSet0, treeSet0);
      boolean boolean0 = subject0.equals(subject1);
      assertEquals(615, subject1.getIdealTerm());
      assertEquals("vi'S[5`r(3t1X8", subject0.getCourseCode());
      assertEquals(" )by&l7Vv5Dq<Yg", subject0.getAcademicUnit());
      assertEquals(3, subject1.getHours());
      assertEquals("44i2-=nupm/(Qa$<=", subject1.getSubjectCode());
      assertEquals(2, subject1.getCredits());
      assertEquals("?9J5h[9", subject1.getType());
      assertFalse(boolean0);
      assertEquals("v)|n2Z8>A", subject0.getSubjectCode());
      assertEquals("44i2-=nupm/(Qa$<=", subject1.getName());
      assertFalse(subject1.isComposed());
      assertEquals("vi'S[5`r(3t1X8", subject0.getName());
      assertEquals("", subject1.getCurriculumCode());
      assertEquals("v)|n2Z8>A", subject0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      Object object0 = new Object();
      boolean boolean0 = subject0.equals(object0);
      assertEquals("vi'S[5`r(3t1X8", subject0.getType());
      assertEquals("vi'S[5`r(3t1X8", subject0.getCourseCode());
      assertEquals("v)|n2Z8>A", subject0.getCurriculumCode());
      assertEquals("vi'S[5`r(3t1X8", subject0.getName());
      assertFalse(boolean0);
      assertFalse(subject0.isComposed());
      assertEquals(" )by&l7Vv5Dq<Yg", subject0.getAcademicUnit());
      assertEquals(31, subject0.getHours());
      assertEquals("v)|n2Z8>A", subject0.getSubjectCode());
      assertEquals((-2872), subject0.getCredits());
      assertEquals((-2872), subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      boolean boolean0 = subject0.equals(subject0);
      assertEquals(" )by&l7Vv5Dq<Yg", subject0.getAcademicUnit());
      assertEquals((-2872), subject0.getIdealTerm());
      assertEquals("v)|n2Z8>A", subject0.getSubjectCode());
      assertEquals("vi'S[5`r(3t1X8", subject0.getName());
      assertTrue(boolean0);
      assertFalse(subject0.isComposed());
      assertEquals((-2872), subject0.getCredits());
      assertEquals(31, subject0.getHours());
      assertEquals("vi'S[5`r(3t1X8", subject0.getCourseCode());
      assertEquals("v)|n2Z8>A", subject0.getCurriculumCode());
      assertEquals("vi'S[5`r(3t1X8", subject0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      boolean boolean0 = subject0.equals((Object) null);
      assertEquals((-2872), subject0.getCredits());
      assertEquals("vi'S[5`r(3t1X8", subject0.getType());
      assertEquals(31, subject0.getHours());
      assertEquals("v)|n2Z8>A", subject0.getCurriculumCode());
      assertEquals("vi'S[5`r(3t1X8", subject0.getName());
      assertEquals("v)|n2Z8>A", subject0.getSubjectCode());
      assertEquals((-2872), subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals(" )by&l7Vv5Dq<Yg", subject0.getAcademicUnit());
      assertFalse(boolean0);
      assertEquals("vi'S[5`r(3t1X8", subject0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("l4|HvZYa'#w,X~{`{");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      subject0.setCoRequirementsList(set0);
      assertEquals(109, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(109, subject0.getIdealTerm());
      assertEquals(109, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Subject subject0 = new Subject(", gype=+", ", gype=+", ", gype=+", ", gype=+", ", gype=+", 124, 124, ", gype=+", linkedHashSet0, 124, linkedHashSet0, linkedHashSet0);
      subject0.setIdealTerm(124);
      assertEquals(124, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals(124, subject0.getHours());
      assertEquals(124, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      subject0.getName();
      assertEquals(109, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(109, subject0.getIdealTerm());
      assertEquals(109, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      subject0.getCourseCode();
      assertEquals(109, subject0.getIdealTerm());
      assertEquals(109, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(109, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject(", equivalentCodesList=", ", equivalentCodesList=", ", equivalentCodesList=", ", equivalentCodesList=", ", equivalentCodesList=", 8195, 8195, ", equivalentCodesList=", priorityQueue0, 8195, priorityQueue0, treeSet0);
      subject0.getEquivalentCodesList();
      assertEquals(8195, subject0.getHours());
      assertEquals(8195, subject0.getCredits());
      assertFalse(subject0.isComposed());
      assertEquals(8195, subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("3acAO6mOA%m4", "3acAO6mOA%m4", "3acAO6mOA%m4", "3acAO6mOA%m4", "3acAO6mOA%m4", (-165), (-165), "3acAO6mOA%m4", set0, (-165), set0, set0);
      int int0 = subject0.getIdealTerm();
      assertEquals((-165), subject0.getCredits());
      assertEquals((-165), int0);
      assertTrue(subject0.isComposed());
      assertEquals((-165), subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Subject subject0 = new Subject(", equivalentCodesList=", ", equivalentCodesList=", ", equivalentCodesList=", ", equivalentCodesList=", ", equivalentCodesList=", 8195, 8195, ", equivalentCodesList=", priorityQueue0, 8195, priorityQueue0, treeSet0);
      subject0.setAcademicUnit(", equivalentCodesList=");
      assertEquals(8195, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(8195, subject0.getIdealTerm());
      assertEquals(8195, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      subject0.getCurriculumCode();
      assertFalse(subject0.isComposed());
      assertEquals(109, subject0.getIdealTerm());
      assertEquals(109, subject0.getCredits());
      assertEquals(109, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      int int0 = subject0.getCredits();
      assertEquals(109, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(109, subject0.getIdealTerm());
      assertEquals(109, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", 1528, 1528, "{y.rzXA&kfTGVfu)?y!", stack0, 1528, stack0, stack0);
      boolean boolean0 = subject0.isComposed();
      assertEquals(1528, subject0.getHours());
      assertEquals(1528, subject0.getIdealTerm());
      assertFalse(boolean0);
      assertEquals(1528, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      subject0.getType();
      assertEquals(109, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals(109, subject0.getCredits());
      assertEquals(109, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      String string0 = subject0.toString();
      assertFalse(subject0.isComposed());
      assertEquals("Subject{courseCode='vi'S[5`r(3t1X8', curriculumCode='v)|n2Z8>A', subjectCode='v)|n2Z8>A', academicUnit=' )by&l7Vv5Dq<Yg', type='vi'S[5`r(3t1X8', credits=-2872, hours=31, name='vi'S[5`r(3t1X8', equivalentCodesList=[], idealTerm=-2872, preRequirementsList=[], coRequirementsList=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      subject0.setHours(615);
      assertEquals(615, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      int int0 = subject0.getHours();
      assertFalse(subject0.isComposed());
      assertEquals(109, subject0.getCredits());
      assertEquals(109, subject0.getIdealTerm());
      assertEquals(109, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", 1528, 1528, "{y.rzXA&kfTGVfu)?y!", stack0, 1528, stack0, stack0);
      subject0.setType("{y.rzXA&kfTGVfu)?y!");
      assertFalse(subject0.isComposed());
      assertEquals(1528, subject0.getIdealTerm());
      assertEquals(1528, subject0.getCredits());
      assertEquals(1528, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      subject0.hashCode();
      assertEquals("v)|n2Z8>A", subject0.getSubjectCode());
      assertEquals(" )by&l7Vv5Dq<Yg", subject0.getAcademicUnit());
      assertEquals("vi'S[5`r(3t1X8", subject0.getName());
      assertFalse(subject0.isComposed());
      assertEquals("vi'S[5`r(3t1X8", subject0.getType());
      assertEquals((-2872), subject0.getCredits());
      assertEquals("v)|n2Z8>A", subject0.getCurriculumCode());
      assertEquals("vi'S[5`r(3t1X8", subject0.getCourseCode());
      assertEquals(31, subject0.getHours());
      assertEquals((-2872), subject0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", 1528, 1528, "{y.rzXA&kfTGVfu)?y!", stack0, 1528, stack0, stack0);
      subject0.setName("{y.rzXA&kfTGVfu)?y!");
      assertEquals(1528, subject0.getIdealTerm());
      assertEquals(1528, subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals(1528, subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Subject subject0 = new Subject("l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", "l4|HvZYa'#w,X~{`{", 109, 109, "l4|HvZYa'#w,X~{`{", vector0, 109, vector0, vector0);
      subject0.getCoRequirementsList();
      assertEquals(109, subject0.getCredits());
      assertEquals(109, subject0.getIdealTerm());
      assertEquals(109, subject0.getHours());
      assertFalse(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", 1528, 1528, "{y.rzXA&kfTGVfu)?y!", stack0, 1528, stack0, stack0);
      subject0.getPreRequirementsList();
      assertEquals(1528, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals(1528, subject0.getCredits());
      assertEquals(1528, subject0.getHours());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Subject subject0 = new Subject("vi'S[5`r(3t1X8", "v)|n2Z8>A", "v)|n2Z8>A", " )by&l7Vv5Dq<Yg", "vi'S[5`r(3t1X8", (-2872), 31, "vi'S[5`r(3t1X8", treeSet0, (-2872), treeSet0, treeSet0);
      subject0.setCourseCode((String) null);
      Subject subject1 = new Subject((String) null, "", "44i2-=nupm/(Qa$<=", " )by&l7Vv5Dq<Yg", "?9J5h[9", 2, 3, "44i2-=nupm/(Qa$<=", treeSet0, 615, treeSet0, treeSet0);
      // Undeclared exception!
      try { 
        subject0.equals(subject1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Subject subject0 = new Subject("3acAOWf:Ajm&", "3acAOWf:Ajm&", "3acAOWf:Ajm&", "3acAOWf:Ajm&", "3acAOWf:Ajm&", (-191), (-191), "3acAOWf:Ajm&", set0, (-191), set0, set0);
      subject0.getSubjectCode();
      assertEquals((-191), subject0.getCredits());
      assertEquals((-191), subject0.getHours());
      assertEquals((-191), subject0.getIdealTerm());
      assertTrue(subject0.isComposed());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Subject subject0 = new Subject("{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", "{y.rzXA&kfTGVfu)?y!", 1528, 1528, "{y.rzXA&kfTGVfu)?y!", stack0, 1528, stack0, stack0);
      subject0.getAcademicUnit();
      assertEquals(1528, subject0.getCredits());
      assertEquals(1528, subject0.getIdealTerm());
      assertFalse(subject0.isComposed());
      assertEquals(1528, subject0.getHours());
  }
}
