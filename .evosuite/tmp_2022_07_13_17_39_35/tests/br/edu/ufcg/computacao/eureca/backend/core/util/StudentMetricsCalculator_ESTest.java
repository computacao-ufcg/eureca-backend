/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:52:44 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetricsSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.CostClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.RiskClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentStatus;
import br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.apache.log4j.LogManager;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentMetricsCalculator_ESTest extends StudentMetricsCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSet<Student> hashSet0 = new HashSet<Student>();
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Curriculum curriculum0 = new Curriculum((String) null, "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 218, 0, 218, 0, 0, 0, 0, 0, 1572, set0, set0, set0, set0, set0);
      Student student0 = new Student((String) null, ".N", "amBx;LE-2-Z[", "", "}Thr_<{1fNj0jQ[w(#<", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "Z", "", "kYA", "}Thr_<{1fNj0jQ[w(#<", "#;h2<)oflQWoK&wcl", "", studentStatus0, "", "Jq]H1_avfO", "Snm2q%\"l*CJ@/xT>34f", "", "", "Snm2q%\"l*CJ@/xT>34f", "", "", "", curriculum0, 218, 1952257861, 102, 12288, 941, (-2080374784), 3830, 102, 941, (-0.5824665676077266), (-948), 941, 12288, 3830, 3830, (-0.5824665676077266));
      hashSet0.add(student0);
      Student student1 = new Student("", "", "", "+3gx6&PFPFUUdBQM.", (String) null, "", "", "", (String) null, (String) null, (String) null, "amBx;LE-2-Z[", studentStatus0, "org.apache.commons.io.filefilter.SuffixFileFilter", ">~.(_lM:`q+x", "org.apache.commons.io.filefilter.SuffixFileFilter", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", "", "Snm2q%\"l*CJ@/xT>34f", ">~.(_lM:`q+x", curriculum0, 0, 1572, 0, 218, 3830, 12288, (-1503), 218, (-2259.97), 218, 0, 0, 218, 0, 63, (-2249.674));
      hashSet0.add(student1);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(hashSet0);
      assertEquals(RiskClass.UNFEASIBLE, studentMetricsSummary0.getRiskClass());
      assertEquals((-474.0), studentMetricsSummary0.getTermsCount(), 0.01);
      assertEquals(CostClass.INACCURATE, studentMetricsSummary0.getCostClass());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("`R_[ebs55%_@ZHV!-", "`R_[ebs55%_@ZHV!-", "`R_[ebs55%_@ZHV!-", (String) null, "h){U5Xp#LkEi0G4T.", (String) null, (String) null, (String) null, "`R_[ebs55%_@ZHV!-", "aj_GTPH#H", (String) null, "aj_GTPH#H", studentStatus0, "com.google.common.collect.Maps$EntryFunction", "", "com.google.common.collect.Maps$EntryFunction", "h){U5Xp#LkEi0G4T.", "aj_GTPH#H", "h){U5Xp#LkEi0G4T.", "`R_[ebs55%_@ZHV!-", "", "", (Curriculum) null, 0, 13, 0, 13, 0, 32, 0, 13, 0, 13, 768, 5000, 0, 0, 5000, 32);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertNull(studentMetrics0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Student student0 = new Student("_s Jagw", "_s Jagw", "", "com.google.common.primitives.Shorts$ShortConverter", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "R@GDq$2)S;'", "R@GDq$2)S;'", "R@GDq$2)S;'", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", (String) null, "_s Jagw", "com.google.common.primitives.Shorts$ShortConverter", studentStatus0, "com.google.common.base.CharMatcher$Digit", "R@GDq$2)S;'", "com.google.common.base.CharMatcher$Digit", "_s Jagw", "com.google.common.primitives.Shorts$ShortConverter", "Py7W=\"u=G_", "-c]\"nIYPy|ESCEr&", "com.google.common.base.Converter", "com.google.common.primitives.Shorts$ShortConverter", (Curriculum) null, 0, 0, 0, 0, 0, 0, 3595, 1.0, 1.0, 0, 0, (-1), (-699), 3595, (-612), 1277.5276579);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertNotNull(studentMetrics0);
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(3595.0, studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Curriculum curriculum0 = new Curriculum("V$6eI{%Kgtk$:G6Bz:g", "4kw idj", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, arrayList0, arrayList0, (-1), (-5110), 8, (-5110), (-1), (-5110), 1, 8, (-5110), 20, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      Student student0 = new Student("u]Vg6EeMwI0", "u]Vg6EeMwI0", "u]Vg6EeMwI0", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "u]Vg6EeMwI0", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "A{`3]", "A{`3]", "com.google.common.collect.Range$LowerBoundFn", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "u]Vg6EeMwI0", "", studentStatus0, "u]Vg6EeMwI0", "u]Vg6EeMwI0", "A{`3]", "com.google.common.collect.Range$LowerBoundFn", "INFO", "u]Vg6EeMwI0", "A{`3]", "t?k;bf/scd;)pA", "", curriculum0, 20, 8, 1289, 8, 20, 117, 8, 0.5, (-661.4670672193262), 1.0, 1108, 1289, 1, 3574, 1289, 4.0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(0.007207207207207207, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.11981981981981982, studentMetrics0.getPace(), 0.01);
      assertEquals(16.625, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(16.680296631990934, studentMetrics0.getCost(), 0.01);
      assertEquals((-85236.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(8.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(22.241763976776046, studentMetrics0.getRisk(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(2040, 3064);
      Curriculum curriculum0 = new Curriculum("", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 0, 3064, (-1), 0, 1259, (-1), linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      Student student0 = new Student("~fWOGl`?Y", "~fWOGl`?Y", ", mc=", "~fWOGl`?Y", "~fWOGl`?Y", "`6SKOxs6k-9j%u);Tl", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "", (String) null, "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "-pVe#", ", mc=", studentStatus0, (String) null, "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", (String) null, "-pVe#", "", (String) null, "`6SKOxs6k-9j%u);Tl", "C&jqn)U@SJ]", curriculum0, (-441), 0, 0, 0, 1073741824, 91, 12, 1259, 1073741824, 12, (-2493), 12, 3283, 1073741824, 0, 0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(0.0029462312791554137, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.022342253866928553, studentMetrics0.getPace(), 0.01);
      assertEquals(7.583333333333333, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(12.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "GRADUADO", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 25, 25, 25, 25, 25, 25, (-748), (-748), 0, 0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      Student student0 = new Student("", "", "", "", "unexpected object type ", "", "", "", "", "WARN", "", "", studentStatus0, "", "", "", "unexpected object type ", "", "", "", "'5AJbj:cUh3,sKy5ROz", "", curriculum0, 25, 62, 62, (-2722), 32, 2869, 25, 4.9E-324, 0.0, (-600.1766717604679), (-1), 25, 102, 102, (-1), (-1321.57));
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(1.0295566502463054, studentMetrics0.getPace(), 0.01);
      assertEquals((-0.5824665676077266), studentMetrics0.getRisk(), 0.01);
      assertEquals(3.885167464114833, studentMetrics0.getCost(), 0.01);
      assertEquals(25.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.12315270935960591, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(98.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(8.36, studentMetrics0.getSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Curriculum curriculum0 = new Curriculum("", "null", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 881, 881, (-2188), 881, (-2188), (-2188), 881, 0, 881, 881, set0, set0, set0, set0, set0);
      Student student0 = new Student("\" variable.", (String) null, (String) null, "org.apache.commons.io.filefilter.RegexFileFilter", "\" variable.", "null", "org.apache.commons.io.filefilter.RegexFileFilter", "\" variable.", "null", "\" variable.", "\" variable.", "{9!j\"dH{", studentStatus0, "", (String) null, "02aC:I}mv;+.h*D", "{9!j\"dH{", "", (String) null, "", "\" variable.", "", curriculum0, 881, 0, 0, 0, 1, 0, 0, 0.0, 0, 0.0, 34, 20, 0, (-2188), 1187, 3099.957);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(6.090313323196196E-4, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Curriculum curriculum0 = new Curriculum("Ddq![XAOMP", (String) null, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 1646, 1646, (-2559), 1646, 1646, 0, 1, 966, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      Student student0 = new Student("org.apache.log4j.helpers.LogLog", "7f", "org.apache.log4j.helpers.LogLog", "7f", "7f", "", "Y", "7f", "Y", "", "7f", "7f", studentStatus0, "", "", "Y", "", "Ddq![XAOMP", (String) null, "", ":ArsPE}u?XE", "PWzpeFn:M,-B)", curriculum0, 0, 0, 1548, 1, (-1874), (-2421), (-2421), (-2559), 0, 1548, 1, (-2421), 1548, 0, 64, 0.0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-2421.0), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals((-0.781401356151114), studentMetrics0.getPace(), 0.01);
      assertEquals((-0.7817242492734905), studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(3085, 2143475124, 1171, (Curriculum) null);
      assertNull(studentMetrics0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 107, 0, 0, 0, 0, 0, 489, 0, (-5258), 0, arrayList0, arrayList0, arrayList0, arrayList0, arrayList0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(10000, 8192, 0, curriculum0);
      assertEquals(0.0, studentMetrics0.getPace(), 0.01);
      assertEquals(10000.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(1.220703125, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(2.6418204523023763E-6, studentMetrics0.getFeasibility(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      Curriculum curriculum0 = new Curriculum("l%A}<z4!6$", "l%A}<z4!6$", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 10, (-10), (-10), 10, 10, (-10), (-10), (-10), (-10), 10, priorityQueue0, priorityQueue0, priorityQueue0, priorityQueue0, priorityQueue0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(10, 10, 10, curriculum0);
      assertEquals(1.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(-0.0, studentMetrics0.getCost(), 0.01);
      assertEquals(1.0, studentMetrics0.getPace(), 0.01);
      assertEquals(-0.0, studentMetrics0.getRisk(), 0.01);
      assertEquals(1.0, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(10.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(0.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 642, 1214, 642, 0, 0, 642, 1214, 0, 642, 1214, linkedList0, linkedList0, linkedList0, (Collection<String>) null, (Collection<String>) null);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(3363, 3363, 1214, curriculum0);
      assertEquals(6920.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals(3363.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(10.778680195230104, studentMetrics0.getCost(), 0.01);
      assertEquals(0.3609872137972049, studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.3609872137972049, studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(8.815286624203821, studentMetrics0.getRisk(), 0.01);
      assertEquals(1.0, studentMetrics0.getAverageLoad(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Curriculum curriculum0 = new Curriculum("", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 642, 1214, 642, 0, 0, 642, 1214, 0, 642, 1214, linkedList0, linkedList0, linkedList0, (Collection<String>) null, (Collection<String>) null);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(0, 642, 3363, curriculum0);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.6076433121019108, studentMetrics0.getRisk(), 0.01);
      assertEquals(0.0, studentMetrics0.getFeasibility(), 0.01);
      assertEquals(0.0, studentMetrics0.getAverageLoad(), 0.01);
      assertEquals(477.0, studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals(5.238317757009346, studentMetrics0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "org.apache.commons.io.filefilter.MagicNumberFileFilter", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 1039, 1039, 1039, 0, 0, 0, 0, 0, (-2730), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(0, 0, 0, curriculum0);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals(0.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Stack<String> stack0 = new Stack<String>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Curriculum curriculum0 = new Curriculum("3TUyvFZq", ":", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, (-2585), 2144478314, (-2144423753), 140, (-2144423753), (-853), (-2585), 68, 1, 110, stack0, stack0, stack0, stack0, set0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics((-2144423753), (-2144423753), (-2144423753), curriculum0);
      assertEquals((-2.144423753E9), studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getSuccessRate(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashSet<Student> hashSet0 = new HashSet<Student>();
      hashSet0.add((Student) null);
      // Undeclared exception!
      try { 
        StudentMetricsCalculator.computeMetricsSummary(hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        StudentMetricsCalculator.computeMetrics((Student) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(1.0, 0.0);
      assertEquals(CostClass.UNACCEPTABLE, costClass0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(0.0, 4.0);
      assertEquals(CostClass.INACCURATE, costClass0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass((-809.2), 1421.4623439997613);
      assertEquals(CostClass.NOT_APPLICABLE, costClass0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(1.0, 1.0);
      assertEquals(RiskClass.UNFEASIBLE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass((-809.2), (-809.2));
      assertEquals(RiskClass.NOT_APPLICABLE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      Student student0 = new Student("", (String) null, "Tu-YT%C0B}$%6GY8>z%", (String) null, "Tu-YT%C0B}$%6GY8>z%", "Tu-YT%C0B}$%6GY8>z%", "`l){v", "`l){v", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "com.google.common.base.CharMatcher$IsNot", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", studentStatus0, "", "", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "`l){v", "", "", "", "com.google.common.base.CharMatcher$IsNot", "com.google.common.base.CharMatcher$IsNot", (Curriculum) null, 0, 0, 0, 0, 0, 924, 607, 1421.4623439997613, (-347.94145003), 924, 0, 0, 0, (-1846), 1, 0.0);
      StudentMetrics studentMetrics0 = StudentMetricsCalculator.computeMetrics(student0);
      assertEquals((-1.0), studentMetrics0.getAverageLoad(), 0.01);
      assertEquals((-1.0), studentMetrics0.getFeasibility(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCourseDurationPrediction(), 0.01);
      assertEquals((-1.0), studentMetrics0.getCost(), 0.01);
      assertEquals((-1.0), studentMetrics0.getRisk(), 0.01);
      assertEquals(607.0, studentMetrics0.getAttemptedCredits(), 0.01);
      assertEquals(1.5222405271828665, studentMetrics0.getSuccessRate(), 0.01);
      assertNotNull(studentMetrics0);
      assertEquals((-1.0), studentMetrics0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashSet<Student> hashSet0 = new HashSet<Student>();
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Curriculum curriculum0 = new Curriculum((String) null, "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 232, 0, 232, 0, 0, 0, 0, 0, 0, set0, set0, set0, set0, set0);
      Student student0 = new Student("y", "y", "y", "y", "y", "y", "", "y", "y", "y", "y", "", studentStatus0, "y", "", "y", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "br.edu.ufcg.computacao.eureca.backend.core.util.StudentMetricsCalculator", "y", "y", "", curriculum0, 0, 232, 0, 232, 232, 0, (-1532), 232, (-1532), 232, 232, 0, 232, 232, 63, 0);
      hashSet0.add(student0);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(hashSet0);
      assertEquals(RiskClass.UNFEASIBLE, studentMetricsSummary0.getRiskClass());
      assertEquals(CostClass.INACCURATE, studentMetricsSummary0.getCostClass());
      assertNotNull(studentMetricsSummary0);
      assertEquals(232.0, studentMetricsSummary0.getTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Student> vector0 = new Vector<Student>();
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(vector0);
      assertNull(studentMetricsSummary0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(3405, 856);
      assertEquals(CostClass.VERY_HIGH, costClass0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(11.462465838171424, 4.0);
      assertEquals(CostClass.HIGH, costClass0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(890.0, 856);
      assertEquals(CostClass.REGULAR, costClass0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CostClass costClass0 = StudentMetricsCalculator.computeCostClass(1204.16900035, 1204.16900035);
      assertEquals(CostClass.ADEQUATE, costClass0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashSet<Student> hashSet0 = new HashSet<Student>();
      StudentStatus studentStatus0 = StudentStatus.DROPOUT;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Locale locale0 = new Locale("7");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Curriculum curriculum0 = new Curriculum("7", "7", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, set0, set0, set0, set0, set0);
      Student student0 = new Student("7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", studentStatus0, "7", "7", "7", "7", "7", "7", "7", "7", "7", curriculum0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      hashSet0.add(student0);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(hashSet0);
      assertEquals(CostClass.INACCURATE, studentMetricsSummary0.getCostClass());
      assertNotNull(studentMetricsSummary0);
      assertEquals(RiskClass.SAFE, studentMetricsSummary0.getRiskClass());
      assertEquals(0.0, studentMetricsSummary0.getTermsCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(2615.546320201279, (-1221.102629951456));
      assertEquals(RiskClass.HIGH, riskClass0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(2328.22163305222, (-1455.980739676466));
      assertEquals(RiskClass.AVERAGE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(2195, (-2983.4238516135392));
      assertEquals(RiskClass.LOW, riskClass0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<Student> stack0 = new Stack<Student>();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Curriculum curriculum0 = new Curriculum((String) null, "3.m_Xb)aeJb_%", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 1437, 0, (-284), (-1), 1437, 46, (-1), 66, 1437, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0, arrayDeque0);
      Student student0 = new Student("a2xJ]:`5|x)5", ", gender='", "Y4*!7b]X@c]/", "Y4*!7b]X@c]/", "Y4*!7b]X@c]/", "] class: [", "Y4*!7b]X@c]/", ", gender='", "Jy GFeWDAJNy", "", (String) null, "", studentStatus0, "Y4*!7b]X@c]/", "<0.v_(q!", "] class: [", "u", (String) null, "", "/{S>K?%1;", "", "com.google.common.util.concurrent.UncheckedExecutionException", curriculum0, 306654252, 66, 1437, 0, 306654252, 4028, 4028, 0.0, 3688.445882, 0, 1, 0, 4028, (-718), (-273), (-2119.0));
      stack0.add(student0);
      StudentMetricsSummary studentMetricsSummary0 = StudentMetricsCalculator.computeMetricsSummary(stack0);
      assertEquals(1.0, studentMetricsSummary0.getTermsCount(), 0.01);
      assertEquals(CostClass.UNACCEPTABLE, studentMetricsSummary0.getCostClass());
      assertEquals(RiskClass.UNFEASIBLE, studentMetricsSummary0.getRiskClass());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(0.5, 0.5);
      assertEquals(RiskClass.SAFE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RiskClass riskClass0 = StudentMetricsCalculator.computeRiskClass(10, 1026.57276004589);
      assertEquals(RiskClass.INACCURATE, riskClass0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StudentMetricsCalculator studentMetricsCalculator0 = new StudentMetricsCalculator();
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      doReturn((LoggerRepository) null).when(repositorySelector0).getLoggerRepository();
      LogManager.setRepositorySelector(repositorySelector0, studentMetricsCalculator0);
      StudentMetricsCalculator studentMetricsCalculator1 = null;
      try {
        studentMetricsCalculator1 = new StudentMetricsCalculator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.LogManager", e);
      }
  }
}
