/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:39:18 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsStatisticsSummaryResponse;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsSummary;
import br.edu.ufcg.computacao.eureca.backend.constants.EnrollmentsGlossaryFields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentsStatisticsSummaryResponse_ESTest extends EnrollmentsStatisticsSummaryResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse(", optional=", ", optional=", (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null);
      EnrollmentsSummary enrollmentsSummary0 = enrollmentsStatisticsSummaryResponse0.getOptional();
      assertNull(enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse(", optional=", ", optional=", (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null);
      EnrollmentsSummary enrollmentsSummary0 = enrollmentsStatisticsSummaryResponse0.getMandatory();
      assertNull(enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null);
      EnrollmentsSummary enrollmentsSummary0 = enrollmentsStatisticsSummaryResponse0.getElective();
      assertNull(enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse((String) null, (String) null, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      String string0 = enrollmentsStatisticsSummaryResponse0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse(", optional=", ", optional=", (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null);
      String string0 = enrollmentsStatisticsSummaryResponse0.getCurriculumCode();
      assertEquals(", optional=", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse((String) null, (String) null, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      String string0 = enrollmentsStatisticsSummaryResponse0.getCourseCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("iSUf", "a@y1;Yedn[P!vE@!", (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null);
      String string0 = enrollmentsStatisticsSummaryResponse0.getCourseCode();
      assertEquals("iSUf", string0);
      assertEquals("a@y1;Yedn[P!vE@!", enrollmentsStatisticsSummaryResponse0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null, (EnrollmentsSummary) null);
      EnrollmentsSummary enrollmentsSummary0 = enrollmentsStatisticsSummaryResponse0.getComplementary();
      assertNull(enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsSummary enrollmentsSummary1 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      enrollmentsStatisticsSummaryResponse0.setMandatory(enrollmentsSummary1);
      assertEquals("", enrollmentsStatisticsSummaryResponse0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      enrollmentsStatisticsSummaryResponse0.setCurriculumCode("");
      assertEquals("", enrollmentsStatisticsSummaryResponse0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      enrollmentsStatisticsSummaryResponse0.setGlossary((EnrollmentsGlossaryFields) null);
      assertEquals("", enrollmentsStatisticsSummaryResponse0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("Cyl1R").when(enrollmentsSummary0).toString();
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("Cyl1R", "Cyl1R", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsSummary enrollmentsSummary1 = enrollmentsStatisticsSummaryResponse0.getElective();
      assertNull(enrollmentsSummary1.getTo());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      String string0 = enrollmentsStatisticsSummaryResponse0.getCurriculumCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("Cyl1R").when(enrollmentsSummary0).toString();
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("Cyl1R", "Cyl1R", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsSummary enrollmentsSummary1 = enrollmentsStatisticsSummaryResponse0.getOptional();
      assertSame(enrollmentsSummary1, enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(enrollmentsSummary0).toString();
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      String string0 = enrollmentsStatisticsSummaryResponse0.toString();
      assertEquals("EnrollmentsStatisticsSummaryResponse{courseCode='', curriculumCode='', mandatory=, optional=, elective=, complementary=, glossary=null}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("").when(enrollmentsSummary0).toString();
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsSummary enrollmentsSummary1 = enrollmentsStatisticsSummaryResponse0.getComplementary();
      enrollmentsStatisticsSummaryResponse0.setOptional(enrollmentsSummary1);
      assertSame(enrollmentsSummary1, enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("").when(enrollmentsSummary0).toString();
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsSummary enrollmentsSummary1 = enrollmentsStatisticsSummaryResponse0.getComplementary();
      enrollmentsStatisticsSummaryResponse0.setComplementary(enrollmentsSummary1);
      assertSame(enrollmentsSummary1, enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      String string0 = enrollmentsStatisticsSummaryResponse0.getCourseCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("").when(enrollmentsSummary0).toString();
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsSummary enrollmentsSummary1 = enrollmentsStatisticsSummaryResponse0.getMandatory();
      assertSame(enrollmentsSummary1, enrollmentsSummary0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      enrollmentsStatisticsSummaryResponse0.setCourseCode("");
      assertEquals("", enrollmentsStatisticsSummaryResponse0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsGlossaryFields enrollmentsGlossaryFields0 = enrollmentsStatisticsSummaryResponse0.getGlossary();
      assertNull(enrollmentsGlossaryFields0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EnrollmentsSummary enrollmentsSummary0 = mock(EnrollmentsSummary.class, new ViolatedAssumptionAnswer());
      doReturn("").when(enrollmentsSummary0).toString();
      EnrollmentsStatisticsSummaryResponse enrollmentsStatisticsSummaryResponse0 = new EnrollmentsStatisticsSummaryResponse("", "", enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0, enrollmentsSummary0);
      EnrollmentsSummary enrollmentsSummary1 = enrollmentsStatisticsSummaryResponse0.getComplementary();
      enrollmentsStatisticsSummaryResponse0.setElective(enrollmentsSummary1);
      assertEquals("", enrollmentsStatisticsSummaryResponse0.getCourseCode());
  }
}
