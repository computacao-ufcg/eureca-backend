/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:40:50 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.retention.subject;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.retention.subject.SubjectRetentionPerAdmissionTerm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectRetentionPerAdmissionTerm_ESTest extends SubjectRetentionPerAdmissionTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("br.edu.ufcg.computacao.eureca.backend.api.http.response.retention.subject.SubjectRetentionPerAdmissionTerm", (-2444), (-2444));
      subjectRetentionPerAdmissionTerm0.setAdmissionTerm((String) null);
      subjectRetentionPerAdmissionTerm0.getTerm();
      assertEquals((-2444), subjectRetentionPerAdmissionTerm0.getAdequate());
      assertEquals((-2444), subjectRetentionPerAdmissionTerm0.getPossible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("", (-27), (-2159));
      subjectRetentionPerAdmissionTerm0.getTerm();
      assertEquals((-2159), subjectRetentionPerAdmissionTerm0.getPossible());
      assertEquals((-27), subjectRetentionPerAdmissionTerm0.getAdequate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("OYe&", (-2538), (-2538));
      subjectRetentionPerAdmissionTerm0.setPossible((-1));
      subjectRetentionPerAdmissionTerm0.incrementPossible();
      int int0 = subjectRetentionPerAdmissionTerm0.getPossible();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("4L,z/0m-kdLM7iB'z", 0, 1414);
      int int0 = subjectRetentionPerAdmissionTerm0.getPossible();
      assertEquals(1414, int0);
      assertEquals(0, subjectRetentionPerAdmissionTerm0.getAdequate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("br.edu.ufcg.computacao.eureca.backend.api.http.response.retention.subject.SubjectRetentionPerAdmissionTerm", (-2444), (-2444));
      subjectRetentionPerAdmissionTerm0.setAdmissionTerm((String) null);
      subjectRetentionPerAdmissionTerm0.getAdmissionTerm();
      assertEquals((-2444), subjectRetentionPerAdmissionTerm0.getPossible());
      assertEquals((-2444), subjectRetentionPerAdmissionTerm0.getAdequate());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("", (-1494), (-1494));
      subjectRetentionPerAdmissionTerm0.getAdmissionTerm();
      assertEquals((-1494), subjectRetentionPerAdmissionTerm0.getAdequate());
      assertEquals((-1494), subjectRetentionPerAdmissionTerm0.getPossible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("", 0, 1);
      int int0 = subjectRetentionPerAdmissionTerm0.getAdequate();
      assertEquals(0, int0);
      assertEquals(1, subjectRetentionPerAdmissionTerm0.getPossible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("", (-1494), (-1494));
      subjectRetentionPerAdmissionTerm0.setAdequate(0);
      subjectRetentionPerAdmissionTerm0.incrementAdequate();
      int int0 = subjectRetentionPerAdmissionTerm0.getAdequate();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("", 1, 0);
      subjectRetentionPerAdmissionTerm0.compareTo(subjectRetentionPerAdmissionTerm0);
      assertEquals(0, subjectRetentionPerAdmissionTerm0.getPossible());
      assertEquals(1, subjectRetentionPerAdmissionTerm0.getAdequate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("orzaB4:au1^", (-255), (-255));
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm1 = new SubjectRetentionPerAdmissionTerm("W/Lr,", 2550, 0);
      int int0 = subjectRetentionPerAdmissionTerm0.compareTo(subjectRetentionPerAdmissionTerm1);
      assertEquals(2550, subjectRetentionPerAdmissionTerm1.getAdequate());
      assertEquals(24, int0);
      assertEquals(0, subjectRetentionPerAdmissionTerm1.getPossible());
      assertEquals((-255), subjectRetentionPerAdmissionTerm0.getPossible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("rm.VIRJ{4JXNL$XUNu", (-1186), (-1186));
      subjectRetentionPerAdmissionTerm0.setAdmissionTerm("");
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm1 = new SubjectRetentionPerAdmissionTerm("=L8Ee?sU#6iE}Zn!['", 3955, 823);
      int int0 = subjectRetentionPerAdmissionTerm0.compareTo(subjectRetentionPerAdmissionTerm1);
      assertEquals((-18), int0);
      assertEquals(823, subjectRetentionPerAdmissionTerm1.getPossible());
      assertEquals(3955, subjectRetentionPerAdmissionTerm1.getAdequate());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm((String) null, 1, 1);
      // Undeclared exception!
      try { 
        subjectRetentionPerAdmissionTerm0.compareTo("cc#Vd&M");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.retention.subject.SubjectRetentionPerAdmissionTerm
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.retention.subject.SubjectRetentionPerAdmissionTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("OYe&", (-2538), (-2538));
      subjectRetentionPerAdmissionTerm0.getAdmissionTerm();
      assertEquals((-2538), subjectRetentionPerAdmissionTerm0.getAdequate());
      assertEquals((-2538), subjectRetentionPerAdmissionTerm0.getPossible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("OYe&", (-2538), (-2538));
      // Undeclared exception!
      try { 
        subjectRetentionPerAdmissionTerm0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.retention.subject.SubjectRetentionPerAdmissionTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("OYe&", (-2538), (-2538));
      subjectRetentionPerAdmissionTerm0.incrementPossible();
      assertEquals((-2537), subjectRetentionPerAdmissionTerm0.getPossible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("OYe&", (-2538), (-2538));
      int int0 = subjectRetentionPerAdmissionTerm0.getAdequate();
      assertEquals((-2538), subjectRetentionPerAdmissionTerm0.getPossible());
      assertEquals((-2538), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("OYe&", (-2538), (-2538));
      subjectRetentionPerAdmissionTerm0.getTerm();
      assertEquals((-2538), subjectRetentionPerAdmissionTerm0.getPossible());
      assertEquals((-2538), subjectRetentionPerAdmissionTerm0.getAdequate());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectRetentionPerAdmissionTerm subjectRetentionPerAdmissionTerm0 = new SubjectRetentionPerAdmissionTerm("OYe&", (-2538), (-2538));
      int int0 = subjectRetentionPerAdmissionTerm0.getPossible();
      assertEquals((-2538), int0);
      assertEquals((-2538), subjectRetentionPerAdmissionTerm0.getAdequate());
  }
}
