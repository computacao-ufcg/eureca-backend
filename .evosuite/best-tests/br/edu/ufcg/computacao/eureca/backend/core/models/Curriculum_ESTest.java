/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:36:21 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import java.util.ArrayList;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Curriculum_ESTest extends Curriculum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("x!yr1a}(tK'a", "x!yr1a}(tK'a", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, (-4194), 0, 0, 0, 0, (-4194), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("x!yr1a}(tK'a", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4194), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("x!yr1a}(tK'a", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-4194.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-4194), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      
      int int0 = curriculum0.getMinOptionalCreditsNeeded();
      assertEquals(0, int0);
      assertEquals("x!yr1a}(tK'a", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-4194), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("x!yr1a}(tK'a", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-4194.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-4194), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1229, (-156), (-156), 0, 0, 1229, 1229, 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      
      curriculum0.setMinOptionalCreditsNeeded(1229);
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1229, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2302.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      int int0 = curriculum0.getMinOptionalCreditsNeeded();
      assertEquals(1229, int0);
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1229, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2302.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", ", curriculumCode='", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1), 0, 0, (-1), 0, 0, 0, 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(", curriculumCode='", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      
      int int0 = curriculum0.getMinNumberOfTerms();
      assertEquals(0, int0);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(", curriculumCode='", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("gy:H:tE", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-2920), (-557), (-2920), (-557), (-2920), (-557), (-1179), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-1179), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-557), curriculum0.getMinNumberOfTerms());
      assertEquals((-2920), curriculum0.getMaxNumberOfTerms());
      assertEquals((-2920), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2920), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-557), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-557), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("gy:H:tE", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-3477.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      int int0 = curriculum0.getMinNumberOfTerms();
      assertEquals((-557), int0);
      assertEquals((-1179), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-557), curriculum0.getMinNumberOfTerms());
      assertEquals((-2920), curriculum0.getMaxNumberOfTerms());
      assertEquals((-2920), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2920), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-557), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-557), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("gy:H:tE", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-3477.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1), (-1), (-1), 0, (-1), (-1), (-1), 125, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-1), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      
      int int0 = curriculum0.getMinNumberOfEnrolledCredits();
      assertEquals(125, int0);
      assertEquals((-1), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-3.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("HS'w+vlHgW|*/n6ED", "HS'w+vlHgW|*/n6ED", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 190, (-1012), 3752, 190, (-3216), 1, 190, (-1012), (-2796), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCurriculumCode());
      assertEquals((-3216), curriculum0.getMinActivitiesNeeded());
      assertEquals(3752, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(190, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(190, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(190, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2796), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1012), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3120.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1012), curriculum0.getMinOptionalCreditsNeeded());
      
      int int0 = curriculum0.getMinNumberOfEnrolledCredits();
      assertEquals((-1012), int0);
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCurriculumCode());
      assertEquals((-3216), curriculum0.getMinActivitiesNeeded());
      assertEquals(3752, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(190, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(190, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(190, curriculum0.getMaxNumberOfTerms());
      assertEquals((-2796), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1012), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3120.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1012), curriculum0.getMinOptionalCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("cvkBP9>_XeqR`", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 1, 3238, 1, 1, 1, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals(3238, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("cvkBP9>_XeqR`", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      double double0 = curriculum0.getMinNumberOfCreditsNeeded();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals(3238, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("cvkBP9>_XeqR`", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("Bc_y*=wGnWUb", "Bc_y*=wGnWUb", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-3982), 1433, (-3982), 1314, 0, 0, (-4585), 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(1433, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(1314, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-3982), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-5217.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Bc_y*=wGnWUb", curriculum0.getCourseCode());
      assertEquals((-3982), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("Bc_y*=wGnWUb", curriculum0.getCurriculumCode());
      assertEquals((-4585), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      
      double double0 = curriculum0.getMinNumberOfCreditsNeeded();
      assertEquals((-5217.0), double0, 0.01);
      assertEquals(1433, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(1314, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-3982), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-5217.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("Bc_y*=wGnWUb", curriculum0.getCourseCode());
      assertEquals((-3982), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("Bc_y*=wGnWUb", curriculum0.getCurriculumCode());
      assertEquals((-4585), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 2592, 2592, 2592, (-201), 2592, 2592, (-396), 2592, 0, 2592, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(2592, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-201), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfTerms());
      assertEquals(7575.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2592, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2592, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-396), curriculum0.getMaxNumberOfTerms());
      
      int int0 = curriculum0.getMinMandatoryCreditsNeeded();
      assertEquals(2592, int0);
      assertEquals(2592, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-201), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfTerms());
      assertEquals(7575.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2592, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2592, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-396), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "PcL|aDaE}b3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-2106), (-2106), 0, 0, (-1593), 0, 0, 0, (-2106), (-1593), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      
      int int0 = curriculum0.getMinMandatoryCreditsNeeded();
      assertEquals((-2106), int0);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, (-1604), 0, (-963), 0, 4852, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1604), curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(4852, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-963), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      int int0 = curriculum0.getMinElectiveCreditsNeeded();
      assertEquals(0, int0);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1604), curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(4852, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-963), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("]'X)xRr[^+", "]'X)xRr[^+", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, (-2979), 1, 0, 1, 1, 1187, (-3037), 3337, (-3037), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-3037), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("]'X)xRr[^+", curriculum0.getCurriculumCode());
      assertEquals("]'X)xRr[^+", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2978.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(3337, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1187, curriculum0.getMaxNumberOfTerms());
      assertEquals((-3037), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2979), curriculum0.getMinOptionalCreditsNeeded());
      
      int int0 = curriculum0.getMinElectiveCreditsNeeded();
      assertEquals(1, int0);
      assertEquals((-3037), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("]'X)xRr[^+", curriculum0.getCurriculumCode());
      assertEquals("]'X)xRr[^+", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMinActivitiesNeeded());
      assertEquals((-2978.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(3337, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1187, curriculum0.getMaxNumberOfTerms());
      assertEquals((-3037), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2979), curriculum0.getMinOptionalCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("J:K>9^", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 753, 1348, 753, 0, 753, 0, 39, 753, 0, 753, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(2854.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(753, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(753, curriculum0.getMinActivitiesNeeded());
      assertEquals(753, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(1348, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(753, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("J:K>9^", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(753, curriculum0.getMinElectiveCreditsNeeded());
      
      int int0 = curriculum0.getMinComplementaryCreditsNeeded();
      assertEquals(0, int0);
      assertEquals(2854.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(753, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(753, curriculum0.getMinActivitiesNeeded());
      assertEquals(753, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(1348, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(753, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("J:K>9^", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(753, curriculum0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 2592, 2592, 2592, (-201), 2592, 2592, (-396), 2592, 0, 2592, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(2592, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(7575.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2592, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2592, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-396), curriculum0.getMaxNumberOfTerms());
      assertEquals((-201), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      
      curriculum0.setMinComplementaryCreditsNeeded(1226);
      assertEquals(2592, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1226, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2592, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(9002.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2592, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2592, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-396), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      
      int int0 = curriculum0.getMinComplementaryCreditsNeeded();
      assertEquals(1226, int0);
      assertEquals(2592, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1226, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2592, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2592, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(9002.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2592, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2592, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-396), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 877, 877, 877, 877, 1533, 877, 92, 1533, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(877, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1533, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1533, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(877, curriculum0.getMinNumberOfTerms());
      assertEquals(877, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(92, curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(877, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(877, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3508.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      
      int int0 = curriculum0.getMinActivitiesNeeded();
      assertEquals(1533, int0);
      assertEquals(877, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1533, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1533, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(877, curriculum0.getMinNumberOfTerms());
      assertEquals(877, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(92, curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(877, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(877, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3508.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, (-2197), (-2197), 0, (-1807), 1549, 1549, 309, 309, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2197), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1549, curriculum0.getMaxNumberOfTerms());
      assertEquals(309, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2197), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1549, curriculum0.getMinNumberOfTerms());
      assertEquals(309, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1807), curriculum0.getMinActivitiesNeeded());
      assertEquals((-4394.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      int int0 = curriculum0.getMinActivitiesNeeded();
      assertEquals((-1807), int0);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2197), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(1549, curriculum0.getMaxNumberOfTerms());
      assertEquals(309, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2197), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1549, curriculum0.getMinNumberOfTerms());
      assertEquals(309, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1807), curriculum0.getMinActivitiesNeeded());
      assertEquals((-4394.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "PcL|aDaE}b3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-2106), (-2106), 0, 0, (-1593), 0, 0, 0, (-2106), (-1593), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      
      int int0 = curriculum0.getMaxNumberOfTerms();
      assertEquals(0, int0);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1229, (-156), (-156), 0, 0, 1229, 1229, 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
      
      int int0 = curriculum0.getMaxNumberOfTerms();
      assertEquals(1229, int0);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1), (-1), (-1), 0, (-1), (-1), (-1), 125, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-3.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
      
      int int0 = curriculum0.getMaxNumberOfEnrolledCredits();
      assertEquals(0, int0);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-3.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(125, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinActivitiesNeeded());
      assertEquals((-1), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1), curriculum0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "PcL|aDaE}b3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-2106), (-2106), 0, 0, (-1593), 0, 0, 0, (-2106), (-1593), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
      
      int int0 = curriculum0.getMaxNumberOfEnrolledCredits();
      assertEquals((-2106), int0);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("HS'w+vlHgW|*/n6ED", "HS'w+vlHgW|*/n6ED", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 190, (-1012), 3752, 190, (-3216), 1, 190, (-1012), (-2796), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(3120.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals((-2796), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(190, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(190, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-3216), curriculum0.getMinActivitiesNeeded());
      assertEquals(3752, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1012), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1012), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(190, curriculum0.getMaxNumberOfTerms());
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCurriculumCode());
      
      int int0 = curriculum0.getExceptionalAdditionalEnrolledCredits();
      assertEquals(0, int0);
      assertEquals(3120.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals((-2796), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(190, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(190, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-3216), curriculum0.getMinActivitiesNeeded());
      assertEquals(3752, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1012), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1012), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(190, curriculum0.getMaxNumberOfTerms());
      assertEquals("HS'w+vlHgW|*/n6ED", curriculum0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, (-1188), 0, 0, 0, (-1), 0, (-1188), (-1188), (-1188), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1188), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1188), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1188.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1188), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1188), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      
      int int0 = curriculum0.getExceptionalAdditionalEnrolledCredits();
      assertEquals((-1188), int0);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1188), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1188), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1188.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinNumberOfTerms());
      assertEquals((-1188), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1188), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum(", electiveSubjectsList=", "m52&''|pb1%L=%JK", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 377, 377, 377, 3268, (-813), (-10), 377, (-10), 3268, (-10), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-10), curriculum0.getMinNumberOfTerms());
      assertEquals(4399.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3268, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(377, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("m52&''|pb1%L=%JK", curriculum0.getCurriculumCode());
      assertEquals((-10), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(377, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(377, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-10), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(377, curriculum0.getMaxNumberOfTerms());
      assertEquals(3268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-813), curriculum0.getMinActivitiesNeeded());
      assertEquals(", electiveSubjectsList=", curriculum0.getCourseCode());
      
      String string0 = curriculum0.getCurriculumCode();
      assertEquals("m52&''|pb1%L=%JK", string0);
      assertNotNull(string0);
      assertEquals((-10), curriculum0.getMinNumberOfTerms());
      assertEquals(4399.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3268, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(377, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("m52&''|pb1%L=%JK", curriculum0.getCurriculumCode());
      assertEquals((-10), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(377, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(377, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-10), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(377, curriculum0.getMaxNumberOfTerms());
      assertEquals(3268, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-813), curriculum0.getMinActivitiesNeeded());
      assertEquals(", electiveSubjectsList=", curriculum0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("[Jn+PI{%DeR[(#fyNa", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 2789, 613, (-441), (-441), (-1), 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(613, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-441), curriculum0.getMaxNumberOfTerms());
      assertEquals(2789.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("[Jn+PI{%DeR[(#fyNa", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2789, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-441), curriculum0.getMinNumberOfTerms());
      
      String string0 = curriculum0.getCurriculumCode();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(613, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-441), curriculum0.getMaxNumberOfTerms());
      assertEquals(2789.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("[Jn+PI{%DeR[(#fyNa", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2789, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-441), curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum((String) null, (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, (-500), 0, 0, 0, 2151, 0, 2516, 2516, 2516, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(2151, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2516, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2516, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-500), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2516, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-500.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      String string0 = curriculum0.getCourseCode();
      assertNull(string0);
      assertNull(curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(2151, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2516, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2516, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-500), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2516, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-500.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      
      curriculum0.setCourseCode("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum");
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", curriculum0.getCourseCode());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      
      String string0 = curriculum0.getCourseCode();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", string0);
      assertNotNull(string0);
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", curriculum0.getCourseCode());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 2592, 2592, 2592, (-201), 2592, 2592, (-396), 2592, 0, 2592, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(2592, curriculum0.getMinNumberOfTerms());
      assertEquals(2592, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2592, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2592, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-201), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(7575.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2592, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2592, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-396), curriculum0.getMaxNumberOfTerms());
      
      int int0 = curriculum0.getMinComplementaryCreditsNeeded();
      assertEquals((-201), int0);
      assertEquals(2592, curriculum0.getMinNumberOfTerms());
      assertEquals(2592, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2592, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(2592, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-201), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(7575.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2592, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2592, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2592, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-396), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "PcL|aDaE}b3", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-2106), (-2106), 0, 0, (-1593), 0, 0, 0, (-2106), (-1593), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
      
      int int0 = curriculum0.getMinOptionalCreditsNeeded();
      assertEquals((-2106), int0);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals((-1593), curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-4212.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1593), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("PcL|aDaE}b3", curriculum0.getCurriculumCode());
      assertEquals((-2106), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-2106), curriculum0.getMinOptionalCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 3959, 0, 0, 0, 0, 0, 0, (-1875), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3959.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1875), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(3959, curriculum0.getMinElectiveCreditsNeeded());
      
      int int0 = curriculum0.getMinMandatoryCreditsNeeded();
      assertEquals(0, int0);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3959.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1875), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(3959, curriculum0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("jTalT<mIS(1^+b2p#_", "jTalT<mIS(1^+b2p#_", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1348), (-1348), (-1348), (-1348), 0, (-1131), 0, 0, (-1348), 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-1348), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("jTalT<mIS(1^+b2p#_", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1131), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1348), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-5392.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1348), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1348), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("jTalT<mIS(1^+b2p#_", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1348), curriculum0.getMinMandatoryCreditsNeeded());
      
      int int0 = curriculum0.getMinElectiveCreditsNeeded();
      assertEquals((-1348), int0);
      assertEquals((-1348), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("jTalT<mIS(1^+b2p#_", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-1131), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1348), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-5392.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1348), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1348), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("jTalT<mIS(1^+b2p#_", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1348), curriculum0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      
      curriculum0.setIdealComplementaryCreditsList((ArrayList<Integer>) null);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      
      curriculum0.setOptionalSubjectsList((Collection<String>) null);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      
      curriculum0.setMinMandatoryCreditsNeeded((-1215));
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1215), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1215.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      curriculum0.setExceptionalAdditionalEnrolledCredits((-721));
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals((-721), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("(H", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1229, (-156), (-156), 0, 0, 1229, 1229, 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("(H", curriculum0.getCourseCode());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      
      ArrayList<Integer> arrayList0 = curriculum0.getExpectedMinAccumulatedCreditsList();
      assertNull(arrayList0);
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("(H", curriculum0.getCourseCode());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      
      ArrayList<Integer> arrayList0 = curriculum0.getIdealComplementaryCreditsList();
      assertNull(arrayList0);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      
      ArrayList<Integer> arrayList0 = curriculum0.getIdealElectiveCreditsList();
      assertNull(arrayList0);
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      
      curriculum0.setMinElectiveCreditsNeeded((-2084));
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-2084.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-2084), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      
      String string0 = curriculum0.toString();
      assertEquals("Curriculum{courseCode='', curriculumCode='', idealMandatoryCreditsList=null, idealOptionalCreditsList=null, idealElectiveCreditsList=null, idealComplementaryCreditsList=null, expectedMinAccumulatedCreditsList=null, minMandatoryCreditsNeeded=142, minOptionalCreditsNeeded=142, minElectiveCreditsNeeded=142, minComplementaryCreditsNeeded=142, minActivitiesNeeded=-1224, minNumberOfTerms=1, maxNumberOfTerms=-1224, minNumberOfEnrolledCredits=352, maxNumberOfEnrolledCredits=1, exceptionalAdditionalEnrolledCredits=352, mandatorySubjectsList=null, optionalSubjectsList=null, electiveSubjectsList=null, complementarySubjectsList=null, complementaryActivitiesList=null}", string0);
      assertNotNull(string0);
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("(H", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1229, (-156), (-156), 0, 0, 1229, 1229, 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("(H", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      
      int int0 = curriculum0.getMinNumberOfEnrolledCredits();
      assertEquals(0, int0);
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("(H", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("<~?VfP", "<~?VfP", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 3632, 3632, 3632, 3632, 3632, 0, 0, 3632, 0, 1536, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(3632, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(3632, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("<~?VfP", curriculum0.getCurriculumCode());
      assertEquals(14528.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals("<~?VfP", curriculum0.getCourseCode());
      assertEquals(3632, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1536, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3632, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(3632, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(3632, curriculum0.getMinNumberOfEnrolledCredits());
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealOptionalCredits(1536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("zg'Ki`K=TX", ", exceptionalAdditionalE+rolledCredits=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1726), (-1726), (-1726), (-1726), (-1726), 133, 0, (-810), 2896, 2896, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-1726), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2896, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2896, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(133, curriculum0.getMinNumberOfTerms());
      assertEquals((-1726), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1726), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1726), curriculum0.getMinActivitiesNeeded());
      assertEquals((-810), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1726), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("zg'Ki`K=TX", curriculum0.getCourseCode());
      assertEquals(", exceptionalAdditionalE+rolledCredits=", curriculum0.getCurriculumCode());
      assertEquals((-6904.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      int int0 = curriculum0.getExceptionalAdditionalEnrolledCredits();
      assertEquals(2896, int0);
      assertEquals((-1726), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2896, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2896, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(133, curriculum0.getMinNumberOfTerms());
      assertEquals((-1726), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1726), curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1726), curriculum0.getMinActivitiesNeeded());
      assertEquals((-810), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1726), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals("zg'Ki`K=TX", curriculum0.getCourseCode());
      assertEquals(", exceptionalAdditionalE+rolledCredits=", curriculum0.getCurriculumCode());
      assertEquals((-6904.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      
      String string0 = curriculum0.getCourseCode();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      
      Collection<String> collection0 = curriculum0.getComplementarySubjectsList();
      assertNull(collection0);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      
      Collection<String> collection0 = curriculum0.getOptionalSubjectsList();
      assertNull(collection0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("h$:6Bx{lhRkw{%vr", "XJpX{h-VY{K~Mv:+~y(", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 230, 230, 230, 230, 0, 230, 230, 0, 0, 230, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
      assertEquals(230, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(230, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals(920.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(230, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
      assertEquals(230, curriculum0.getMinComplementaryCreditsNeeded());
      
      curriculum0.setMandatorySubjectsList((Collection<String>) null);
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
      assertEquals(230, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(230, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals(920.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(230, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
      assertEquals(230, curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      
      curriculum0.setMinNumberOfTerms((-1366));
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1366), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("(H", (String) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1229, (-156), (-156), 0, 0, 1229, 1229, 0, 0, 0, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("(H", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
      
      String string0 = curriculum0.getCurriculumCode();
      assertNull(string0);
      assertEquals(1229, curriculum0.getMinNumberOfTerms());
      assertEquals((-156), curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(917.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1229, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("(H", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertNull(curriculum0.getCurriculumCode());
      assertEquals(1229, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-156), curriculum0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      
      curriculum0.setIdealOptionalCreditsList((ArrayList<Integer>) null);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      
      curriculum0.setComplementarySubjectsList((Collection<String>) null);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      curriculum0.setIdealElectiveCreditsList((ArrayList<Integer>) null);
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("h$:6Bx{lhRkw{%vr", "XJpX{h-VY{K~Mv:+~y(", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 230, 230, 230, 230, 0, 230, 230, 0, 0, 230, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
      assertEquals(230, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(230, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(230, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(230, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals(920.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      
      curriculum0.setElectiveSubjectsList((Collection<String>) null);
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
      assertEquals(230, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(230, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(230, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(230, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals(920.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      
      int int0 = curriculum0.getMaxNumberOfEnrolledCredits();
      assertEquals(1, int0);
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("P5A6EY{ib", ", complementaryActivitiesList=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1983, 1983, 0, 0, 755, 1, 1, 1, 1, 25, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(755, curriculum0.getMinActivitiesNeeded());
      assertEquals("P5A6EY{ib", curriculum0.getCourseCode());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(1983, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(25, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(1983, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3966.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(", complementaryActivitiesList=", curriculum0.getCurriculumCode());
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealElectiveCredits(755);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("P5A6EY{ib", ", complementaryActivitiesList=", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 1983, 1983, 0, 0, 755, 1, 1, 1, 1, 25, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1983, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3966.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(755, curriculum0.getMinActivitiesNeeded());
      assertEquals(25, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1983, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("P5A6EY{ib", curriculum0.getCourseCode());
      assertEquals(", complementaryActivitiesList=", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      
      Collection<String> collection0 = curriculum0.getElectiveSubjectsList();
      assertNull(collection0);
      assertEquals(1, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1983, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(3966.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(755, curriculum0.getMinActivitiesNeeded());
      assertEquals(25, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(1983, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("P5A6EY{ib", curriculum0.getCourseCode());
      assertEquals(", complementaryActivitiesList=", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      
      ArrayList<Integer> arrayList0 = curriculum0.getIdealMandatoryCreditsList();
      assertNull(arrayList0);
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 2795, 331, 2795, 1271, 1271, 664, (-1492), (-1), 1460, 2795, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(1271, curriculum0.getMinActivitiesNeeded());
      assertEquals(664, curriculum0.getMinNumberOfTerms());
      assertEquals(2795, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1492), curriculum0.getMaxNumberOfTerms());
      assertEquals(1271, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1460, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2795, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(7192.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(331, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2795, curriculum0.getMinMandatoryCreditsNeeded());
      
      ArrayList<Integer> arrayList0 = curriculum0.getIdealOptionalCreditsList();
      assertNull(arrayList0);
      assertEquals(1271, curriculum0.getMinActivitiesNeeded());
      assertEquals(664, curriculum0.getMinNumberOfTerms());
      assertEquals(2795, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-1), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1492), curriculum0.getMaxNumberOfTerms());
      assertEquals(1271, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1460, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2795, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(7192.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(331, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(2795, curriculum0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      
      int int0 = curriculum0.getMaxNumberOfTerms();
      assertEquals((-1224), int0);
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("h$:6Bx{lhRkw{%vr", "XJpX{h-VY{K~Mv:+~y(", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 230, 230, 230, 230, 0, 230, 230, 0, 0, 230, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(230, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(230, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(920.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(230, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(230, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
      
      int int0 = curriculum0.getMinActivitiesNeeded();
      assertEquals(0, int0);
      assertEquals(230, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(230, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(920.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(230, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(230, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      curriculum0.setExpectedMinAccumulatedCreditsList((ArrayList<Integer>) null);
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("$k]Yag$,", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 140, 2682, (-1883), (-1883), (-1883), 2356, 2356, (-896), (-896), (-896), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-896), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-896), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2356, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1883), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("$k]Yag$,", curriculum0.getCourseCode());
      assertEquals((-896), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1883), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2682, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1883), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-944.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(140, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2356, curriculum0.getMinNumberOfTerms());
      
      int int0 = curriculum0.getMinNumberOfTerms();
      assertEquals(2356, int0);
      assertEquals((-896), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-896), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(2356, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1883), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("$k]Yag$,", curriculum0.getCourseCode());
      assertEquals((-896), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1883), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(2682, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1883), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-944.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(140, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(2356, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      
      curriculum0.setMinActivitiesNeeded((-1357));
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-1357), curriculum0.getMinActivitiesNeeded());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("$k]Yag$,", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 140, 2682, (-1883), (-1883), (-1883), 2356, 2356, (-896), (-896), (-896), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-896), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2356, curriculum0.getMinNumberOfTerms());
      assertEquals((-896), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1883), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2356, curriculum0.getMaxNumberOfTerms());
      assertEquals((-896), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1883), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("$k]Yag$,", curriculum0.getCourseCode());
      assertEquals(2682, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1883), curriculum0.getMinActivitiesNeeded());
      assertEquals((-944.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(140, curriculum0.getMinMandatoryCreditsNeeded());
      
      Collection<String> collection0 = curriculum0.getComplementaryActivitiesList();
      assertNull(collection0);
      assertEquals((-896), curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(2356, curriculum0.getMinNumberOfTerms());
      assertEquals((-896), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1883), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(2356, curriculum0.getMaxNumberOfTerms());
      assertEquals((-896), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1883), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals("$k]Yag$,", curriculum0.getCourseCode());
      assertEquals(2682, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1883), curriculum0.getMinActivitiesNeeded());
      assertEquals((-944.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(140, curriculum0.getMinMandatoryCreditsNeeded());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      
      // Undeclared exception!
      try { 
        curriculum0.getExpectedMinAccumulatedCredits(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 142, 142, 142, 142, (-1224), 1, (-1224), 352, 1, 352, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      
      curriculum0.setCurriculumCode("");
      assertEquals(1, curriculum0.getMinNumberOfTerms());
      assertEquals((-1224), curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(352, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(352, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(568.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(142, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1224), curriculum0.getMaxNumberOfTerms());
      assertEquals(1, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(142, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(142, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("h$:6Bx{lhRkw{%vr", "XJpX{h-VY{K~Mv:+~y(", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 230, 230, 230, 230, 0, 230, 230, 0, 0, 230, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
      assertEquals(230, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(230, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
      assertEquals(230, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(920.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(230, curriculum0.getMinComplementaryCreditsNeeded());
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealMandatoryCredits(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals("G3y2H#|Xj", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      
      // Undeclared exception!
      try { 
        curriculum0.getIdealComplementaryCredits(39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      
      curriculum0.setMinNumberOfEnrolledCredits((-45));
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals((-45), curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertNotNull(curriculum0);
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-45), curriculum0.getMaxNumberOfTerms());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      
      curriculum0.setMaxNumberOfTerms(0);
      assertEquals((-1357), curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals("", curriculum0.getCourseCode());
      assertEquals(0, curriculum0.getMinMandatoryCreditsNeeded());
      assertEquals(0, curriculum0.getMinOptionalCreditsNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals((-1724.0), curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals((-1366), curriculum0.getMinComplementaryCreditsNeeded());
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals((-358), curriculum0.getMinElectiveCreditsNeeded());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("h$:6Bx{lhRkw{%vr", "XJpX{h-VY{K~Mv:+~y(", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 230, 230, 230, 230, 0, 230, 230, 0, 0, 230, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      double double0 = curriculum0.getMinNumberOfCreditsNeeded();
      assertEquals("XJpX{h-VY{K~Mv:+~y(", curriculum0.getCurriculumCode());
      assertEquals(230, curriculum0.getMaxNumberOfTerms());
      assertEquals(230, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(230, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(920.0, double0, 0.01);
      assertEquals("h$:6Bx{lhRkw{%vr", curriculum0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("G3y2H#|Xj", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, 0, 0, 0, 0, 39, 2538, 0, 39, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.setComplementaryActivitiesList((Collection<String>) null);
      assertEquals(39, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(39, curriculum0.getMaxNumberOfTerms());
      assertEquals("", curriculum0.getCurriculumCode());
      assertEquals(2538, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMinActivitiesNeeded());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("<~?VfP", "<~?VfP", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 3632, 3632, 3632, 3632, 3632, 0, 0, 3632, 0, 1536, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.setIdealMandatoryCreditsList((ArrayList<Integer>) null);
      assertEquals(3632, curriculum0.getMinNumberOfEnrolledCredits());
      assertEquals(3632, curriculum0.getMinActivitiesNeeded());
      assertEquals(14528.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(1536, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(0, curriculum0.getMinNumberOfTerms());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("<~?VfP", "<~?VfP", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 3632, 3632, 3632, 3632, 3632, 0, 0, 3632, 0, 1536, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      curriculum0.getMandatorySubjectsList();
      assertEquals(0, curriculum0.getMinNumberOfTerms());
      assertEquals(0, curriculum0.getMaxNumberOfEnrolledCredits());
      assertEquals(0, curriculum0.getMaxNumberOfTerms());
      assertEquals(14528.0, curriculum0.getMinNumberOfCreditsNeeded(), 0.01);
      assertEquals(3632, curriculum0.getMinActivitiesNeeded());
      assertEquals(1536, curriculum0.getExceptionalAdditionalEnrolledCredits());
      assertEquals(3632, curriculum0.getMinNumberOfEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Curriculum curriculum0 = new Curriculum("", "", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, 0, 0, (-358), (-1366), 0, (-358), (-45), 0, 5703, (-1357), (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null, (Collection<String>) null);
      assertEquals(5703, curriculum0.getMaxNumberOfEnrolledCredits());
      
      curriculum0.setMaxNumberOfEnrolledCredits((-358));
      assertEquals((-358), curriculum0.getMinNumberOfTerms());
  }
}
