/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:36:34 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassEnrollments_ESTest extends ClassEnrollments_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setSuspended((Set<String>) null);
      Set<String> set0 = classEnrollments0.getSuspended();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setSucceeded((Set<String>) null);
      Set<String> set0 = classEnrollments0.getSucceeded();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setOngoing((Set<String>) null);
      Set<String> set0 = classEnrollments0.getOngoing();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setFailedDueToGrade((Set<String>) null);
      Set<String> set0 = classEnrollments0.getFailedDueToGrade();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setFailedDueToAbsence((Set<String>) null);
      Set<String> set0 = classEnrollments0.getFailedDueToAbsence();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setExempted((Set<String>) null);
      Set<String> set0 = classEnrollments0.getExempted();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setCancelled((Set<String>) null);
      Set<String> set0 = classEnrollments0.getCancelled();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setSucceeded((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberSucceeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setCancelled((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberOfEnrolleds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setFailedDueToAbsence((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberFailedDueToAbsence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setCancelled((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberCancelled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setFailedDueToAbsence((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getEnrolleds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setOngoing((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberOngoing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      Set<String> set0 = classEnrollments0.getEnrolleds();
      classEnrollments0.setFailedDueToAbsence(set0);
      assertEquals(0, classEnrollments0.getNumberOngoing());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberOngoing();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberExempted();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberSuspended();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setExempted((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberExempted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberSucceeded();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberFailedDueToAbsence();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberFailedDueToGrade();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberOfEnrolleds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setSuspended((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberSuspended();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      int int0 = classEnrollments0.getNumberCancelled();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassEnrollments classEnrollments0 = new ClassEnrollments();
      classEnrollments0.setFailedDueToGrade((Set<String>) null);
      // Undeclared exception!
      try { 
        classEnrollments0.getNumberFailedDueToGrade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.ClassEnrollments", e);
      }
  }
}
