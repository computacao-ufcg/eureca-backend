/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:28:07 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentsMetricsPerTerm_ESTest extends EnrollmentsMetricsPerTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 0, 0);
      enrollmentsMetricsPerTerm0.setTerm((String) null);
      enrollmentsMetricsPerTerm0.getTerm();
      assertEquals(0, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(0, enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 0, 0, 0);
      int int0 = enrollmentsMetricsPerTerm0.getEnrollmentsCount();
      assertEquals(0, enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("]Unb5DM.!O^fwwW", (-3705), (-3705), 0.0);
      int int0 = enrollmentsMetricsPerTerm0.getEnrollmentsCount();
      assertEquals((-3705), int0);
      assertEquals((-3705), enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm", (-2687), 0, 0);
      int int0 = enrollmentsMetricsPerTerm0.getClassesCount();
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(0, int0);
      assertEquals((-2687), enrollmentsMetricsPerTerm0.getEnrollmentsCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      int int0 = enrollmentsMetricsPerTerm0.getClassesCount();
      assertEquals(1098, int0);
      assertEquals(1098, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(1098.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("+?X`[=kb]YyRr>", 125, 294, 901.67878);
      double double0 = enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass();
      assertEquals(125, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(901.67878, double0, 0.01);
      assertEquals(294, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("ay+eo%+", 0, 0, 0.0);
      enrollmentsMetricsPerTerm0.compareTo(enrollmentsMetricsPerTerm0);
      assertEquals(0.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(0, enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(0, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("+?X`[=kb]YyRr>", 125, 294, 901.67878);
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm1 = new EnrollmentsMetricsPerTerm("", 125, 294, 294);
      int int0 = enrollmentsMetricsPerTerm0.compareTo(enrollmentsMetricsPerTerm1);
      assertEquals(14, int0);
      assertEquals(294, enrollmentsMetricsPerTerm1.getClassesCount());
      assertEquals(125, enrollmentsMetricsPerTerm1.getEnrollmentsCount());
      assertEquals(294.0, enrollmentsMetricsPerTerm1.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm(", averageEnrollmentsPerClass=", 0, 0, 0.0);
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm1 = new EnrollmentsMetricsPerTerm("ALj%kj@J", 0, 0, 0);
      int int0 = enrollmentsMetricsPerTerm0.compareTo(enrollmentsMetricsPerTerm1);
      assertEquals(0, enrollmentsMetricsPerTerm1.getClassesCount());
      assertEquals(0, enrollmentsMetricsPerTerm1.getEnrollmentsCount());
      assertEquals((-21), int0);
      assertEquals(0.0, enrollmentsMetricsPerTerm1.getAverageEnrollmentsPerClass(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 2874, 3162, 2874);
      // Undeclared exception!
      try { 
        enrollmentsMetricsPerTerm0.compareTo("EnrollmentsMetricsPerTerm{term='', enrollmentsCount=2874, classesCount=3162, averageEnrollmentsPerClass=2874.0}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      enrollmentsMetricsPerTerm0.getTerm();
      assertEquals(1098.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(1098, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(1098, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      String string0 = enrollmentsMetricsPerTerm0.toString();
      assertEquals("EnrollmentsMetricsPerTerm{term='', enrollmentsCount=1098, classesCount=1098, averageEnrollmentsPerClass=1098.0}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      enrollmentsMetricsPerTerm0.setClassesCount(1098);
      assertEquals(1098, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(1098.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(1098, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      enrollmentsMetricsPerTerm0.setEnrollmentsCount(306);
      assertEquals(306, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      // Undeclared exception!
      try { 
        enrollmentsMetricsPerTerm0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsMetricsPerTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      enrollmentsMetricsPerTerm0.setTerm(", averageEnrollmentsPerClass=");
      enrollmentsMetricsPerTerm0.getTerm();
      assertEquals(1098.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals(1098, enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals(1098, enrollmentsMetricsPerTerm0.getClassesCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("", 1098, 1098, 1098);
      enrollmentsMetricsPerTerm0.setAverageEnrollmentsPerClass(0.0);
      double double0 = enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm((String) null, (-9), (-9), (-9));
      double double0 = enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass();
      assertEquals((-9.0), double0, 0.01);
      assertEquals((-9), enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals((-9), enrollmentsMetricsPerTerm0.getEnrollmentsCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm((String) null, (-9), (-9), (-9));
      int int0 = enrollmentsMetricsPerTerm0.getClassesCount();
      assertEquals((-9), enrollmentsMetricsPerTerm0.getEnrollmentsCount());
      assertEquals((-9.0), enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EnrollmentsMetricsPerTerm enrollmentsMetricsPerTerm0 = new EnrollmentsMetricsPerTerm("=JvhBT$0]]cE2DK]RC", 26, 26, 26);
      int int0 = enrollmentsMetricsPerTerm0.getEnrollmentsCount();
      assertEquals(26, int0);
      assertEquals(26, enrollmentsMetricsPerTerm0.getClassesCount());
      assertEquals(26.0, enrollmentsMetricsPerTerm0.getAverageEnrollmentsPerClass(), 0.01);
  }
}
