/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:25:17 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeachersStatisticsSummary;
import br.edu.ufcg.computacao.eureca.backend.core.models.TermCount;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TeachersStatisticsSummary_ESTest extends TeachersStatisticsSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("uB3", "7T2Y#q*0[7", 1.0, (TermCount) null, (TermCount) null, (-2242.080544583), 2977.184, 2977.184, (-2242.080544583));
      teachersStatisticsSummary0.getTo();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("Li(]`z8`]z6hn G@", "h`9n<G>$9u_R", 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 275.976614, 1.0);
      teachersStatisticsSummary0.setTo("");
      teachersStatisticsSummary0.getTo();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("uB3", "7T2Y#q*0[7", 1.0, (TermCount) null, (TermCount) null, (-2242.080544583), 2977.184, 2977.184, (-2242.080544583));
      double double0 = teachersStatisticsSummary0.getTeachersCount();
      assertEquals(1.0, double0, 0.01);
      assertEquals("7T2Y#q*0[7", teachersStatisticsSummary0.getTo());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("QQ.IN%kIDzQ8u207/%3", "QQ.IN%kIDzQ8u207/%3", (-1.0), termCount0, termCount0, (-1.0), (-1.0), (-1.0), (-1.0));
      double double0 = teachersStatisticsSummary0.getTeachersCount();
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("e/+KAQRs#", "e/+KAQRs#", 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.getMin();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("Li(]`z8`]z6hn G@", "h`9n<G>$9u_R", 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 275.976614, 1.0);
      teachersStatisticsSummary0.getMax();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals("Li(]`z8`]z6hn G@", teachersStatisticsSummary0.getFrom());
      assertEquals("h`9n<G>$9u_R", teachersStatisticsSummary0.getTo());
      assertEquals(275.976614, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(1.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("Li(]`z8`]z6hn G@", "h`9n<G>$9u_R", 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 275.976614, 1.0);
      String string0 = teachersStatisticsSummary0.getFrom();
      assertEquals(275.976614, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals("h`9n<G>$9u_R", teachersStatisticsSummary0.getTo());
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals("Li(]`z8`]z6hn G@", string0);
      assertEquals(1.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "", 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, (-1587.627000007));
      teachersStatisticsSummary0.getFrom();
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1587.627000007), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("4%fjUnuU1G", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeachersStatisticsSummary", (-1.0), termCount0, termCount0, (-1.0), (-582.79366299063), 409.0, 409.0);
      double double0 = teachersStatisticsSummary0.getAverageSuspendedRate();
      assertEquals("4%fjUnuU1G", teachersStatisticsSummary0.getFrom());
      assertEquals(409.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-1.0), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeachersStatisticsSummary", teachersStatisticsSummary0.getTo());
      assertEquals((-582.79366299063), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(409.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeachersStatisticsSummary", "br.edu.ufcg.computacao.eureca.backend.api.http.response.teacher.TeachersStatisticsSummary", (-4697.804340574546), (TermCount) null, (TermCount) null, (-4697.804340574546), (-4697.804340574546), 485.43, 485.43);
      teachersStatisticsSummary0.setAverageSuspendedRate((-1.0));
      double double0 = teachersStatisticsSummary0.getAverageSuspendedRate();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("e/+KAQRs#", "e/+KAQRs#", 0.0, (TermCount) null, (TermCount) null, 0.0, 0.0, 0.0, 0.0);
      double double0 = teachersStatisticsSummary0.getAverageSuccessRate();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("uB3", "7T2Y#q*0[7", 1.0, (TermCount) null, (TermCount) null, (-2242.080544583), 2977.184, 2977.184, (-2242.080544583));
      double double0 = teachersStatisticsSummary0.getAverageSuccessRate();
      assertEquals((-2242.080544583), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals("7T2Y#q*0[7", teachersStatisticsSummary0.getTo());
      assertEquals((-2242.080544583), double0, 0.01);
      assertEquals(1.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals("uB3", teachersStatisticsSummary0.getFrom());
      assertEquals(2977.184, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(2977.184, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("?UTM", "?UTM", 1649.8053894016484, (TermCount) null, (TermCount) null, 0.0, 0.0, 1649.8053894016484, 0.0);
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToGradeRate();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1649.8053894016484, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(1649.8053894016484, teachersStatisticsSummary0.getTeachersCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, (-2396.509), (TermCount) null, (TermCount) null, 0.0, (-2396.509), 0.0, (-2396.509));
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToGradeRate();
      assertEquals((-2396.509), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals((-2396.509), double0, 0.01);
      assertEquals((-2396.509), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("TermCount{count=", (String) null, 0.0, termCount0, termCount0, 4640.6, 4640.6, 0.0, 0.0);
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(4640.6, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4640.6, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("", "", (-636.346), termCount0, termCount0, (-636.346), (-636.346), (-636.346), (-636.346));
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate();
      assertEquals((-636.346), teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals((-636.346), teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals((-636.346), double0, 0.01);
      assertEquals((-636.346), teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals((-636.346), teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("W]p*7s3", "W]p*7s3", 1010.9307014503491, termCount0, termCount0, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491);
      teachersStatisticsSummary0.setAverageSuccessRate(1010.9307014503491);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("W]p*7s3", "W]p*7s3", 1010.9307014503491, termCount0, termCount0, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491);
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToGradeRate();
      assertEquals(1010.9307014503491, double0, 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.setAverageFailureDueToAbsenceRate(0.0);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("W]p*7s3", "W]p*7s3", 1010.9307014503491, termCount0, termCount0, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491);
      double double0 = teachersStatisticsSummary0.getAverageSuccessRate();
      assertEquals(1010.9307014503491, double0, 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.getFrom();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.setTeachersCount(0.0);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.getTo();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      TermCount termCount1 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      teachersStatisticsSummary0.setMax(termCount1);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      teachersStatisticsSummary0.setAverageFailureDueToGradeRate(0.0);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      double double0 = teachersStatisticsSummary0.getAverageSuspendedRate();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getTeachersCount(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary((String) null, (String) null, 0.0, termCount0, termCount0, 0.0, 0.0, 0.0, 0.0);
      double double0 = teachersStatisticsSummary0.getTeachersCount();
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("W]p*7s3", "W]p*7s3", 1010.9307014503491, termCount0, termCount0, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491);
      double double0 = teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate();
      assertEquals(1010.9307014503491, double0, 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("W]p*7s3", "W]p*7s3", 1010.9307014503491, termCount0, termCount0, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491);
      teachersStatisticsSummary0.setFrom("W]p*7s3");
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TermCount termCount0 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      TeachersStatisticsSummary teachersStatisticsSummary0 = new TeachersStatisticsSummary("W]p*7s3", "W]p*7s3", 1010.9307014503491, termCount0, termCount0, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491, 1010.9307014503491);
      TermCount termCount1 = mock(TermCount.class, new ViolatedAssumptionAnswer());
      teachersStatisticsSummary0.setMin(termCount1);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToGradeRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageFailureDueToAbsenceRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuspendedRate(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getTeachersCount(), 0.01);
      assertEquals(1010.9307014503491, teachersStatisticsSummary0.getAverageSuccessRate(), 0.01);
  }
}
