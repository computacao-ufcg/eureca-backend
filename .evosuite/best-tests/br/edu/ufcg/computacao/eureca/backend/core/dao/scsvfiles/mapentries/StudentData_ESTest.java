/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:56:55 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.NationalIdRegistrationKey;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.StudentData;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import br.edu.ufcg.computacao.eureca.backend.core.models.StudentStatus;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentData_ESTest extends StudentData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      studentData0.setStatus(studentStatus0);
      boolean boolean0 = studentData0.isDropout();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      studentData0.setStatus(studentStatus0);
      boolean boolean0 = studentData0.isAlumnus();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      studentData0.setStatus(studentStatus0);
      boolean boolean0 = studentData0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getSuspendedTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setSuspendedTerms(893);
      int int0 = studentData0.getSuspendedTerms();
      assertEquals(893, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      studentData0.setStatus(studentStatus0);
      String string0 = studentData0.getStatusTerm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ALUMNUS;
      studentData0.setStatus(studentStatus0);
      studentData0.setStatusTerm("");
      String string0 = studentData0.getStatusTerm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      studentData0.setStatus(studentStatus0);
      String string0 = studentData0.getStatusStr();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StudentData studentData0 = new StudentData("J)kysC(%l", "J)kysC(%l", "J)kysC(%l", "J)kysC(%l", "J)kysC(%l", "J)kysC(%l", "BY!QL;x!#", "BY!QL;x!#", "_sVFB", "J)kysC(%l", "_sVFB", "BY!QL;x!#", "_sVFB", "_sVFB", "J)kysC(%l", "_sVFB", "J)kysC(%l", (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), (-2051), 1.0);
      String string0 = studentData0.getStatusStr();
      assertEquals((-2051), studentData0.getComplementaryHours());
      assertEquals("BY!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("J)kysC(%l", studentData0.getName());
      assertEquals("_sVFB", studentData0.getNationality());
      assertEquals("J)kysC(%l", studentData0.getCurriculumCode());
      assertEquals("", string0);
      assertEquals("BY!QL;x!#", studentData0.getEmail());
      assertEquals("J)kysC(%l", studentData0.getAffirmativePolicy());
      assertEquals("J)kysC(%l", studentData0.getMaritalStatus());
      assertEquals("_sVFB", studentData0.getPlaceOfBirth());
      assertEquals("_sVFB", studentData0.getRace());
      assertEquals("J)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("BY!QL;x!#", studentData0.getCountry());
      assertEquals("_sVFB", studentData0.getCourseCode());
      assertEquals("_sVFB", studentData0.getGender());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getSecondarySchoolGraduationYear();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "= 9WYs?r0", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "log4j: ", "numHashFunctions (%s) must be <= 255", "P.CfiBEGo\u0004{(4Y", "O62!5!", 0, 0, (-791), (-2054598925), (-2054598925), 0, (-791), (-2054598925), 657.4437399135658, 0, (-2054598925), (-1885788205), (-791), 110, (-1885788205));
      String string0 = studentData0.getSecondarySchoolGraduationYear();
      assertEquals("= 9WYs?r0", studentData0.getSecondarySchool());
      assertEquals((-791), studentData0.getOptionalHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getMaritalStatus());
      assertEquals("= 9WYs?r0", studentData0.getGender());
      assertEquals("log4j: ", studentData0.getRace());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals("P.CfiBEGo\u0004{(4Y", studentData0.getCourseCode());
      assertEquals("= 9WYs?r0", studentData0.getPlaceOfBirth());
      assertEquals((-2054598925), studentData0.getComplementaryHours());
      assertEquals((-2054598925), studentData0.getCompletedCredits());
      assertEquals("O62!5!", studentData0.getCurriculumCode());
      assertEquals("= 9WYs?r0", studentData0.getBirthDate());
      assertEquals("numHashFunctions (%s) must be <= 255", string0);
      assertEquals("= 9WYs?r0", studentData0.getAffirmativePolicy());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getDisabilities());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getCountry());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getSecondarySchool();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      String string0 = studentData0.getSecondarySchool();
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals("", string0);
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals("", studentData0.getDisabilities());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("uy'qKvM", studentData0.getRace());
      assertEquals(", country='", studentData0.getEmail());
      assertEquals(", country='", studentData0.getNationality());
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setRace("StudentData{name='null', birthDate='null', email='null', gender='h`8*', maritalStatus='null', nationality='null', country='null', placeOfBirth='null', race='null', status='null', termStatus='null', admission='null', admissionTerm='null', disabilities='null', affirmativeAction='null', secondarySchool='@1*.LU+b'F.rhe>%fH', secondarySchoolGraduationYear='null', courseCode='null', curriculumCode='null', mandatoryHours=0, mandatoryCredits=0, optionalHours=0, optionalCredits=0, complementaryHours=0, complementaryCredits=0, gpa=0.0, mc=-107.29844059777253, iea=0.0, termsCount=0, suspendedTerms=0, institutionalTerms=0, mobilityTerms=0, enrolledCredits=0, admissionGrade=0.0}");
      String string0 = studentData0.getRace();
      assertEquals("StudentData{name='null', birthDate='null', email='null', gender='h`8*', maritalStatus='null', nationality='null', country='null', placeOfBirth='null', race='null', status='null', termStatus='null', admission='null', admissionTerm='null', disabilities='null', affirmativeAction='null', secondarySchool='@1*.LU+b'F.rhe>%fH', secondarySchoolGraduationYear='null', courseCode='null', curriculumCode='null', mandatoryHours=0, mandatoryCredits=0, optionalHours=0, optionalCredits=0, complementaryHours=0, complementaryCredits=0, gpa=0.0, mc=-107.29844059777253, iea=0.0, termsCount=0, suspendedTerms=0, institutionalTerms=0, mobilityTerms=0, enrolledCredits=0, admissionGrade=0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setRace("");
      String string0 = studentData0.getRace();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", (String) null, "%^", "%^", "kcyo!v{P", "Dg &(_);", "[log4j.configDebug] is deprecated. Use [log4j.debug] instead.", "|9#!.}xj^B}wwBO*", (String) null, " and ", ", status='", "|9#!.}xj^B}wwBO*", "numHashFunctions (%s) must be <= 255", ")", "r#~", 604, 604, 604, 604, (-1789569704), 604, 0.0, 0.0, 0.03, (-870), 604, (-870), 604, 604, 0.03);
      String string0 = studentData0.getPlaceOfBirth();
      assertEquals(" and ", studentData0.getCountry());
      assertEquals(", status='", string0);
      assertEquals("kcyo!v{P", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("%^", studentData0.getBirthDate());
      assertEquals(1812, studentData0.getCompletedCredits());
      assertEquals("[log4j.configDebug] is deprecated. Use [log4j.debug] instead.", studentData0.getGender());
      assertEquals(")", studentData0.getCourseCode());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getDisabilities());
      assertEquals("|9#!.}xj^B}wwBO*", studentData0.getRace());
      assertEquals("%^", studentData0.getSecondarySchool());
      assertEquals("r#~", studentData0.getCurriculumCode());
      assertEquals((-1789569704), studentData0.getComplementaryHours());
      assertEquals("|9#!.}xj^B}wwBO*", studentData0.getMaritalStatus());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getName());
      assertEquals(604, studentData0.getOptionalHours());
      assertEquals("Dg &(_);", studentData0.getEmail());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setOptionalHours(206);
      int int0 = studentData0.getOptionalHours();
      assertEquals(206, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setOptionalHours((-707));
      int int0 = studentData0.getOptionalHours();
      assertEquals((-707), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getOptionalCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setOptionalCredits(343);
      int int0 = studentData0.getOptionalCredits();
      assertEquals(343, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setNationality(", curriculumCode='");
      String string0 = studentData0.getNationality();
      assertEquals(", curriculumCode='", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setNationality("");
      String string0 = studentData0.getNationality();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getMobilityTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMobilityTerms(74);
      int int0 = studentData0.getMobilityTerms();
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      double double0 = studentData0.getMc();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMc((-107.29844059777253));
      double double0 = studentData0.getMc();
      assertEquals((-107.29844059777253), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMaritalStatus(", suspendedTerms=");
      String string0 = studentData0.getMaritalStatus();
      assertEquals(", suspendedTerms=", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMaritalStatus("");
      String string0 = studentData0.getMaritalStatus();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getMandatoryHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMandatoryHours(3353);
      int int0 = studentData0.getMandatoryHours();
      assertEquals(3353, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMandatoryCredits(206);
      int int0 = studentData0.getMandatoryCredits();
      assertEquals(206, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setMandatoryCredits((-1470516325));
      int int0 = studentData0.getMandatoryCredits();
      assertEquals((-1470516325), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setInstitutionalEnrollments(1130);
      int int0 = studentData0.getInstitutionalEnrollments();
      assertEquals(1130, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "= 9WYs?r0", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "YA=vrfo|", "log4j: ", "numHashFunctions (%s) must be <= 255", "P.CfiBEGo\u0004{(4Y", "O62!5!", 0, 1543, (-791), (-2054598925), (-2054598925), 0, (-791), (-2054598925), 657.4437399135658, 0, (-2054598925), (-1885788205), (-791), 110, (-1885788205));
      int int0 = studentData0.getInstitutionalEnrollments();
      assertEquals("= 9WYs?r0", studentData0.getBirthDate());
      assertEquals(1543, studentData0.getMandatoryCredits());
      assertEquals((-1885788205), int0);
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getName());
      assertEquals("= 9WYs?r0", studentData0.getAffirmativePolicy());
      assertEquals("= 9WYs?r0", studentData0.getSecondarySchool());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getCountry());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getDisabilities());
      assertEquals("O62!5!", studentData0.getCurriculumCode());
      assertEquals("log4j: ", studentData0.getRace());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getMaritalStatus());
      assertEquals("= 9WYs?r0", studentData0.getGender());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals("YA=vrfo|", studentData0.getPlaceOfBirth());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getEmail());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getNationality());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-2054598925), studentData0.getComplementaryHours());
      assertEquals("P.CfiBEGo\u0004{(4Y", studentData0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      double double0 = studentData0.getIea();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "= 9WYs?r0", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "log4j: ", "numHashFunctions (%s) must be <= 255", "P.CfiBEGo\u0004{(4Y", "O62!5!", 0, 0, (-791), (-2054598925), (-2054598925), 0, (-791), (-2054598925), 657.4437399135658, 0, (-2054598925), (-1885788205), (-791), 110, (-1885788205));
      studentData0.getIea();
      assertEquals((-791), studentData0.getOptionalHours());
      assertEquals("= 9WYs?r0", studentData0.getBirthDate());
      assertEquals("= 9WYs?r0", studentData0.getAffirmativePolicy());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getName());
      assertEquals("= 9WYs?r0", studentData0.getSecondarySchool());
      assertEquals("O62!5!", studentData0.getCurriculumCode());
      assertEquals("= 9WYs?r0", studentData0.getPlaceOfBirth());
      assertEquals((-2054598925), studentData0.getCompletedCredits());
      assertEquals("log4j: ", studentData0.getRace());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getCountry());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getDisabilities());
      assertEquals("= 9WYs?r0", studentData0.getGender());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals((-2054598925), studentData0.getComplementaryHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getNationality());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getEmail());
      assertEquals("P.CfiBEGo\u0004{(4Y", studentData0.getCourseCode());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setGpa(1.0);
      double double0 = studentData0.getGpa();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setGpa((-1.0));
      double double0 = studentData0.getGpa();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setGender("'4NmD8}6yK7");
      String string0 = studentData0.getGender();
      assertEquals("'4NmD8}6yK7", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setGender("");
      String string0 = studentData0.getGender();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getEnrolledCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "= 9WYs?r0", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "log4j: ", "numHashFunctions (%s) must be <= 255", "P.CfiBEGo\u0004{(4Y", "O62!5!", 0, 0, (-791), (-2054598925), (-2054598925), 0, (-791), (-2054598925), 657.4437399135658, 0, (-2054598925), (-1885788205), (-791), 110, (-1885788205));
      int int0 = studentData0.getEnrolledCredits();
      assertEquals("O62!5!", studentData0.getCurriculumCode());
      assertEquals("= 9WYs?r0", studentData0.getPlaceOfBirth());
      assertEquals("= 9WYs?r0", studentData0.getAffirmativePolicy());
      assertEquals((-2054598925), studentData0.getComplementaryHours());
      assertEquals(110, int0);
      assertEquals("= 9WYs?r0", studentData0.getBirthDate());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getMaritalStatus());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getCountry());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getDisabilities());
      assertEquals((-791), studentData0.getOptionalHours());
      assertEquals("= 9WYs?r0", studentData0.getSecondarySchool());
      assertEquals("= 9WYs?r0", studentData0.getGender());
      assertEquals("P.CfiBEGo\u0004{(4Y", studentData0.getCourseCode());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getEmail());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getNationality());
      assertEquals("log4j: ", studentData0.getRace());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", ountry=", ", ountry=", (String) null, (String) null, ", ountry=", (String) null, "Functions.identity()", ", ountry=", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), (-2228), (-2228), (-2228), (-797), (-2228), 5270);
      String string0 = studentData0.getEmail();
      assertEquals("", studentData0.getDisabilities());
      assertEquals(", ountry=", string0);
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals(", ountry=", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(", ountry=", studentData0.getRace());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals(", ountry=", studentData0.getNationality());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getDisabilities();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      String string0 = studentData0.getDisabilities();
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
      assertNotNull(string0);
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("", string0);
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("uy'qKvM", studentData0.getRace());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals(", country='", studentData0.getNationality());
      assertEquals(", country='", studentData0.getEmail());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCurriculumCode(":eg0o$");
      String string0 = studentData0.getCurriculumCode();
      assertEquals(":eg0o$", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCurriculumCode("");
      String string0 = studentData0.getCurriculumCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      
      studentData0.setCourseCode((String) null);
      studentData0.getCourseCode();
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("rs]", studentData0.getGender());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCourseCode("");
      String string0 = studentData0.getCourseCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getCountry();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, 1381, 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      studentData0.setCountry("");
      studentData0.getCountry();
      assertEquals("", studentData0.getDisabilities());
      assertEquals(", country='", studentData0.getNationality());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals(", country='", studentData0.getEmail());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals("uy'qKvM", studentData0.getRace());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals(1381, studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getCompletedTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-1.0), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      studentData0.getCompletedTerms();
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("uy'qKvM", studentData0.getRace());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals("", studentData0.getDisabilities());
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(", country='", studentData0.getEmail());
      assertEquals(", country='", studentData0.getNationality());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryCredits(1197);
      int int0 = studentData0.getCompletedCredits();
      assertEquals(1197, studentData0.getComplementaryCredits());
      assertEquals(1197, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      int int0 = studentData0.getCompletedCredits();
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-1133168321), int0);
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryHours(49);
      int int0 = studentData0.getComplementaryHours();
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryHours((-1077));
      int int0 = studentData0.getComplementaryHours();
      assertEquals((-1077), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryCredits(84);
      int int0 = studentData0.getComplementaryCredits();
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getBirthDate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setBirthDate("");
      String string0 = studentData0.getBirthDate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAttemptedCredits(74);
      int int0 = studentData0.getAttemptedCredits();
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAttemptedCredits((-1589));
      int int0 = studentData0.getAttemptedCredits();
      assertEquals((-1589), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getAffirmativePolicy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAffirmativePolicy("");
      String string0 = studentData0.getAffirmativePolicy();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionTerm("");
      String string0 = studentData0.getAdmissionTerm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionStr(")$8 CGv;X");
      String string0 = studentData0.getAdmissionStr();
      assertEquals(")$", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionTerm("");
      studentData0.setAdmissionStr("");
      String string0 = studentData0.getAdmissionStr();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      studentData0.setAdmissionGrade(0.0);
      double double0 = studentData0.getAdmissionGrade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "= 9WYs?r0", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "YA=vrfo|", "log4j: ", "numHashFunctions (%s) must be <= 255", "P.CfiBEGo\u0004{(4Y", "O62!5!", 0, 1543, (-791), (-2054598925), (-2054598925), 0, (-791), (-2054598925), 657.4437399135658, 0, (-2054598925), (-1885788205), (-791), 110, (-1885788205));
      studentData0.getAdmissionGrade();
      assertEquals("= 9WYs?r0", studentData0.getBirthDate());
      assertEquals("P.CfiBEGo\u0004{(4Y", studentData0.getCourseCode());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getEmail());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getNationality());
      assertEquals((-791), studentData0.getOptionalHours());
      assertEquals((-2054598925), studentData0.getComplementaryHours());
      assertEquals("= 9WYs?r0", studentData0.getGender());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getMaritalStatus());
      assertEquals((-2054597382), studentData0.getCompletedCredits());
      assertEquals("YA=vrfo|", studentData0.getPlaceOfBirth());
      assertEquals("log4j: ", studentData0.getRace());
      assertEquals("O62!5!", studentData0.getCurriculumCode());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getCountry());
      assertEquals("= 9WYs?r0", studentData0.getSecondarySchool());
      assertEquals("= 9WYs?r0", studentData0.getAffirmativePolicy());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getName());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-1.0), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      assertEquals((-2228), studentData0.getMandatoryHours());
      
      studentData0.setMandatoryHours(8233);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Stack<String> stack0 = new Stack<String>();
      Curriculum curriculum0 = new Curriculum("Functions.identity()", "'JK,G/P=@g'6", arrayList0, (ArrayList<Integer>) null, arrayList0, arrayList0, arrayList0, (-2228), 87855567, (-3029), 5270, (-94), (-797), (-797), 34, 327, 34, stack0, stack0, stack0, stack0, stack0);
      studentData0.createStudent(nationalIdRegistrationKey0, curriculum0);
      assertEquals((-797), studentData0.getMobilityTerms());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("}!`", "CharMatcher.javaLetterOrDigit()");
      StudentData studentData0 = new StudentData(", disabilities='", "I0)kysC(%l", "CharMatcher.javaLetterOrDigit()", "6dj65*)3S\t^}y@", "", (String) null, "I0)kysC(%l", "", "5,X;G!", "Nb6$@{75D(`h8", "5,X;G!", "%s mut b", ", birthDate='", "Cdi", "6dj65*)3S\t^}y@", "$$}&i", ", suspendedTerms=", (-2293), 7, (-595), (-2293), 926, 942, 63, (-608.989), 63, 63, (-595), 9, (-2687), (-1970489737), 63);
      Student student0 = studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals("", student0.getBirthDate());
      assertEquals("", student0.getEmail());
      assertEquals("CharMatcher.javaLetterOr", student0.getAdmissionStr());
      assertEquals("5,X;G!", student0.getNationality());
      assertEquals("6dj65*)3S\t^}y@", student0.getDisabilities());
      assertEquals((-595), student0.getSuspendedTerms());
      assertEquals("Cdi", student0.getRace());
      assertEquals("6dj65*)3S\t^}y@", student0.getAffirmativePolicy());
      assertEquals("I0)kysC(%l", student0.getSecondarySchoolGraduationYear());
      assertEquals("$$}&i", student0.getCourseCode());
      assertEquals((-2293), student0.getMandatoryHours());
      assertEquals("Nb6$@{75D(`h8", student0.getMaritalStatus());
      assertEquals(", suspendedTerms=", student0.getCurriculumCode());
      assertEquals("%s mut b", student0.getCountry());
      assertEquals("I", student0.getStatusStr());
      assertEquals("5,X;G!", student0.getGender());
      assertEquals((-1344), student0.getCompletedCredits());
      assertEquals(926, student0.getComplementaryHours());
      assertEquals((-595), student0.getOptionalHours());
      assertEquals("igit()", student0.getAdmissionTerm());
      assertEquals("kysC%l", student0.getStatusTerm());
      assertEquals((-1970489737), student0.getEnrolledCredits());
      assertEquals(", disabilities='", student0.getName());
      assertEquals(9, student0.getInstitutionalEnrollments());
      assertEquals(", birthDate='", student0.getPlaceOfBirth());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-1.0), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      studentData0.setAttemptedCredits(20);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Stack<String> stack0 = new Stack<String>();
      Curriculum curriculum0 = new Curriculum("Functions.identity()", "'JK,G/P=@g'6", arrayList0, (ArrayList<Integer>) null, arrayList0, arrayList0, arrayList0, (-2228), 87855567, (-3029), 5270, (-94), (-797), (-797), 34, 327, 34, stack0, stack0, stack0, stack0, stack0);
      studentData0.createStudent(nationalIdRegistrationKey0, curriculum0);
      assertEquals(20, studentData0.getAttemptedCredits());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", (String) null, (String) null, "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "4MpTtoXHSYNaz;", "Functions.identity()", (-2228), 1386, 1386, 1386, 1386, 1386, (-2228), 1386, (-2228), (-2228), (-2228), (-2228), (-2228), (-2228), 1386);
      studentData0.setAttemptedCredits((-2228));
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Curriculum curriculum0 = new Curriculum("M>'*ci$Df8K38mRi ", "", arrayList0, arrayList0, arrayList0, arrayList0, arrayList0, 461845907, (-2228), 934, 741, (-1638781507), 461845907, (-2228), 741, 110, 461845907, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      studentData0.createStudent(nationalIdRegistrationKey0, curriculum0);
      assertEquals((-2228), studentData0.getAttemptedCredits());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("BloomFilters must have equal strategies (%s != %s)");
      studentData0.setAdmissionTerm("");
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      Student student0 = studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals(0, student0.getAttemptedCredits());
      assertEquals("must have equal strategies %", student0.getStatusStr());
      assertEquals(0, student0.getCompletedCredits());
      assertEquals(0, student0.getMobilityTerms());
      assertEquals(0.0, student0.getIea(), 0.01);
      assertEquals(0, student0.getInstitutionalEnrollments());
      assertEquals(0, student0.getMandatoryHours());
      assertEquals(" != %s", student0.getStatusTerm());
      assertEquals(0.0, student0.getGpa(), 0.01);
      assertEquals(0, student0.getSuspendedTerms());
      assertEquals(0.0, student0.getAdmissionGrade(), 0.01);
      assertEquals(0, student0.getOptionalHours());
      assertEquals(0, student0.getCompletedTerms());
      assertEquals(0, student0.getComplementaryHours());
      assertEquals(0, student0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StudentData studentData0 = new StudentData(" ", "numHashFunctions (%s) mut be <= 255", "com.google.common.collect.Maps$BiMapConverter", "OA", "INTERFACE_ONLY", " ", " ", (String) null, "^!_<J", "3`4", "ao`P|N?J F<_J3\"(e", " ", " ", (String) null, (String) null, (String) null, "^!_<J", (-1387), (-1387), (-1387), 558, (-1387), 558, (-1387), (-1387), 578.97963, (-1387), 558, 9, 8, 9, 8);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey();
      Student student0 = studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals((-1387), student0.getMandatoryHours());
      assertEquals("<= 255", student0.getStatusTerm());
      assertEquals("%s mut be", student0.getStatusStr());
      assertEquals((-1387), student0.getOptionalHours());
      assertEquals(" ", student0.getName());
      assertEquals((-1387.0), student0.getMc(), 0.01);
      assertEquals(" ", student0.getCountry());
      assertEquals(558, student0.getSuspendedTerms());
      assertEquals("ao`P|N?J F<_J3\"(e", student0.getNationality());
      assertEquals(9, student0.getInstitutionalEnrollments());
      assertEquals("com.google.common.collect.Maps$BiMapCo", student0.getAdmissionStr());
      assertEquals(" ", student0.getPlaceOfBirth());
      assertEquals("3`4", student0.getMaritalStatus());
      assertEquals("verter", student0.getAdmissionTerm());
      assertEquals((-1387), student0.getComplementaryHours());
      assertEquals((-271), student0.getCompletedCredits());
      assertEquals("^!_<J", student0.getCurriculumCode());
      assertEquals("INTERFACE_ONLY", student0.getBirthDate());
      assertEquals("OA", student0.getAffirmativePolicy());
      assertEquals(" ", student0.getSecondarySchool());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("R `j&L:7(@x");
      // Undeclared exception!
      try { 
        studentData0.isDropout();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr(", admissionTerm='");
      // Undeclared exception!
      try { 
        studentData0.isAlumnus();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("] using ");
      // Undeclared exception!
      try { 
        studentData0.isActive();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("nt/EF0[1J|I8N!Bi7+X");
      // Undeclared exception!
      try { 
        studentData0.getStatusTerm();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("$Xu");
      // Undeclared exception!
      try { 
        studentData0.getStatusStr();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr(", affirmativeAction='");
      // Undeclared exception!
      try { 
        studentData0.getStatus();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionStr("^B");
      // Undeclared exception!
      try { 
        studentData0.getAdmissionTerm();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionStr("biY");
      // Undeclared exception!
      try { 
        studentData0.getAdmissionStr();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StudentData studentData0 = null;
      try {
        studentData0 = new StudentData("", "CharMatcher.javaLetterOrDigit()", "", "CharMatcher.javaLetterOrDigit()", "}!`", "", ", suspendedTerms=", "", "", "", "", "", "", "CharMatcher.javaLetterOrDigit()", "", "", "?Z>#ar+Y*P$&S,RSm?", 63, (-595), 63, 7, (-2293), 201, 7, 201, 7, (-2293), (-595), 7, (-3329), 201, (-1467.116064));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StudentData studentData0 = null;
      try {
        studentData0 = new StudentData("com.google.common.collect.DiscreteDomain$LongDomain", (String) null, "com.google.common.collect.DiscreteDomain$LongDomain", "com.google.common.collect.DiscreteDomain$LongDomain", (String) null, "^BWC", "log4j.rootLogger", "com.google.common.collect.DiscreteDomain$LongDomain", "should never be called", "^BWC", ".vyDhD1R", "", "", "", (String) null, "", "", (-871), 0, (-871), 0, 0, (-1138), (-526.0567436), (-871), (-526.0567436), 0, (-871), (-2568), 0, 0, 2842.990977432393);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      String string0 = studentData0.getAdmissionTerm();
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("rs]", studentData0.getGender());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals("ysC(%l", string0);
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", ", race='", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "'t(y. U*13aX7d`)b", ", curriculumCode='", ", race='", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 1.0);
      String string0 = studentData0.getStatusTerm();
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals("'t(y. U*13aX7d`)b", studentData0.getDisabilities());
      assertEquals("*Ss@R", studentData0.getBirthDate());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals(", race='", studentData0.getCurriculumCode());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("kysC%l", string0);
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("rs]", studentData0.getGender());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals(", race='", studentData0.getNationality());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("J0)kysC(%l", studentData0.getName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", "", "", (String) null, (String) null, "", (String) null, "Functions.identity()", "", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), (-2228), (-2228), (-2228), (-797), (-2228), 5270);
      StudentStatus studentStatus0 = studentData0.getStatus();
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals(StudentStatus.DROPOUT, studentStatus0);
      assertEquals("", studentData0.getDisabilities());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals("", studentData0.getRace());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("", studentData0.getNationality());
      assertEquals("", studentData0.getEmail());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals(1381, studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", "", "", (String) null, (String) null, "", (String) null, "Functions.identity()", "", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), (-2228), (-2228), (-2228), (-797), (-2228), 5270);
      String string0 = studentData0.getStatusStr();
      assertEquals("", studentData0.getEmail());
      assertEquals("", studentData0.getNationality());
      assertEquals("Functions.i", string0);
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals("", studentData0.getDisabilities());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("", studentData0.getRace());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getStatusStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      String string0 = studentData0.getCourseCode();
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals(", curriculumCode='", string0);
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-2051), studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "= 9WYs?r0", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "YA=vrfo|", "log4j: ", "numHashFunctions (%s) must be <= 255", "P.CfiBEGo\u0004{(4Y", "O62!5!", 0, 1543, (-791), (-2054598925), (-2054598925), 0, (-791), (-2054598925), 657.4437399135658, 0, (-2054598925), (-1885788205), (-791), 110, (-1885788205));
      int int0 = studentData0.getOptionalCredits();
      assertEquals("P.CfiBEGo\u0004{(4Y", studentData0.getCourseCode());
      assertEquals((-2054598925), studentData0.getComplementaryHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getNationality());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getEmail());
      assertEquals("= 9WYs?r0", studentData0.getGender());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getDisabilities());
      assertEquals("log4j: ", studentData0.getRace());
      assertEquals("= 9WYs?r0", studentData0.getAffirmativePolicy());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getCountry());
      assertEquals("YA=vrfo|", studentData0.getPlaceOfBirth());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("O62!5!", studentData0.getCurriculumCode());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getName());
      assertEquals("= 9WYs?r0", studentData0.getSecondarySchool());
      assertEquals((-791), studentData0.getOptionalHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getMaritalStatus());
      assertEquals((-2054597382), studentData0.getCompletedCredits());
      assertEquals("= 9WYs?r0", studentData0.getBirthDate());
      assertEquals((-2054598925), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      String string0 = studentData0.getDisabilities();
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("rs]", studentData0.getGender());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("Y!QL;x!#", string0);
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getNationality();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "= 9WYs?r0", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "numHashFunctions (%s) must be <= 255", "= 9WYs?r0", "log4j: ", "numHashFunctions (%s) must be <= 255", "P.CfiBEGo\u0004{(4Y", "O62!5!", 0, 0, (-791), (-2054598925), (-2054598925), 0, (-791), (-2054598925), 657.4437399135658, 0, (-2054598925), (-1885788205), (-791), 110, (-1885788205));
      int int0 = studentData0.getSuspendedTerms();
      assertEquals((-2054598925), int0);
      assertEquals((-791), studentData0.getOptionalHours());
      assertEquals("= 9WYs?r0", studentData0.getSecondarySchool());
      assertEquals("= 9WYs?r0", studentData0.getBirthDate());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getCountry());
      assertEquals("= 9WYs?r0", studentData0.getPlaceOfBirth());
      assertEquals("O62!5!", studentData0.getCurriculumCode());
      assertEquals("= 9WYs?r0", studentData0.getAffirmativePolicy());
      assertEquals((-2054598925), studentData0.getComplementaryHours());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getName());
      assertEquals((-2054598925), studentData0.getCompletedCredits());
      assertEquals("= 9WYs?r0", studentData0.getGender());
      assertEquals("P.CfiBEGo\u0004{(4Y", studentData0.getCourseCode());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getNationality());
      assertEquals("numHashFunctions (%s) must be <= 255", studentData0.getEmail());
      assertEquals("log4j: ", studentData0.getRace());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getRace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-1.0), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      String string0 = studentData0.getName();
      assertEquals("", studentData0.getDisabilities());
      assertEquals(", country='", studentData0.getNationality());
      assertEquals(", country='", studentData0.getEmail());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals("Functions.identity()", string0);
      assertEquals("uy'qKvM", studentData0.getRace());
      assertNotNull(string0);
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-2228), studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", "", "", (String) null, (String) null, "", (String) null, "Functions.identity()", "", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), (-2228), (-2228), (-2228), (-797), (-2228), 5270);
      studentData0.getSecondarySchoolGraduationYear();
      assertEquals("", studentData0.getNationality());
      assertEquals("", studentData0.getEmail());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals("", studentData0.getRace());
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals((-2228), studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "_>P4x2tzX", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "_>P4x2tzX", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 1.0);
      studentData0.getEnrolledCredits();
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("*Ss@R", studentData0.getBirthDate());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("_>P4x2tzX", studentData0.getNationality());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getDisabilities());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("_>P4x2tzX", studentData0.getCourseCode());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getOptionalHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      String string0 = studentData0.getSecondarySchool();
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("J0)kysC(%l", string0);
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals((-2051), studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-1.0), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      int int0 = studentData0.getMobilityTerms();
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("", studentData0.getDisabilities());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("uy'qKvM", studentData0.getRace());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals(", country='", studentData0.getEmail());
      assertEquals(", country='", studentData0.getNationality());
      assertEquals((-797), int0);
      assertEquals(1381, studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", ", race='", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "'t(y. U*13aX7d`)b", ", curriculumCode='", ", race='", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 1.0);
      String string0 = studentData0.getAffirmativePolicy();
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals(", race='", studentData0.getNationality());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals("*Ss@R", studentData0.getBirthDate());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("rs]", studentData0.getGender());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("_>P4x2tzX", string0);
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals(", race='", studentData0.getCurriculumCode());
      assertEquals("'t(y. U*13aX7d`)b", studentData0.getDisabilities());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getComplementaryHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", ", race='", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "'t(y. U*13aX7d`)b", ", curriculumCode='", ", race='", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 1.0);
      studentData0.getMc();
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals(", race='", studentData0.getNationality());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals(", race='", studentData0.getCurriculumCode());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("'t(y. U*13aX7d`)b", studentData0.getDisabilities());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("*Ss@R", studentData0.getBirthDate());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-1.0), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      String string0 = studentData0.getBirthDate();
      assertEquals("", studentData0.getDisabilities());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("uy'qKvM", studentData0.getRace());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertNotNull(string0);
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals("Functions.identity()", string0);
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
      assertEquals(", country='", studentData0.getEmail());
      assertEquals(", country='", studentData0.getNationality());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getMaritalStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "_>P4x2tzX", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      studentData0.getCompletedTerms();
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("_>P4x2tzX", studentData0.getBirthDate());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-2051), studentData0.getMandatoryHours());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", "", "", (String) null, (String) null, "", (String) null, "Functions.identity()", "", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-2228), 5270, (-2228), (-2228), (-2228), (-2228), (-797), (-2228), 5270);
      String string0 = studentData0.getEmail();
      assertEquals("", studentData0.getRace());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", studentData0.getDisabilities());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals(8032, studentData0.getCompletedCredits());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals("", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("", studentData0.getNationality());
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "", ", country='", ", country='", (String) null, (String) null, ", country='", (String) null, "Functions.identity()", "uy'qKvM", "", "4MpTtoXHSYNaz;", (String) null, (-2228), 1381, 1381, 1381, 1381, 5270, (-1.0), 5270, (-2228), 8233, 8233, 8233, (-797), 8233, 5270);
      studentData0.getAdmissionGrade();
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals(1381, studentData0.getOptionalHours());
      assertEquals("Functions.identity()", studentData0.getBirthDate());
      assertEquals(1381, studentData0.getComplementaryHours());
      assertEquals("Functions.identity()", studentData0.getName());
      assertEquals(1381, studentData0.getMandatoryCredits());
      assertEquals("Functions.identity()", studentData0.getPlaceOfBirth());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals("uy'qKvM", studentData0.getRace());
      assertEquals("", studentData0.getSecondarySchool());
      assertEquals("", studentData0.getDisabilities());
      assertEquals("Functions.identity()", studentData0.getAffirmativePolicy());
      assertEquals(", country='", studentData0.getNationality());
      assertEquals(", country='", studentData0.getEmail());
      assertEquals(", country='", studentData0.getSecondarySchoolGraduationYear());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getPlaceOfBirth();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      double double0 = studentData0.getGpa();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      studentData0.getIea();
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals((-1133165645), studentData0.getOptionalHours());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getMandatoryCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      String string0 = studentData0.getCountry();
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals("org.apache.log4j.PropertyConfigurator", string0);
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getComplementaryCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.getGender();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      int int0 = studentData0.getMandatoryHours();
      assertEquals((-2051), int0);
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getRace());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals(7, studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StudentData studentData0 = new StudentData("J0)kysC(%l", "J0)kysC(%l", "J0)kysC(%l", "_>P4x2tzX", "dD*Ss@R", "J0)kysC(%l", "Y!QL;x!#", "Y!QL;x!#", "rs]", "_>P4x2tzX", "Y!QL;x!#", "org.apache.log4j.PropertyConfigurator", "]@pk'3Fb<?p4wBR6", "]@pk'3Fb<?p4wBR6", "Y!QL;x!#", ", curriculumCode='", "I&Q-]VV", (-2051), (-1133165645), (-1133165645), (-2051), 7, (-625), (-2051), 7, (-2051), (-1133165645), 6, (-2051), 6, (-1133165645), 4.9E-324);
      int int0 = studentData0.getAttemptedCredits();
      assertEquals("rs]", studentData0.getGender());
      assertEquals((-1133168321), studentData0.getCompletedCredits());
      assertEquals("Y!QL;x!#", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("]@pk'3Fb<?p4wBR6", studentData0.getPlaceOfBirth());
      assertEquals("Y!QL;x!#", studentData0.getDisabilities());
      assertEquals((-2051), studentData0.getMandatoryHours());
      assertEquals("J0)kysC(%l", studentData0.getName());
      assertEquals(", curriculumCode='", studentData0.getCourseCode());
      assertEquals("Y!QL;x!#", studentData0.getEmail());
      assertEquals("Y!QL;x!#", studentData0.getNationality());
      assertEquals("_>P4x2tzX", studentData0.getMaritalStatus());
      assertEquals("_>P4x2tzX", studentData0.getAffirmativePolicy());
      assertEquals((-1133165645), studentData0.getOptionalHours());
      assertEquals("org.apache.log4j.PropertyConfigurator", studentData0.getCountry());
      assertEquals("I&Q-]VV", studentData0.getCurriculumCode());
      assertEquals(7, studentData0.getComplementaryHours());
      assertEquals(0, int0);
      assertEquals("dD*Ss@R", studentData0.getBirthDate());
      assertEquals("J0)kysC(%l", studentData0.getSecondarySchool());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      int int0 = studentData0.getInstitutionalEnrollments();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StudentData studentData0 = new StudentData("com.google.common.hash.BloomFilter$SerialForm", "Ativo", "com.google.common.hash.BloomFilter$SerialForm", "com.google.common.hash.BloomFilter$SerialForm", "com.google.common.hash.BloomFilter$SerialForm", "com.google.common.hash.BloomFilter$SerialForm", "com.google.common.hash.BloomFilter$SerialForm", "/h<m`n@V{;/<", "com.google.common.hash.BloomFilter$SerialForm", "/h<m`n@V{;/<", "com.google.common.hash.BloomFilter$SerialForm", "com.google.common.hash.BloomFilter$SerialForm", "Ativo", "Ativo", "com.google.common.hash.BloomFilter$SerialForm", "com.google.common.hash.BloomFilter$SerialForm", "Ativo", 1096, 20, 1096, 1096, (-225), (-1), 1.0, 1096, (-1), 2554, 1096, (-2184), 1096, (-1), (-225));
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getSecondarySchoolGraduationYear());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getAffirmativePolicy());
      assertEquals(1115, studentData0.getCompletedCredits());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getGender());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getCountry());
      assertEquals("Ativo", studentData0.getCurriculumCode());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getDisabilities());
      assertEquals(1096, studentData0.getOptionalHours());
      assertEquals("/h<m`n@V{;/<", studentData0.getMaritalStatus());
      assertEquals("Ativo", studentData0.getRace());
      assertEquals("Ativo", studentData0.getPlaceOfBirth());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getCourseCode());
      assertEquals((-225), studentData0.getComplementaryHours());
      assertEquals(1096, studentData0.getMandatoryHours());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getSecondarySchool());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getBirthDate());
      assertEquals("com.google.common.hash.BloomFilter$SerialForm", studentData0.getNationality());
      assertEquals("/h<m`n@V{;/<", studentData0.getEmail());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.isDropout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StudentData studentData0 = new StudentData("CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", (-1641260312), (-1641260312), (-1641260312), (-3378), (-1641260312), (-1641260312), (-3378), (-3378), (-1641260312), (-1641260312), (-3378), (-1641260312), (-3378), (-1641260312), (-3378));
      boolean boolean0 = studentData0.isDropout();
      assertEquals((-1641260312), studentData0.getMandatoryHours());
      assertEquals((-1641260312), studentData0.getComplementaryHours());
      assertTrue(boolean0);
      assertEquals((-1641260312), studentData0.getOptionalHours());
      assertEquals(1012443294, studentData0.getCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.isAlumnus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StudentData studentData0 = new StudentData("Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", (String) null, (String) null, "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "Functions.identity()", "4MpTtoXHSYNaz;", "Functions.identity()", (-2228), 1386, 1386, 1386, 1386, 1386, (-2228), 1386, (-2228), (-2228), (-2228), (-2228), (-2228), (-2228), 1386);
      studentData0.isAlumnus();
      assertEquals("4MpTtoXHSYNaz;", studentData0.getCourseCode());
      assertEquals(4158, studentData0.getCompletedCredits());
      assertEquals(1386, studentData0.getOptionalHours());
      assertEquals((-2228), studentData0.getMandatoryHours());
      assertEquals(1386, studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.isActive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "Fucctions.identity()", "Fucctions.identity()", "Fucctions.identity()", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "Fucctions.identity()", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "Fucctions.identity()", "Fucctions.identity()", "numHashFunctions (%s) mut be <= 25", "Fucctions.identity()", "Fucctions.identity()", 0, 1543, 0, (-2054598903), (-2054598903), 1543, 0, (-2054598903), 657.4437399135658, 1543, (-2054598903), 1543, 0, 1543, 1543);
      studentData0.isActive();
      assertEquals("Fucctions.identity()", studentData0.getAffirmativePolicy());
      assertEquals((-2054598903), studentData0.getComplementaryHours());
      assertEquals("numHashFunctions (%s) mut be <= 25", studentData0.getEmail());
      assertEquals("numHashFunctions (%s) mut be <= 25", studentData0.getNationality());
      assertEquals("Fucctions.identity()", studentData0.getSecondarySchool());
      assertEquals("Fucctions.identity()", studentData0.getCurriculumCode());
      assertEquals("numHashFunctions (%s) mut be <= 25", studentData0.getName());
      assertEquals((-2054595817), studentData0.getCompletedCredits());
      assertEquals("numHashFunctions (%s) mut be <= 25", studentData0.getMaritalStatus());
      assertEquals(0, studentData0.getOptionalHours());
      assertEquals("Fucctions.identity()", studentData0.getCourseCode());
      assertEquals("numHashFunctions (%s) mut be <= 25", studentData0.getDisabilities());
      assertEquals("Fucctions.identity()", studentData0.getBirthDate());
      assertEquals("numHashFunctions (%s) mut be <= 25", studentData0.getCountry());
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals("Fucctions.identity()", studentData0.getRace());
      assertEquals("Fucctions.identity()", studentData0.getPlaceOfBirth());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getAdmissionTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.StudentData", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getStatusTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getStatus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      // Undeclared exception!
      try { 
        studentData0.getAdmissionStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.StudentData", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Locale locale0 = new Locale("The wildcard array must not be null");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Curriculum curriculum0 = new Curriculum("6A.ESI4N>!.e", "%O$7w", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1641754269), (-2073771795), 7, 6, (-677), (-2073771795), 7, (-1850), 159, 4344, set0, set0, set0, set0, set0);
      Student student0 = new Student((String) null, (String) null, ", termStatus='", "8;XXJ(.]SNpdq]O", "Dfq'", "Pl/%LS{xGCraVYq", "Dfq'", "u@1G{dhC80Rt ", "ALUMNUS", "ALUMNUS", ", termsCount=", ", termStatus='", studentStatus0, (String) null, "fOfNa!Zi", "`D!Jp", "6A.ESI4N>!.e", "iW!.\"HH7|0/?p45v", "8;XXJ(.]SNpdq]O", "8;XXJ(.]SNpdq]O", "iW!.\"HH7|0/?p45v", "iW!.\"HH7|0/?p45v", curriculum0, 6, (-744), (-2073771795), Integer.MAX_VALUE, (-1994700939), (-1578), (-677), 4.0, (-1.0), 4344, (-2013501365), (-1121645713), (-2454), Integer.MAX_VALUE, (-690), 0.0);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey(student0);
      // Undeclared exception!
      try { 
        studentData0.createStudent(nationalIdRegistrationKey0, curriculum0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setSecondarySchool((String) null);
      assertEquals(0, studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setAdmissionTerm("");
      String string0 = studentData0.getAdmissionStr();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setCompletedTerms(1);
      assertEquals(1, studentData0.getCompletedTerms());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setStatusStr("Pl/%LS{xGCraVYq");
      StudentStatus studentStatus0 = StudentStatus.ACTIVE;
      Locale locale0 = new Locale("The wildcard array must not be null");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Curriculum curriculum0 = new Curriculum("6A.ESI4N>!.e", "%O$7w", (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (ArrayList<Integer>) null, (-1641754269), (-2073771795), 7, 6, (-677), (-2073771795), 7, (-1850), 159, 4344, set0, set0, set0, set0, set0);
      Student student0 = new Student((String) null, (String) null, ", termStatus='", "8;XXJ(.]SNpdq]O", "Dfq'", "Pl/%LS{xGCraVYq", "Dfq'", "u@1G{dhC80Rt ", "ALUMNUS", "ALUMNUS", ", termsCount=", ", termStatus='", studentStatus0, (String) null, "fOfNa!Zi", "`D!Jp", "6A.ESI4N>!.e", "iW!.\"HH7|0/?p45v", "8;XXJ(.]SNpdq]O", "8;XXJ(.]SNpdq]O", "iW!.\"HH7|0/?p45v", "iW!.\"HH7|0/?p45v", curriculum0, 6, (-744), (-2073771795), Integer.MAX_VALUE, (-1994700939), (-1578), (-677), 4.0, (-1.0), 4344, (-2013501365), (-1121645713), (-2454), Integer.MAX_VALUE, (-690), 0.0);
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey(student0);
      // Undeclared exception!
      try { 
        studentData0.createStudent(nationalIdRegistrationKey0, curriculum0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setEnrolledCredits(2224);
      assertEquals(2224, studentData0.getEnrolledCredits());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setPlaceOfBirth("");
      String string0 = studentData0.getPlaceOfBirth();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      String string0 = studentData0.toString();
      assertEquals("StudentData{name='null', birthDate='null', email='null', gender='null', maritalStatus='null', nationality='null', country='null', placeOfBirth='null', race='null', status='null', termStatus='null', admission='null', admissionTerm='null', disabilities='null', affirmativeAction='null', secondarySchool='null', secondarySchoolGraduationYear='null', courseCode='null', curriculumCode='null', mandatoryHours=0, mandatoryCredits=0, optionalHours=0, optionalCredits=0, complementaryHours=0, complementaryCredits=0, gpa=0.0, mc=0.0, iea=0.0, termsCount=0, suspendedTerms=0, institutionalTerms=0, mobilityTerms=0, enrolledCredits=0, admissionGrade=0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setIea((-126.71148328));
      assertEquals((-126.71148328), studentData0.getIea(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setEmail("_$rW 1r6!!0");
      assertNull(studentData0.getRace());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StudentData studentData0 = new StudentData("numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", "numHashFunctions (%s) mut be <= 25", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      int int0 = studentData0.getCompletedCredits();
      assertEquals(0, studentData0.getMandatoryHours());
      assertEquals(0, studentData0.getOptionalHours());
      assertEquals(0, int0);
      assertEquals(0, studentData0.getComplementaryHours());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setName(", iea=");
      assertEquals(0, studentData0.getInstitutionalEnrollments());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setDisabilities("_$rW 1r6!!0");
      assertEquals(0, studentData0.getMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setComplementaryCredits((-2414));
      int int0 = studentData0.getComplementaryCredits();
      assertEquals((-2414), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StudentData studentData0 = new StudentData();
      studentData0.setSecondarySchoolGraduationYear("U%*[130m@m&x%$9");
      assertNull(studentData0.getCountry());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StudentData studentData0 = new StudentData("CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()", (-1641260312), (-1641260312), (-1641260312), (-3378), (-1641260312), (-1641260312), (-3378), (-3378), (-1641260312), (-1641260312), (-3378), (-1641260312), (-3378), (-1641260312), (-3378));
      NationalIdRegistrationKey nationalIdRegistrationKey0 = new NationalIdRegistrationKey("CharMatcher.javaLetterOrDigit()", "CharMatcher.javaLetterOrDigit()");
      Student student0 = studentData0.createStudent(nationalIdRegistrationKey0, (Curriculum) null);
      assertEquals((-1641260312), student0.getComplementaryHours());
      assertEquals((-1641260312), student0.getOptionalHours());
      assertEquals((-1641260312), student0.getMandatoryHours());
      assertEquals((-1641260312), student0.getInstitutionalEnrollments());
      assertEquals(1012443294, student0.getCompletedCredits());
      assertEquals("CharMatcher.javaLetter", student0.getStatusStr());
      assertEquals("igit()", student0.getAdmissionTerm());
      assertEquals("rDigit", student0.getStatusTerm());
      assertEquals((-3378.0), student0.getAdmissionGrade(), 0.01);
      assertEquals("CharMatcher.javaLetterOr", student0.getAdmissionStr());
      assertEquals((-3378), student0.getSuspendedTerms());
  }
}
