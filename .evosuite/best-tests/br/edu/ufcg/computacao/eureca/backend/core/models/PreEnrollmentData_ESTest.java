/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:32:00 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentData;
import br.edu.ufcg.computacao.eureca.backend.core.models.SubjectSchedule;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PreEnrollmentData_ESTest extends PreEnrollmentData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("8IT%dxm:P!Q<<", (String) null, 0, 0, (-1), (-1296), (-1), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-1296), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("8IT%dxm:P!Q<<", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals((-1), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-1), preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(preEnrollmentData0);
      
      String string0 = preEnrollmentData0.getTerm();
      assertEquals((-1296), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("8IT%dxm:P!Q<<", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals((-1), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-1), preEnrollmentData0.getIdealElectiveCredits());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "Ri7", 125, 125, 125, 125, 125, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(125, preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(125, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(125, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("Ri7", preEnrollmentData0.getTerm());
      assertEquals(125, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(125, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(preEnrollmentData0);
      
      String string0 = preEnrollmentData0.getTerm();
      assertEquals(125, preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(125, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(125, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("Ri7", preEnrollmentData0.getTerm());
      assertEquals(125, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(125, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(string0);
      assertEquals("Ri7", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, 0, 0, 0, 2403, 2753, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals(2753, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(2403, preEnrollmentData0.getIdealComplementaryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertNotNull(preEnrollmentData0);
      
      String string0 = preEnrollmentData0.getStudentRegistration();
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals(2753, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(2403, preEnrollmentData0.getIdealComplementaryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, (-1052), 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-1052), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(preEnrollmentData0);
      
      String string0 = preEnrollmentData0.getStudentRegistration();
      assertEquals((-1052), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "Ri7", 125, 125, 125, 125, 125, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals("Ri7", preEnrollmentData0.getTerm());
      assertEquals(125, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(125, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(125, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(125, preEnrollmentData0.getNextTerm());
      assertEquals(125, preEnrollmentData0.getIdealComplementaryCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getNextTerm();
      assertEquals("Ri7", preEnrollmentData0.getTerm());
      assertEquals(125, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(125, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(125, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(125, preEnrollmentData0.getNextTerm());
      assertEquals(125, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", (-2655), (-2655), (-2655), 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-2655), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-2655), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-2655), preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getNextTerm();
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-2655), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-2655), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-2655), preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals((-2655), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("Vj2Sk", "B", 0, (-1), 0, (-1), 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals("Vj2Sk", preEnrollmentData0.getStudentRegistration());
      assertEquals("B", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-1), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-1), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealOptionalCredits();
      assertEquals("Vj2Sk", preEnrollmentData0.getStudentRegistration());
      assertEquals("B", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-1), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-1), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("GVnw((FO&ad9B0O", "", 1460, 1460, 1460, 1460, 1460, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(1460, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(1460, preEnrollmentData0.getNextTerm());
      assertEquals("GVnw((FO&ad9B0O", preEnrollmentData0.getStudentRegistration());
      assertEquals(1460, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(1460, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(1460, preEnrollmentData0.getIdealMandatoryCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealOptionalCredits();
      assertEquals(1460, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(1460, preEnrollmentData0.getNextTerm());
      assertEquals("GVnw((FO&ad9B0O", preEnrollmentData0.getStudentRegistration());
      assertEquals(1460, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(1460, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(1460, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(1460, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("b2Nl++',UY'3p", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals("b2Nl++',UY'3p", preEnrollmentData0.getStudentRegistration());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealMandatoryCredits();
      assertEquals("b2Nl++',UY'3p", preEnrollmentData0.getStudentRegistration());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentData", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentData", 7356, 7356, 0, 0, (-4070), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-4070), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentData", preEnrollmentData0.getTerm());
      assertEquals(7356, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(7356, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentData", preEnrollmentData0.getStudentRegistration());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealMandatoryCredits();
      assertEquals((-4070), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentData", preEnrollmentData0.getTerm());
      assertEquals(7356, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(7356, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentData", preEnrollmentData0.getStudentRegistration());
      assertEquals(7356, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("GVnw((FO&ad9B0O", "", 1460, 1460, 1460, 1460, 1460, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(1460, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(1460, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(1460, preEnrollmentData0.getNextTerm());
      assertEquals(1460, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(1460, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("GVnw((FO&ad9B0O", preEnrollmentData0.getStudentRegistration());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealElectiveCredits();
      assertEquals(1460, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(1460, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(1460, preEnrollmentData0.getNextTerm());
      assertEquals(1460, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(1460, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("GVnw((FO&ad9B0O", preEnrollmentData0.getStudentRegistration());
      assertEquals(1460, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData(">pSc90>@{dy%DN %", ">pSc90>@{dy%DN %", (-661), (-661), (-447), 1, (-3157), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(">pSc90>@{dy%DN %", preEnrollmentData0.getTerm());
      assertEquals(">pSc90>@{dy%DN %", preEnrollmentData0.getStudentRegistration());
      assertEquals((-447), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-661), preEnrollmentData0.getNextTerm());
      assertEquals((-661), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-3157), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(1, preEnrollmentData0.getIdealComplementaryCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealElectiveCredits();
      assertEquals(">pSc90>@{dy%DN %", preEnrollmentData0.getTerm());
      assertEquals(">pSc90>@{dy%DN %", preEnrollmentData0.getStudentRegistration());
      assertEquals((-447), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-661), preEnrollmentData0.getNextTerm());
      assertEquals((-661), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-3157), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(1, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-3157), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "Ri7", 125, 125, 125, 125, 125, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(125, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(125, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("Ri7", preEnrollmentData0.getTerm());
      assertEquals(125, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(125, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(125, preEnrollmentData0.getNextTerm());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealComplementaryCredits();
      assertEquals(125, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(125, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("Ri7", preEnrollmentData0.getTerm());
      assertEquals(125, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(125, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(125, preEnrollmentData0.getNextTerm());
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("g2SECdx{", "g2SECdx{", (-4338), 0, (-1649), (-2352), 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-1649), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-2352), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("g2SECdx{", preEnrollmentData0.getStudentRegistration());
      assertEquals("g2SECdx{", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-4338), preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealComplementaryCredits();
      assertEquals((-1649), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-2352), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("g2SECdx{", preEnrollmentData0.getStudentRegistration());
      assertEquals("g2SECdx{", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-4338), preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-2352), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(preEnrollmentData0);
      
      Collection<SubjectSchedule> collection0 = preEnrollmentData0.getAvailableComplementarySubjects();
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(preEnrollmentData0);
      
      Collection<SubjectSchedule> collection0 = preEnrollmentData0.getAvailableElectiveSubjects();
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getNextTerm();
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setNextTerm((-6));
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(preEnrollmentData0);
      
      Collection<SubjectSchedule> collection0 = preEnrollmentData0.getPrioritizedMandatorySubjects();
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setAvailableOptionalSubjects((Collection<SubjectSchedule>) null);
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setPrioritizedMandatorySubjects((Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setPrioritizedOptionalSubjects((Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealComplementaryCredits();
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealOptionalCredits();
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(preEnrollmentData0);
      
      int int0 = preEnrollmentData0.getIdealElectiveCredits();
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setIdealComplementaryCredits(0);
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setIdealOptionalCredits((-6));
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setPrioritizedElectiveSubjects((Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertNotNull(preEnrollmentData0);
      
      String string0 = preEnrollmentData0.getTerm();
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(preEnrollmentData0);
      
      String string0 = preEnrollmentData0.getStudentRegistration();
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertNotNull(string0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setIdealElectiveCredits(0);
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertNull(preEnrollmentData0.getTerm());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setAvailableMandatorySubjects((Collection<SubjectSchedule>) null);
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertNull(preEnrollmentData0.getTerm());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setStudentRegistration("");
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertNotNull(preEnrollmentData0);
      
      preEnrollmentData0.setAvailableElectiveSubjects((Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getTerm());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertNotNull(preEnrollmentData0);
      
      Collection<SubjectSchedule> collection0 = preEnrollmentData0.getPrioritizedElectiveSubjects();
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals("", preEnrollmentData0.getStudentRegistration());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals("", preEnrollmentData0.getTerm());
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertNotNull(preEnrollmentData0);
      
      Collection<SubjectSchedule> collection0 = preEnrollmentData0.getAvailableMandatorySubjects();
      assertNull(preEnrollmentData0.getTerm());
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertNull(preEnrollmentData0.getStudentRegistration());
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      preEnrollmentData0.getPrioritizedOptionalSubjects();
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      preEnrollmentData0.setTerm("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat");
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData((String) null, (String) null, (-6), (-6), (-6), (-6), (-6), (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      int int0 = preEnrollmentData0.getIdealMandatoryCredits();
      assertEquals((-6), preEnrollmentData0.getNextTerm());
      assertEquals((-6), preEnrollmentData0.getIdealElectiveCredits());
      assertEquals((-6), preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals((-6), preEnrollmentData0.getIdealOptionalCredits());
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      preEnrollmentData0.getAvailableOptionalSubjects();
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("", "", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      preEnrollmentData0.setAvailableComplementarySubjects((Collection<SubjectSchedule>) null);
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PreEnrollmentData preEnrollmentData0 = new PreEnrollmentData("br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", "br.edu.ufcg.computacao.eureca.backend.core.models.PreEnrollmentDat", 0, 0, 0, 0, 0, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null, (Collection<SubjectSchedule>) null);
      preEnrollmentData0.setIdealMandatoryCredits(0);
      assertEquals(0, preEnrollmentData0.getIdealElectiveCredits());
      assertEquals(0, preEnrollmentData0.getIdealMandatoryCredits());
      assertEquals(0, preEnrollmentData0.getIdealOptionalCredits());
      assertEquals(0, preEnrollmentData0.getIdealComplementaryCredits());
      assertEquals(0, preEnrollmentData0.getNextTerm());
  }
}
