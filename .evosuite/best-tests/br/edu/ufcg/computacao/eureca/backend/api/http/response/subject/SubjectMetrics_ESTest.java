/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:41:01 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.subject;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectMetrics_ESTest extends SubjectMetrics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      SubjectMetrics subjectMetrics1 = new SubjectMetrics();
      subjectMetrics0.add(subjectMetrics1);
      assertEquals(0, subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getOngoing());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals(0, subjectMetrics0.getTotalEnrolled());
      assertEquals(0, subjectMetrics0.getCancelled());
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals(0, subjectMetrics0.getSuspended());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, (-2520), (-3908), 0, 1481, (-333), (-2520), 1);
      int int0 = subjectMetrics0.getTotalEnrolled();
      assertEquals((-2520), subjectMetrics0.getCancelled());
      assertEquals(0, subjectMetrics0.getOngoing());
      assertEquals(1481, subjectMetrics0.getExempted());
      assertEquals(1, int0);
      assertEquals((-333), subjectMetrics0.getSuspended());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals((-2520), subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-3908), subjectMetrics0.getSucceeded());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setTotalEnrolled((-1138));
      int int0 = subjectMetrics0.getTotalEnrolled();
      assertEquals((-1138), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(378, (-429), (-429), (-429), (-429), (-429), (-614), (-1434), (-1434));
      subjectMetrics0.setSuspended(3271);
      int int0 = subjectMetrics0.getSuspended();
      assertEquals(3271, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 1774, 1774, 0, 0, (-1), (-1), (-1), 0);
      int int0 = subjectMetrics0.getSuspended();
      assertEquals(0, subjectMetrics0.getTotalEnrolled());
      assertEquals(1774, subjectMetrics0.getFailedDueToGrade());
      assertEquals((-1), subjectMetrics0.getExempted());
      assertEquals(1774, subjectMetrics0.getCancelled());
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals(0, subjectMetrics0.getOngoing());
      assertEquals((-1), subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getSucceeded();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setSucceeded((-2108));
      int int0 = subjectMetrics0.getSucceeded();
      assertEquals((-2108), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(0, 0, 0, 0, 1, 0, 1, 1, 1);
      int int0 = subjectMetrics0.getOngoing();
      assertEquals(1, subjectMetrics0.getTotalEnrolled());
      assertEquals(1, subjectMetrics0.getSuspended());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals(0, subjectMetrics0.getCancelled());
      assertEquals(1, int0);
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals(1, subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getFailedDueToAbsences());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(1, 1, 1, 50, (-13), 50, 0, 0, 1);
      int int0 = subjectMetrics0.getOngoing();
      assertEquals(1, subjectMetrics0.getTotalEnrolled());
      assertEquals(1, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(1, subjectMetrics0.getFailedDueToGrade());
      assertEquals(0, subjectMetrics0.getNumberOfClasses());
      assertEquals(1, subjectMetrics0.getCancelled());
      assertEquals(50, subjectMetrics0.getExempted());
      assertEquals(50, subjectMetrics0.getSucceeded());
      assertEquals(0, subjectMetrics0.getSuspended());
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setNumberOfClasses(125);
      int int0 = subjectMetrics0.getNumberOfClasses();
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setNumberOfClasses((-1));
      int int0 = subjectMetrics0.getNumberOfClasses();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setFailedDueToGrade(1);
      int int0 = subjectMetrics0.getFailedDueToGrade();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setFailedDueToGrade((-1));
      int int0 = subjectMetrics0.getFailedDueToGrade();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(987, 987, 1, 0, 243, 987, 987, 243, 1);
      int int0 = subjectMetrics0.getFailedDueToAbsences();
      assertEquals(987, subjectMetrics0.getExempted());
      assertEquals(987, int0);
      assertEquals(987, subjectMetrics0.getFailedDueToGrade());
      assertEquals(243, subjectMetrics0.getOngoing());
      assertEquals(1, subjectMetrics0.getCancelled());
      assertEquals(987, subjectMetrics0.getSuspended());
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals(1, subjectMetrics0.getTotalEnrolled());
      assertEquals(243, subjectMetrics0.getNumberOfClasses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setFailedDueToAbsences((-463));
      int int0 = subjectMetrics0.getFailedDueToAbsences();
      assertEquals((-463), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setExempted(3745);
      int int0 = subjectMetrics0.getExempted();
      assertEquals(3745, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setExempted((-1661));
      int int0 = subjectMetrics0.getExempted();
      assertEquals((-1661), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(871, 871, 591, 871, 871, 591, 871, (-5085), 871);
      int int0 = subjectMetrics0.getCancelled();
      assertEquals(871, subjectMetrics0.getFailedDueToGrade());
      assertEquals(871, subjectMetrics0.getTotalEnrolled());
      assertEquals(591, int0);
      assertEquals(591, subjectMetrics0.getExempted());
      assertEquals(871, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(871, subjectMetrics0.getSuspended());
      assertEquals(871, subjectMetrics0.getOngoing());
      assertEquals(871, subjectMetrics0.getSucceeded());
      assertEquals((-5085), subjectMetrics0.getNumberOfClasses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setCancelled((-2230));
      int int0 = subjectMetrics0.getCancelled();
      assertEquals((-2230), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      // Undeclared exception!
      try { 
        subjectMetrics0.add((SubjectMetrics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.subject.SubjectMetrics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getTotalEnrolled();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getSuspended();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getCancelled();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getFailedDueToGrade();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getFailedDueToAbsences();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics((-1), (-1), 160, 160, 160, 2427, 0, 0, 0);
      int int0 = subjectMetrics0.getSucceeded();
      assertEquals(160, subjectMetrics0.getOngoing());
      assertEquals((-1), subjectMetrics0.getFailedDueToGrade());
      assertEquals((-1), subjectMetrics0.getFailedDueToAbsences());
      assertEquals(0, subjectMetrics0.getSuspended());
      assertEquals(0, subjectMetrics0.getNumberOfClasses());
      assertEquals(0, subjectMetrics0.getTotalEnrolled());
      assertEquals(160, int0);
      assertEquals(2427, subjectMetrics0.getExempted());
      assertEquals(160, subjectMetrics0.getCancelled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getExempted();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(2774, 0, 2774, 0, 0, 0, 0, 0, 0);
      int int0 = subjectMetrics0.getNumberOfClasses();
      assertEquals(0, subjectMetrics0.getTotalEnrolled());
      assertEquals(0, subjectMetrics0.getFailedDueToGrade());
      assertEquals(0, subjectMetrics0.getSuspended());
      assertEquals(2774, subjectMetrics0.getCancelled());
      assertEquals(2774, subjectMetrics0.getFailedDueToAbsences());
      assertEquals(0, subjectMetrics0.getSucceeded());
      assertEquals(0, subjectMetrics0.getExempted());
      assertEquals(0, subjectMetrics0.getOngoing());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      int int0 = subjectMetrics0.getOngoing();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      String string0 = subjectMetrics0.toString();
      assertEquals("SubjectMetrics{failedDueToAbsences=0, failedDueToGrade=0, cancelled=0, succeeded=0, ongoing=0, exempted=0, suspended=0, numberOfClasses=0, totalEnrolled=0}", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics();
      subjectMetrics0.setOngoing(428);
      assertEquals(428, subjectMetrics0.getOngoing());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubjectMetrics subjectMetrics0 = new SubjectMetrics(1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964, 1964);
      subjectMetrics0.add(subjectMetrics0);
      assertEquals(3928, subjectMetrics0.getOngoing());
  }
}
