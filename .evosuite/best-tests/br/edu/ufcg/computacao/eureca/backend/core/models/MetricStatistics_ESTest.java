/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 20:59:34 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.models.MetricStatistics;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetricStatistics_ESTest extends MetricStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, 688.48428884816, (-291.415072043), (-1.0), (-780));
      double double0 = metricStatistics0.getThirdQuartile();
      assertEquals((-1.0), metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals((-291.415072043), metricStatistics0.getMax(), 0.01);
      assertEquals(688.48428884816, double0, 0.01);
      assertEquals((-780), metricStatistics0.getSampleSize());
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics((-285.2548), (-4039.17038192), 0.5, (-285.2548), (-4039.17038192), 0.0, (-1005));
      double double0 = metricStatistics0.getThirdQuartile();
      assertEquals(0.5, metricStatistics0.getMedian(), 0.01);
      assertEquals((-1005), metricStatistics0.getSampleSize());
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals((-285.2548), double0, 0.01);
      assertEquals((-285.2548), metricStatistics0.getMin(), 0.01);
      assertEquals((-4039.17038192), metricStatistics0.getMax(), 0.01);
      assertEquals((-4039.17038192), metricStatistics0.getFirstQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics((-2218.0), (-2218.0), (-1042.918158767362), (-1042.918158767362), (-2218.0), (-2218.0), 1130);
      int int0 = metricStatistics0.getSampleSize();
      assertEquals((-1042.918158767362), metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals((-2218.0), metricStatistics0.getAverage(), 0.01);
      assertEquals((-1042.918158767362), metricStatistics0.getMedian(), 0.01);
      assertEquals((-2218.0), metricStatistics0.getMax(), 0.01);
      assertEquals(1130, int0);
      assertEquals((-2218.0), metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals((-2218.0), metricStatistics0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, 0.0, 0.0, (-1798.250159847285), (-2200));
      int int0 = metricStatistics0.getSampleSize();
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals((-2200), int0);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals((-1798.250159847285), metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double0 = metricStatistics0.getMin();
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics((-2218.0), (-2218.0), (-1042.918158767362), (-1042.918158767362), (-2218.0), (-2218.0), 1130);
      double double0 = metricStatistics0.getMin();
      assertEquals((-1042.918158767362), metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(1130, metricStatistics0.getSampleSize());
      assertEquals((-2218.0), metricStatistics0.getAverage(), 0.01);
      assertEquals((-2218.0), metricStatistics0.getMax(), 0.01);
      assertEquals((-2218.0), metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals((-1042.918158767362), metricStatistics0.getMedian(), 0.01);
      assertEquals((-2218.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, 0.0, 2736.459710793, 190.4487207266512, 0);
      double double0 = metricStatistics0.getMedian();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(190.4487207266512, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(2736.459710793, metricStatistics0.getMax(), 0.01);
      assertEquals(0, metricStatistics0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-1923.0769964895437));
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      double double1 = metricStatistics0.getMedian();
      assertEquals((-1923.0769964895437), metricStatistics0.getAverage(), 0.01);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, 0.0, 2736.459710793, 190.4487207266512, 0);
      double double0 = metricStatistics0.getMax();
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(2736.459710793, double0, 0.01);
      assertEquals(190.4487207266512, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0, metricStatistics0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics((-2218.0), (-2218.0), (-1042.918158767362), (-1042.918158767362), (-2218.0), (-2218.0), 1130);
      double double0 = metricStatistics0.getMax();
      assertEquals((-1042.918158767362), metricStatistics0.getMedian(), 0.01);
      assertEquals((-2218.0), metricStatistics0.getMin(), 0.01);
      assertEquals((-2218.0), metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(1130, metricStatistics0.getSampleSize());
      assertEquals((-1042.918158767362), metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals((-2218.0), double0, 0.01);
      assertEquals((-2218.0), metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(arrayList0);
      double double0 = metricStatistics0.getFirstQuartile();
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(833.0, (-1481.164342786048), (-1.0), 0.0, (-1.0), 0.0, (-354));
      double double0 = metricStatistics0.getFirstQuartile();
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals((-354), metricStatistics0.getSampleSize());
      assertEquals((-1481.164342786048), double0, 0.01);
      assertEquals((-1.0), metricStatistics0.getMedian(), 0.01);
      assertEquals(833.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals((-1.0), metricStatistics0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, 0.0, 0.0, 2736.459710793, 190.4487207266512, 0);
      assertEquals(190.4487207266512, metricStatistics0.getAverage(), 0.01);
      
      metricStatistics0.setAverage(0.0);
      double double0 = metricStatistics0.getAverage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(0.0, 0.0, (-237.61), 0.0, (-237.61), (-237.61), 370);
      double double0 = metricStatistics0.getAverage();
      assertEquals((-237.61), metricStatistics0.getMax(), 0.01);
      assertEquals((-237.61), metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(370, metricStatistics0.getSampleSize());
      assertEquals((-237.61), double0, 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(981.57);
      linkedList0.add(double0);
      linkedList0.add(double0);
      List<Double> list0 = linkedList0.subList(2, 2);
      linkedList0.offerFirst(double0);
      MetricStatistics metricStatistics0 = null;
      try {
        metricStatistics0 = new MetricStatistics(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MetricStatistics metricStatistics0 = null;
      try {
        metricStatistics0 = new MetricStatistics((List<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.core.models.MetricStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addFirst(double0);
      linkedList0.add(double0);
      linkedList0.push(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addFirst(double0);
      linkedList0.add(double0);
      MetricStatistics metricStatistics0 = new MetricStatistics(linkedList0);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      metricStatistics0.setMax((-2009));
      assertEquals((-2009.0), metricStatistics0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      double double0 = metricStatistics0.getFirstQuartile();
      assertEquals(1.2413915592536073E61, metricStatistics0.getMax(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMin(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMedian(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getAverage(), 0.01);
      assertEquals(1.2413915592536073E61, double0, 0.01);
      assertEquals((-2009), metricStatistics0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      metricStatistics0.setSampleSize((-2009));
      assertEquals(1.2413915592536073E61, metricStatistics0.getMin(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMax(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMedian(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getAverage(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals((-2009), metricStatistics0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      double double0 = metricStatistics0.getAverage();
      assertEquals(1.2413915592536073E61, metricStatistics0.getMax(), 0.01);
      assertEquals((-2009), metricStatistics0.getSampleSize());
      assertEquals(1.2413915592536073E61, double0, 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMin(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMedian(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(stack0);
      double double0 = metricStatistics0.getThirdQuartile();
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.19341335, 1.19341335, 1.19341335, 1.19341335, 1.19341335, 1.19341335, 926);
      double double0 = metricStatistics0.getMedian();
      assertEquals(1.19341335, double0, 0.01);
      assertEquals(1.19341335, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(1.19341335, metricStatistics0.getAverage(), 0.01);
      assertEquals(1.19341335, metricStatistics0.getMin(), 0.01);
      assertEquals(1.19341335, metricStatistics0.getMax(), 0.01);
      assertEquals(926, metricStatistics0.getSampleSize());
      assertEquals(1.19341335, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(stack0);
      double double0 = metricStatistics0.getMax();
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      double double0 = metricStatistics0.getMin();
      assertEquals(1.2413915592536073E61, double0, 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMax(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals((-2009), metricStatistics0.getSampleSize());
      assertEquals(1.2413915592536073E61, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getAverage(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMedian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      metricStatistics0.setMedian(1.2413915592536073E61);
      assertEquals(1.2413915592536073E61, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMedian(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getAverage(), 0.01);
      assertEquals((-2009), metricStatistics0.getSampleSize());
      assertEquals(1.2413915592536073E61, metricStatistics0.getMin(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMax(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getFirstQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      metricStatistics0.setThirdQuartile((-2009));
      assertEquals((-2009.0), metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      MetricStatistics metricStatistics0 = new MetricStatistics(stack0);
      int int0 = metricStatistics0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0.0, metricStatistics0.getMax(), 0.01);
      assertEquals(0.0, metricStatistics0.getMin(), 0.01);
      assertEquals(0.0, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getMedian(), 0.01);
      assertEquals(0.0, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(0.0, metricStatistics0.getAverage(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      metricStatistics0.setMin(1.2413915592536073E61);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMedian(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getAverage(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMin(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMax(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals((-2009), metricStatistics0.getSampleSize());
      assertEquals(1.2413915592536073E61, metricStatistics0.getThirdQuartile(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MetricStatistics metricStatistics0 = new MetricStatistics(1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, 1.2413915592536073E61, (-2009));
      metricStatistics0.setFirstQuartile(1.2413915592536073E61);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMin(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getFirstQuartile(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getAverage(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMax(), 0.01);
      assertEquals((-2009), metricStatistics0.getSampleSize());
      assertEquals(1.2413915592536073E61, metricStatistics0.getThirdQuartile(), 0.01);
      assertEquals(1.2413915592536073E61, metricStatistics0.getMedian(), 0.01);
  }
}
