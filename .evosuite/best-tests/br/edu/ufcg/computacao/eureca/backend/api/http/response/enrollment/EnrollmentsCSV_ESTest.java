/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:38:17 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsCSV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnrollmentsCSV_ESTest extends EnrollmentsCSV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, "", ", ongoingCount=", (String) null, (String) null, 1981, 1981, 0, 0, 0, 0, 1981, 0);
      assertNotNull(enrollmentsCSV0);
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(1981, enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(1981, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(", ongoingCount=", enrollmentsCSV0.getSubjectName());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(1981, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      
      String string0 = enrollmentsCSV0.getTerm();
      assertNull(string0);
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(1981, enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(1981, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(", ongoingCount=", enrollmentsCSV0.getSubjectName());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(1981, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, "", "", "9`Z1", "9`Z1", 3712, 3712, 3712, (-1), 0, 0, 456, (-232));
      assertNotNull(enrollmentsCSV0);
      assertEquals(456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals((-1), enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("9`Z1", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals(3712, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-232), enrollmentsCSV0.getSuspendedCount());
      assertEquals("9`Z1", enrollmentsCSV0.getClassId());
      assertEquals(3712, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(3712, enrollmentsCSV0.getCancelledCount());
      
      String string0 = enrollmentsCSV0.getTerm();
      assertEquals("9`Z1", string0);
      assertNotNull(string0);
      assertEquals(456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals((-1), enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("9`Z1", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals(3712, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-232), enrollmentsCSV0.getSuspendedCount());
      assertEquals("9`Z1", enrollmentsCSV0.getClassId());
      assertEquals(3712, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(3712, enrollmentsCSV0.getCancelledCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", (String) null, "", (String) null, "", "", 3884, 3884, 3063, 3063, 3884, 3063, 3884, 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(3063, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(3884, enrollmentsCSV0.getSucceededCount());
      assertEquals(3884, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(3884, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3884, enrollmentsCSV0.getOngoingCount());
      assertEquals(3063, enrollmentsCSV0.getCancelledCount());
      assertEquals(3063, enrollmentsCSV0.getFailedDueToGradeCount());
      
      int int0 = enrollmentsCSV0.getSuspendedCount();
      assertEquals(0, int0);
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(3063, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(3884, enrollmentsCSV0.getSucceededCount());
      assertEquals(3884, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(3884, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3884, enrollmentsCSV0.getOngoingCount());
      assertEquals(3063, enrollmentsCSV0.getCancelledCount());
      assertEquals(3063, enrollmentsCSV0.getFailedDueToGradeCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", (-2188), (-2188), (-2188), (-2188), 0, 0, 0, (-2188));
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-2188), enrollmentsCSV0.getCancelledCount());
      assertEquals((-2188), enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals((-2188), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-2188), enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-2188), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      
      enrollmentsCSV0.setSuspendedCount(4528);
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-2188), enrollmentsCSV0.getCancelledCount());
      assertEquals((-2188), enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(4528, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-2188), enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-2188), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      
      int int0 = enrollmentsCSV0.getSuspendedCount();
      assertEquals(4528, int0);
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-2188), enrollmentsCSV0.getCancelledCount());
      assertEquals((-2188), enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(4528, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-2188), enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-2188), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("8H=]E(v^``+YO}p5(", "", "U-AhIi3 ]Tp#Ae^?e", "U-AhIi3 ]Tp#Ae^?e", "", "", 0, 0, 0, 0, 692, 0, 0, (-393));
      assertNotNull(enrollmentsCSV0);
      assertEquals("U-AhIi3 ]Tp#Ae^?e", enrollmentsCSV0.getSubjectName());
      assertEquals("U-AhIi3 ]Tp#Ae^?e", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(692, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-393), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("8H=]E(v^``+YO}p5(", enrollmentsCSV0.getCourseCode());
      
      int int0 = enrollmentsCSV0.getSucceededCount();
      assertEquals(0, int0);
      assertEquals("U-AhIi3 ]Tp#Ae^?e", enrollmentsCSV0.getSubjectName());
      assertEquals("U-AhIi3 ]Tp#Ae^?e", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(692, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-393), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("8H=]E(v^``+YO}p5(", enrollmentsCSV0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("8+^KvFI7T,zV", "8+^KvFI7T,zV", "yC", "yC", "8+^KvFI7T,zV", "VjWR-vS%=\"<>QEhp\"", 1, 1, 1, (-3002), 0, 0, 0, (-1921));
      assertNotNull(enrollmentsCSV0);
      assertEquals("VjWR-vS%=\"<>QEhp\"", enrollmentsCSV0.getClassId());
      assertEquals((-1921), enrollmentsCSV0.getSuspendedCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectCode());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals(1, enrollmentsCSV0.getSucceededCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getTerm());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCurriculumCode());
      assertEquals(1, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-3002), enrollmentsCSV0.getExemptedCount());
      
      int int0 = enrollmentsCSV0.getSucceededCount();
      assertEquals(1, int0);
      assertEquals("VjWR-vS%=\"<>QEhp\"", enrollmentsCSV0.getClassId());
      assertEquals((-1921), enrollmentsCSV0.getSuspendedCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectCode());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals(1, enrollmentsCSV0.getSucceededCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getTerm());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCurriculumCode());
      assertEquals(1, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-3002), enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("4.?", "", "", (String) null, "", (String) null, 0, (-87), (-87), (-4064), 0, 0, 0, 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-4064), enrollmentsCSV0.getExemptedCount());
      assertEquals((-87), enrollmentsCSV0.getCancelledCount());
      assertEquals((-87), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("4.?", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertNull(enrollmentsCSV0.getClassId());
      
      String string0 = enrollmentsCSV0.getSubjectName();
      assertNull(string0);
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-4064), enrollmentsCSV0.getExemptedCount());
      assertEquals((-87), enrollmentsCSV0.getCancelledCount());
      assertEquals((-87), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("4.?", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertNull(enrollmentsCSV0.getClassId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", 909, 909, 1183, 0, 0, 0, 0, 503);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(909, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(909, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(1183, enrollmentsCSV0.getCancelledCount());
      assertEquals(503, enrollmentsCSV0.getSuspendedCount());
      
      String string0 = enrollmentsCSV0.getSubjectName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(909, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(909, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(1183, enrollmentsCSV0.getCancelledCount());
      assertEquals(503, enrollmentsCSV0.getSuspendedCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, "/", (String) null, "", (String) null, "", 550, 550, 3367, 550, 0, 0, 0, 3367);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals(550, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(550, enrollmentsCSV0.getExemptedCount());
      assertEquals("/", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(550, enrollmentsCSV0.getSucceededCount());
      assertEquals(3367, enrollmentsCSV0.getSuspendedCount());
      assertNull(enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertEquals(3367, enrollmentsCSV0.getCancelledCount());
      
      String string0 = enrollmentsCSV0.getSubjectCode();
      assertNull(string0);
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals(550, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(550, enrollmentsCSV0.getExemptedCount());
      assertEquals("/", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(550, enrollmentsCSV0.getSucceededCount());
      assertEquals(3367, enrollmentsCSV0.getSuspendedCount());
      assertNull(enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertEquals(3367, enrollmentsCSV0.getCancelledCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "4)0Xc2U4r", "4)0Xc2U4r", (String) null, "", "9bx!;9oO-?f", 0, 0, 0, 3052, 0, 3052, 3052, 3052);
      assertNotNull(enrollmentsCSV0);
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(3052, enrollmentsCSV0.getSuspendedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getCurriculumCode());
      assertEquals("9bx!;9oO-?f", enrollmentsCSV0.getClassId());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(3052, enrollmentsCSV0.getExemptedCount());
      
      String string0 = enrollmentsCSV0.getSubjectCode();
      assertEquals("4)0Xc2U4r", string0);
      assertNotNull(string0);
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(3052, enrollmentsCSV0.getSuspendedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getCurriculumCode());
      assertEquals("9bx!;9oO-?f", enrollmentsCSV0.getClassId());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(3052, enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("{<;4b!nOVyvMKZq&A", "{<;4b!nOVyvMKZq&A", "{<;4b!nOVyvMKZq&A", ".z9I!9lHO'&xNR$", "", "", (-1), 252, (-1), 2673, 0, (-1), 0, (-3171));
      assertNotNull(enrollmentsCSV0);
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(2673, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(252, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-3171), enrollmentsCSV0.getSuspendedCount());
      assertEquals("{<;4b!nOVyvMKZq&A", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-1), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("{<;4b!nOVyvMKZq&A", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("{<;4b!nOVyvMKZq&A", enrollmentsCSV0.getCourseCode());
      assertEquals(".z9I!9lHO'&xNR$", enrollmentsCSV0.getSubjectName());
      
      int int0 = enrollmentsCSV0.getOngoingCount();
      assertEquals(0, int0);
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(2673, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(252, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-3171), enrollmentsCSV0.getSuspendedCount());
      assertEquals("{<;4b!nOVyvMKZq&A", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-1), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("{<;4b!nOVyvMKZq&A", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("{<;4b!nOVyvMKZq&A", enrollmentsCSV0.getCourseCode());
      assertEquals(".z9I!9lHO'&xNR$", enrollmentsCSV0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("Po0RCV", "", "", (String) null, (String) null, (String) null, 0, 808, 808, 125, 863, 863, 808, 808);
      assertNotNull(enrollmentsCSV0);
      assertEquals(808, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(808, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(863, enrollmentsCSV0.getFailedDueToGradeCount());
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals("Po0RCV", enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(125, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(808, enrollmentsCSV0.getSucceededCount());
      assertEquals(863, enrollmentsCSV0.getOngoingCount());
      assertEquals(808, enrollmentsCSV0.getCancelledCount());
      
      int int0 = enrollmentsCSV0.getOngoingCount();
      assertEquals(863, int0);
      assertEquals(808, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(808, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(863, enrollmentsCSV0.getFailedDueToGradeCount());
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals("Po0RCV", enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(125, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(808, enrollmentsCSV0.getSucceededCount());
      assertEquals(863, enrollmentsCSV0.getOngoingCount());
      assertEquals(808, enrollmentsCSV0.getCancelledCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "M", "vKYq00a_WP", "", (String) null, 0, 3021, 3021, 0, 0, 0, 0, 3021);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3021, enrollmentsCSV0.getCancelledCount());
      assertEquals(3021, enrollmentsCSV0.getSucceededCount());
      assertEquals(3021, enrollmentsCSV0.getSuspendedCount());
      assertEquals("M", enrollmentsCSV0.getSubjectCode());
      assertEquals("vKYq00a_WP", enrollmentsCSV0.getSubjectName());
      assertNull(enrollmentsCSV0.getClassId());
      
      int int0 = enrollmentsCSV0.getFailedDueToGradeCount();
      assertEquals(0, int0);
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3021, enrollmentsCSV0.getCancelledCount());
      assertEquals(3021, enrollmentsCSV0.getSucceededCount());
      assertEquals(3021, enrollmentsCSV0.getSuspendedCount());
      assertEquals("M", enrollmentsCSV0.getSubjectCode());
      assertEquals("vKYq00a_WP", enrollmentsCSV0.getSubjectName());
      assertNull(enrollmentsCSV0.getClassId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "4)0Xc2U4r", "4)0Xc2U4r", (String) null, "", "9bx!;9oO-?f", 0, 0, 0, 3052, 0, 3052, 3052, 3052);
      assertNotNull(enrollmentsCSV0);
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getSubjectCode());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3052, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("9bx!;9oO-?f", enrollmentsCSV0.getClassId());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(3052, enrollmentsCSV0.getExemptedCount());
      
      int int0 = enrollmentsCSV0.getFailedDueToGradeCount();
      assertEquals(3052, int0);
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(3052, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getSubjectCode());
      assertEquals("4)0Xc2U4r", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(3052, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("9bx!;9oO-?f", enrollmentsCSV0.getClassId());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(3052, enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV(":q_*C-", "", "EnrollmentsCSV{courseCode='", "EnrollmentsCSV{courseCode='", "", "", 0, 0, 0, 0, 0, 39, 0, 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(":q_*C-", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(39, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("EnrollmentsCSV{courseCode='", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("EnrollmentsCSV{courseCode='", enrollmentsCSV0.getSubjectName());
      
      enrollmentsCSV0.setFailedDueToAbsenceCount(39);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(":q_*C-", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(39, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("EnrollmentsCSV{courseCode='", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("EnrollmentsCSV{courseCode='", enrollmentsCSV0.getSubjectName());
      
      int int0 = enrollmentsCSV0.getFailedDueToAbsenceCount();
      assertEquals(39, int0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(":q_*C-", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(39, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("EnrollmentsCSV{courseCode='", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("EnrollmentsCSV{courseCode='", enrollmentsCSV0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", (-30), (-30), (-30), (-30), (-30), (-30), (-30), (-30));
      assertNotNull(enrollmentsCSV0);
      assertEquals((-30), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-30), enrollmentsCSV0.getOngoingCount());
      assertEquals((-30), enrollmentsCSV0.getSucceededCount());
      assertEquals((-30), enrollmentsCSV0.getCancelledCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCourseCode());
      assertEquals((-30), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getClassId());
      assertEquals((-30), enrollmentsCSV0.getSuspendedCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectName());
      assertEquals((-30), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-30), enrollmentsCSV0.getExemptedCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectCode());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getTerm());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCurriculumCode());
      
      int int0 = enrollmentsCSV0.getFailedDueToAbsenceCount();
      assertEquals((-30), int0);
      assertEquals((-30), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-30), enrollmentsCSV0.getOngoingCount());
      assertEquals((-30), enrollmentsCSV0.getSucceededCount());
      assertEquals((-30), enrollmentsCSV0.getCancelledCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCourseCode());
      assertEquals((-30), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getClassId());
      assertEquals((-30), enrollmentsCSV0.getSuspendedCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectName());
      assertEquals((-30), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-30), enrollmentsCSV0.getExemptedCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectCode());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getTerm());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("B", "", "[>Mpnnt[XbvRrvud Bb", "5FuQI9=d}chI", (String) null, "`[mlP8&R@]]c~", 1111, 2322, 0, 0, 125, 1111, 1111, 2322);
      assertNotNull(enrollmentsCSV0);
      assertEquals("B", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("5FuQI9=d}chI", enrollmentsCSV0.getSubjectName());
      assertEquals("`[mlP8&R@]]c~", enrollmentsCSV0.getClassId());
      assertEquals(1111, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(125, enrollmentsCSV0.getOngoingCount());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(2322, enrollmentsCSV0.getSuspendedCount());
      assertEquals(2322, enrollmentsCSV0.getSucceededCount());
      assertEquals(1111, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("[>Mpnnt[XbvRrvud Bb", enrollmentsCSV0.getSubjectCode());
      assertEquals(1111, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      
      int int0 = enrollmentsCSV0.getExemptedCount();
      assertEquals(0, int0);
      assertEquals("B", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("5FuQI9=d}chI", enrollmentsCSV0.getSubjectName());
      assertEquals("`[mlP8&R@]]c~", enrollmentsCSV0.getClassId());
      assertEquals(1111, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(125, enrollmentsCSV0.getOngoingCount());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(2322, enrollmentsCSV0.getSuspendedCount());
      assertEquals(2322, enrollmentsCSV0.getSucceededCount());
      assertEquals(1111, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("[>Mpnnt[XbvRrvud Bb", enrollmentsCSV0.getSubjectCode());
      assertEquals(1111, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", (-2188), (-2188), (-2188), (-2188), 0, 0, 0, (-2188));
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-2188), enrollmentsCSV0.getSucceededCount());
      assertEquals((-2188), enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-2188), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-2188), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-2188), enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      
      int int0 = enrollmentsCSV0.getExemptedCount();
      assertEquals((-2188), int0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-2188), enrollmentsCSV0.getSucceededCount());
      assertEquals((-2188), enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-2188), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-2188), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-2188), enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", 39, 39, 39, 39, 39, 39, 39, 39);
      assertNotNull(enrollmentsCSV0);
      assertEquals(39, enrollmentsCSV0.getCancelledCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCourseCode());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectName());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getTerm());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCurriculumCode());
      assertEquals(39, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(39, enrollmentsCSV0.getSucceededCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectCode());
      assertEquals(39, enrollmentsCSV0.getExemptedCount());
      assertEquals(39, enrollmentsCSV0.getSuspendedCount());
      assertEquals(39, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getClassId());
      assertEquals(39, enrollmentsCSV0.getOngoingCount());
      
      int int0 = enrollmentsCSV0.getEnrollmentsCount();
      assertEquals(39, int0);
      assertEquals(39, enrollmentsCSV0.getCancelledCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCourseCode());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectName());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getTerm());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCurriculumCode());
      assertEquals(39, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(39, enrollmentsCSV0.getSucceededCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectCode());
      assertEquals(39, enrollmentsCSV0.getExemptedCount());
      assertEquals(39, enrollmentsCSV0.getSuspendedCount());
      assertEquals(39, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getClassId());
      assertEquals(39, enrollmentsCSV0.getOngoingCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", (-1344), (-1344), 799, (-1344), (-1344), (-1254), 0, 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals((-1344), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-1344), enrollmentsCSV0.getExemptedCount());
      assertEquals((-1254), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1344), enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(799, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals((-1344), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      
      int int0 = enrollmentsCSV0.getEnrollmentsCount();
      assertEquals((-1344), int0);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals((-1344), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-1344), enrollmentsCSV0.getExemptedCount());
      assertEquals((-1254), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1344), enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(799, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals((-1344), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("3hdg?@|Aa+`.1f", "3hdg?@|Aa+`.1f", (String) null, "3hdg?@|Aa+`.1f", "3hdg?@|Aa+`.1f", (String) null, 0, 815, 0, 2535, 0, 2535, 0, 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals(815, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getSubjectName());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getTerm());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getCurriculumCode());
      assertEquals(2535, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(2535, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getClassId());
      
      String string0 = enrollmentsCSV0.getCurriculumCode();
      assertEquals("3hdg?@|Aa+`.1f", string0);
      assertNotNull(string0);
      assertEquals(815, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getSubjectName());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getTerm());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getCurriculumCode());
      assertEquals(2535, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(2535, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("3hdg?@|Aa+`.1f", enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getClassId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("]?q", "", "", (String) null, "", "", 0, (-1823), (-1), 0, 0, (-1), 0, 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("]?q", enrollmentsCSV0.getCourseCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-1823), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      
      String string0 = enrollmentsCSV0.getCurriculumCode();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("]?q", enrollmentsCSV0.getCourseCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-1823), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("8+^KvFI7T,zV", "8+^KvFI7T,zV", "yC", "yC", "8+^KvFI7T,zV", "VjWR-vS%=\"<>QEhp\"", 1, 1, 1, (-3002), 0, 0, 0, (-1921));
      assertNotNull(enrollmentsCSV0);
      assertEquals(1, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getTerm());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCurriculumCode());
      assertEquals("yC", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectCode());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1921), enrollmentsCSV0.getSuspendedCount());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals(1, enrollmentsCSV0.getSucceededCount());
      assertEquals("VjWR-vS%=\"<>QEhp\"", enrollmentsCSV0.getClassId());
      assertEquals((-3002), enrollmentsCSV0.getExemptedCount());
      
      enrollmentsCSV0.setCourseCode((String) null);
      assertEquals(1, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getTerm());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCurriculumCode());
      assertEquals("yC", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1921), enrollmentsCSV0.getSuspendedCount());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals(1, enrollmentsCSV0.getSucceededCount());
      assertEquals("VjWR-vS%=\"<>QEhp\"", enrollmentsCSV0.getClassId());
      assertEquals((-3002), enrollmentsCSV0.getExemptedCount());
      
      String string0 = enrollmentsCSV0.getCourseCode();
      assertNull(string0);
      assertEquals(1, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getTerm());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCurriculumCode());
      assertEquals("yC", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1921), enrollmentsCSV0.getSuspendedCount());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals(1, enrollmentsCSV0.getSucceededCount());
      assertEquals("VjWR-vS%=\"<>QEhp\"", enrollmentsCSV0.getClassId());
      assertEquals((-3002), enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", (-1344), (-1344), 799, (-1344), (-1344), (-1254), 0, 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(799, enrollmentsCSV0.getCancelledCount());
      assertEquals((-1344), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-1344), enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals((-1344), enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals((-1344), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals((-1254), enrollmentsCSV0.getFailedDueToGradeCount());
      
      String string0 = enrollmentsCSV0.getCourseCode();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(799, enrollmentsCSV0.getCancelledCount());
      assertEquals((-1344), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-1344), enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals((-1344), enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals((-1344), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals((-1254), enrollmentsCSV0.getFailedDueToGradeCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "M", "vKYq00a_WP", "", (String) null, 0, 3021, 3021, 0, 0, 0, 0, 3021);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(3021, enrollmentsCSV0.getSucceededCount());
      assertEquals("M", enrollmentsCSV0.getSubjectCode());
      assertEquals(3021, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(3021, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("vKYq00a_WP", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      
      String string0 = enrollmentsCSV0.getClassId();
      assertNull(string0);
      assertEquals("", enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(3021, enrollmentsCSV0.getSucceededCount());
      assertEquals("M", enrollmentsCSV0.getSubjectCode());
      assertEquals(3021, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(3021, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("vKYq00a_WP", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, "S", (String) null, "/", "/", 0, 0, 0, (-905), (-905), 0, (-444), (-444));
      assertNotNull(enrollmentsCSV0);
      assertEquals("S", enrollmentsCSV0.getSubjectCode());
      assertEquals((-444), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("/", enrollmentsCSV0.getTerm());
      assertEquals((-905), enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-905), enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals((-444), enrollmentsCSV0.getSuspendedCount());
      assertEquals("/", enrollmentsCSV0.getClassId());
      
      String string0 = enrollmentsCSV0.getClassId();
      assertEquals("/", string0);
      assertNotNull(string0);
      assertEquals("S", enrollmentsCSV0.getSubjectCode());
      assertEquals((-444), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("/", enrollmentsCSV0.getTerm());
      assertEquals((-905), enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-905), enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals((-444), enrollmentsCSV0.getSuspendedCount());
      assertEquals("/", enrollmentsCSV0.getClassId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "lYVe8jT", "", "", (-1017), 0, 0, 0, 0, 0, 0, (-1017));
      assertNotNull(enrollmentsCSV0);
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("lYVe8jT", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals((-1017), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-1017), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      
      int int0 = enrollmentsCSV0.getCancelledCount();
      assertEquals(0, int0);
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("lYVe8jT", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals((-1017), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-1017), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", " -A_?$", "", "#v8)/=] gr;=", 0, 0, 0, 0, 0, (-1), 1456, (-1));
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      
      enrollmentsCSV0.setCancelledCount(39);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(39, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      
      int int0 = enrollmentsCSV0.getCancelledCount();
      assertEquals(39, int0);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(39, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", (-292), (-1), 1, (-292), 0, 4222, (-1595), 0);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-1), enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(4222, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-292), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals((-292), enrollmentsCSV0.getExemptedCount());
      assertEquals((-1595), enrollmentsCSV0.getFailedDueToAbsenceCount());
      
      enrollmentsCSV0.setCurriculumCode((String) null);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-1), enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(4222, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-292), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals((-292), enrollmentsCSV0.getExemptedCount());
      assertEquals((-1595), enrollmentsCSV0.getFailedDueToAbsenceCount());
      
      EnrollmentsCSV enrollmentsCSV1 = new EnrollmentsCSV("", "Y`ccz[Lu|~P7pwK", "", "_`;0(>J2G0fF", "Y`ccz[Lu|~P7pwK", (String) null, (-1595), (-4954), 1104, (-1595), (-292), (-898), (-1), 1);
      assertFalse(enrollmentsCSV1.equals((Object)enrollmentsCSV0));
      assertNotNull(enrollmentsCSV1);
      assertEquals("Y`ccz[Lu|~P7pwK", enrollmentsCSV1.getCurriculumCode());
      assertEquals(1104, enrollmentsCSV1.getCancelledCount());
      assertEquals((-4954), enrollmentsCSV1.getSucceededCount());
      assertEquals(1, enrollmentsCSV1.getSuspendedCount());
      assertEquals((-292), enrollmentsCSV1.getOngoingCount());
      assertEquals("", enrollmentsCSV1.getSubjectCode());
      assertEquals((-898), enrollmentsCSV1.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV1.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV1.getCourseCode());
      assertEquals("Y`ccz[Lu|~P7pwK", enrollmentsCSV1.getTerm());
      assertEquals((-1595), enrollmentsCSV1.getEnrollmentsCount());
      assertEquals((-1595), enrollmentsCSV1.getExemptedCount());
      assertNull(enrollmentsCSV1.getClassId());
      assertEquals("_`;0(>J2G0fF", enrollmentsCSV1.getSubjectName());
      
      int int0 = enrollmentsCSV0.compareTo(enrollmentsCSV1);
      assertFalse(enrollmentsCSV0.equals((Object)enrollmentsCSV1));
      assertFalse(enrollmentsCSV1.equals((Object)enrollmentsCSV0));
      assertEquals(21, int0);
      assertNotSame(enrollmentsCSV0, enrollmentsCSV1);
      assertNotSame(enrollmentsCSV1, enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-1), enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getSuspendedCount());
      assertEquals(4222, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-292), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals((-292), enrollmentsCSV0.getExemptedCount());
      assertEquals((-1595), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("Y`ccz[Lu|~P7pwK", enrollmentsCSV1.getCurriculumCode());
      assertEquals(1104, enrollmentsCSV1.getCancelledCount());
      assertEquals((-4954), enrollmentsCSV1.getSucceededCount());
      assertEquals(1, enrollmentsCSV1.getSuspendedCount());
      assertEquals((-292), enrollmentsCSV1.getOngoingCount());
      assertEquals("", enrollmentsCSV1.getSubjectCode());
      assertEquals((-898), enrollmentsCSV1.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV1.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV1.getCourseCode());
      assertEquals("Y`ccz[Lu|~P7pwK", enrollmentsCSV1.getTerm());
      assertEquals((-1595), enrollmentsCSV1.getEnrollmentsCount());
      assertEquals((-1595), enrollmentsCSV1.getExemptedCount());
      assertNull(enrollmentsCSV1.getClassId());
      assertEquals("_`;0(>J2G0fF", enrollmentsCSV1.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV(", cancelledCount=", ", cancelledCount=", " PV|3NS7_UOqWo!J", " PV|3NS7_UOqWo!J", ", cancelledCount=", ", cancelledCount=", 2434, 2434, 2434, 2434, 2434, (-2867), 2434, 65);
      assertNotNull(enrollmentsCSV0);
      assertEquals(", cancelledCount=", enrollmentsCSV0.getCourseCode());
      assertEquals((-2867), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(", cancelledCount=", enrollmentsCSV0.getClassId());
      assertEquals(2434, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(2434, enrollmentsCSV0.getExemptedCount());
      assertEquals(" PV|3NS7_UOqWo!J", enrollmentsCSV0.getSubjectName());
      assertEquals(2434, enrollmentsCSV0.getOngoingCount());
      assertEquals(" PV|3NS7_UOqWo!J", enrollmentsCSV0.getSubjectCode());
      assertEquals(2434, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(2434, enrollmentsCSV0.getCancelledCount());
      assertEquals(2434, enrollmentsCSV0.getSucceededCount());
      assertEquals(", cancelledCount=", enrollmentsCSV0.getTerm());
      assertEquals(", cancelledCount=", enrollmentsCSV0.getCurriculumCode());
      assertEquals(65, enrollmentsCSV0.getSuspendedCount());
      
      EnrollmentsCSV enrollmentsCSV1 = new EnrollmentsCSV("sBu@t9~w'&5M9|!u[]", " PV|3NS7_UOqWo!J", ", cancelledCount=", "sBu@t9~w'&5M9|!u[]", ", cancelledCount=", "", 0, 2434, 65, 1479, (-2867), 0, 0, 65);
      assertFalse(enrollmentsCSV1.equals((Object)enrollmentsCSV0));
      assertNotNull(enrollmentsCSV1);
      assertEquals("sBu@t9~w'&5M9|!u[]", enrollmentsCSV1.getSubjectName());
      assertEquals(" PV|3NS7_UOqWo!J", enrollmentsCSV1.getCurriculumCode());
      assertEquals(65, enrollmentsCSV1.getCancelledCount());
      assertEquals(0, enrollmentsCSV1.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV1.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV1.getClassId());
      assertEquals((-2867), enrollmentsCSV1.getOngoingCount());
      assertEquals(1479, enrollmentsCSV1.getExemptedCount());
      assertEquals("sBu@t9~w'&5M9|!u[]", enrollmentsCSV1.getCourseCode());
      assertEquals(2434, enrollmentsCSV1.getSucceededCount());
      assertEquals(65, enrollmentsCSV1.getSuspendedCount());
      assertEquals(0, enrollmentsCSV1.getEnrollmentsCount());
      assertEquals(", cancelledCount=", enrollmentsCSV1.getSubjectCode());
      assertEquals(", cancelledCount=", enrollmentsCSV1.getTerm());
      
      int int0 = enrollmentsCSV0.compareTo(enrollmentsCSV1);
      assertFalse(enrollmentsCSV0.equals((Object)enrollmentsCSV1));
      assertFalse(enrollmentsCSV1.equals((Object)enrollmentsCSV0));
      assertEquals((-71), int0);
      assertNotSame(enrollmentsCSV0, enrollmentsCSV1);
      assertNotSame(enrollmentsCSV1, enrollmentsCSV0);
      assertEquals(", cancelledCount=", enrollmentsCSV0.getCourseCode());
      assertEquals((-2867), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(", cancelledCount=", enrollmentsCSV0.getClassId());
      assertEquals(2434, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(2434, enrollmentsCSV0.getExemptedCount());
      assertEquals(" PV|3NS7_UOqWo!J", enrollmentsCSV0.getSubjectName());
      assertEquals(2434, enrollmentsCSV0.getOngoingCount());
      assertEquals(" PV|3NS7_UOqWo!J", enrollmentsCSV0.getSubjectCode());
      assertEquals(2434, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(2434, enrollmentsCSV0.getCancelledCount());
      assertEquals(2434, enrollmentsCSV0.getSucceededCount());
      assertEquals(", cancelledCount=", enrollmentsCSV0.getTerm());
      assertEquals(", cancelledCount=", enrollmentsCSV0.getCurriculumCode());
      assertEquals(65, enrollmentsCSV0.getSuspendedCount());
      assertEquals("sBu@t9~w'&5M9|!u[]", enrollmentsCSV1.getSubjectName());
      assertEquals(" PV|3NS7_UOqWo!J", enrollmentsCSV1.getCurriculumCode());
      assertEquals(65, enrollmentsCSV1.getCancelledCount());
      assertEquals(0, enrollmentsCSV1.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV1.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV1.getClassId());
      assertEquals((-2867), enrollmentsCSV1.getOngoingCount());
      assertEquals(1479, enrollmentsCSV1.getExemptedCount());
      assertEquals("sBu@t9~w'&5M9|!u[]", enrollmentsCSV1.getCourseCode());
      assertEquals(2434, enrollmentsCSV1.getSucceededCount());
      assertEquals(65, enrollmentsCSV1.getSuspendedCount());
      assertEquals(0, enrollmentsCSV1.getEnrollmentsCount());
      assertEquals(", cancelledCount=", enrollmentsCSV1.getSubjectCode());
      assertEquals(", cancelledCount=", enrollmentsCSV1.getTerm());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", " -A_?$", "", "#v8)/=] gr;=", 0, 0, 0, 0, 0, (-1), 1456, (-1));
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      
      // Undeclared exception!
      try { 
        enrollmentsCSV0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", (-782), (-782), (-782), 0, 0, 0, (-1249), (-1249));
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-782), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals((-1249), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-782), enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals((-782), enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals((-1249), enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      
      // Undeclared exception!
      try { 
        enrollmentsCSV0.compareTo("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsCSV
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.enrollment.EnrollmentsCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", (String) null, "Hk\u0006]`", "CesI269N)tx&969q@M", "CesI269N)tx&969q@M", "ellA", (-1537), (-1537), 0, (-1537), 0, 1857, 125, 125);
      assertNotNull(enrollmentsCSV0);
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals("CesI269N)tx&969q@M", enrollmentsCSV0.getTerm());
      assertEquals("ellA", enrollmentsCSV0.getClassId());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-1537), enrollmentsCSV0.getExemptedCount());
      assertEquals((-1537), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("CesI269N)tx&969q@M", enrollmentsCSV0.getSubjectName());
      assertEquals(125, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-1537), enrollmentsCSV0.getSucceededCount());
      assertEquals(125, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("Hk\u0006]`", enrollmentsCSV0.getSubjectCode());
      assertEquals(1857, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      
      String string0 = enrollmentsCSV0.getCurriculumCode();
      assertNull(string0);
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals("CesI269N)tx&969q@M", enrollmentsCSV0.getTerm());
      assertEquals("ellA", enrollmentsCSV0.getClassId());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-1537), enrollmentsCSV0.getExemptedCount());
      assertEquals((-1537), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("CesI269N)tx&969q@M", enrollmentsCSV0.getSubjectName());
      assertEquals(125, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-1537), enrollmentsCSV0.getSucceededCount());
      assertEquals(125, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("Hk\u0006]`", enrollmentsCSV0.getSubjectCode());
      assertEquals(1857, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", "", "", "", 909, 909, 1183, 0, 0, 0, 0, 503);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(909, enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(1183, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(909, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(503, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      
      String string0 = enrollmentsCSV0.getClassId();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(909, enrollmentsCSV0.getSucceededCount());
      assertEquals("", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(1183, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(909, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(503, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("8+^KvFI7T,zV", "8+^KvFI7T,zV", "yC", "yC", "8+^KvFI7T,zV", "VjWR-vS%=\"<>QEhp\"", 1, 1, 1, (-3002), 0, 0, 0, (-1921));
      assertNotNull(enrollmentsCSV0);
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCourseCode());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals(1, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getTerm());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-1921), enrollmentsCSV0.getSuspendedCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectCode());
      assertEquals("yC", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-3002), enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("VjWR-vS%=\"<>QEhp\"", enrollmentsCSV0.getClassId());
      assertEquals(1, enrollmentsCSV0.getEnrollmentsCount());
      
      String string0 = enrollmentsCSV0.getCourseCode();
      assertEquals("8+^KvFI7T,zV", string0);
      assertNotNull(string0);
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCourseCode());
      assertEquals(1, enrollmentsCSV0.getCancelledCount());
      assertEquals(1, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getTerm());
      assertEquals("8+^KvFI7T,zV", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-1921), enrollmentsCSV0.getSuspendedCount());
      assertEquals("yC", enrollmentsCSV0.getSubjectCode());
      assertEquals("yC", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals((-3002), enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("VjWR-vS%=\"<>QEhp\"", enrollmentsCSV0.getClassId());
      assertEquals(1, enrollmentsCSV0.getEnrollmentsCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", ", subjectName='", ", subjectName='", "d<VI>=%-@s?TV", 0, 0, 0, 0, 0, 0, (-1441), 1);
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(1, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("d<VI>=%-@s?TV", enrollmentsCSV0.getClassId());
      assertEquals(", subjectName='", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals((-1441), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(", subjectName='", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      
      String string0 = enrollmentsCSV0.getSubjectCode();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(1, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("d<VI>=%-@s?TV", enrollmentsCSV0.getClassId());
      assertEquals(", subjectName='", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals((-1441), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(", subjectName='", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", " -A_?$", "", "#v8)/=] gr;=", 0, 0, 0, 0, 0, (-1), 1456, (-1));
      assertNotNull(enrollmentsCSV0);
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getTerm());
      
      String string0 = enrollmentsCSV0.getTerm();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getTerm());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", " -A_?$", "", "#v8)/=] gr;=", 0, 0, 0, 0, 0, (-1), 1456, (-1));
      assertNotNull(enrollmentsCSV0);
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      
      enrollmentsCSV0.setEnrollmentsCount(4157);
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals(4157, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", " -A_?$", "", "#v8)/=] gr;=", 0, 0, 0, 0, 0, (-1), 1456, (-1));
      assertNotNull(enrollmentsCSV0);
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      
      enrollmentsCSV0.setOngoingCount(0);
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("#v8)/=] gr;=", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getCurriculumCode());
      assertEquals((-1), enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals((-1), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(0, enrollmentsCSV0.getCancelledCount());
      assertEquals("", enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", "cDQQ7oU$&N0{", (-30), (-30), (-30), (-30), (-30), (-30), (-30), (-30));
      assertNotNull(enrollmentsCSV0);
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getClassId());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getTerm());
      assertEquals((-30), enrollmentsCSV0.getOngoingCount());
      assertEquals((-30), enrollmentsCSV0.getSucceededCount());
      assertEquals((-30), enrollmentsCSV0.getSuspendedCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectName());
      assertEquals((-30), enrollmentsCSV0.getCancelledCount());
      assertEquals((-30), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCourseCode());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCurriculumCode());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectCode());
      assertEquals((-30), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-30), enrollmentsCSV0.getExemptedCount());
      assertEquals((-30), enrollmentsCSV0.getFailedDueToAbsenceCount());
      
      int int0 = enrollmentsCSV0.getFailedDueToGradeCount();
      assertEquals((-30), int0);
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getClassId());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getTerm());
      assertEquals((-30), enrollmentsCSV0.getOngoingCount());
      assertEquals((-30), enrollmentsCSV0.getSucceededCount());
      assertEquals((-30), enrollmentsCSV0.getSuspendedCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectName());
      assertEquals((-30), enrollmentsCSV0.getCancelledCount());
      assertEquals((-30), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCourseCode());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getCurriculumCode());
      assertEquals("cDQQ7oU$&N0{", enrollmentsCSV0.getSubjectCode());
      assertEquals((-30), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-30), enrollmentsCSV0.getExemptedCount());
      assertEquals((-30), enrollmentsCSV0.getFailedDueToAbsenceCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (-21), (-21), (-21), (-21), (-21), (-21), (-21), (-21));
      assertNotNull(enrollmentsCSV0);
      assertEquals((-21), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-21), enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getClassId());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals((-21), enrollmentsCSV0.getCancelledCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-21), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-21), enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-21), enrollmentsCSV0.getOngoingCount());
      
      enrollmentsCSV0.setClassId((String) null);
      assertEquals((-21), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-21), enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getClassId());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getTerm());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals((-21), enrollmentsCSV0.getCancelledCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-21), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-21), enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-21), enrollmentsCSV0.getOngoingCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (-21), (-21), (-21), (-21), (-21), (-21), (-21), (-21));
      assertNotNull(enrollmentsCSV0);
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals((-21), enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals((-21), enrollmentsCSV0.getCancelledCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToGradeCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals((-21), enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals((-21), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-21), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-21), enrollmentsCSV0.getOngoingCount());
      
      enrollmentsCSV0.setFailedDueToGradeCount((-21));
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals((-21), enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getTerm());
      assertEquals((-21), enrollmentsCSV0.getCancelledCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToGradeCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals((-21), enrollmentsCSV0.getSucceededCount());
      assertNull(enrollmentsCSV0.getClassId());
      assertEquals((-21), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-21), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-21), enrollmentsCSV0.getOngoingCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", "B[{C]AB;\"ALxA(@>4)", 39, 39, 39, 39, 39, 39, 39, 39);
      assertNotNull(enrollmentsCSV0);
      assertEquals(39, enrollmentsCSV0.getOngoingCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectName());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getClassId());
      assertEquals(39, enrollmentsCSV0.getSuspendedCount());
      assertEquals(39, enrollmentsCSV0.getSucceededCount());
      assertEquals(39, enrollmentsCSV0.getCancelledCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCourseCode());
      assertEquals(39, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectCode());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getTerm());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCurriculumCode());
      assertEquals(39, enrollmentsCSV0.getExemptedCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToAbsenceCount());
      
      int int0 = enrollmentsCSV0.getExemptedCount();
      assertEquals(39, int0);
      assertEquals(39, enrollmentsCSV0.getOngoingCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectName());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getClassId());
      assertEquals(39, enrollmentsCSV0.getSuspendedCount());
      assertEquals(39, enrollmentsCSV0.getSucceededCount());
      assertEquals(39, enrollmentsCSV0.getCancelledCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCourseCode());
      assertEquals(39, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getSubjectCode());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getTerm());
      assertEquals("B[{C]AB;\"ALxA(@>4)", enrollmentsCSV0.getCurriculumCode());
      assertEquals(39, enrollmentsCSV0.getExemptedCount());
      assertEquals(39, enrollmentsCSV0.getFailedDueToAbsenceCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, "%W", (String) null, "%W", "", 0, 0, (-1), 0, 0, 0, 0, 125);
      assertNotNull(enrollmentsCSV0);
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(125, enrollmentsCSV0.getSuspendedCount());
      assertEquals("%W", enrollmentsCSV0.getSubjectCode());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("%W", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      
      enrollmentsCSV0.setSubjectCode("");
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(125, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals("%W", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("", enrollmentsCSV0.getSubjectCode());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertNull(enrollmentsCSV0.getSubjectName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", (-7), (-7), (-7), (-7), (-7), (-7), (-7), (-7));
      assertNotNull(enrollmentsCSV0);
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getClassId());
      assertEquals((-7), enrollmentsCSV0.getOngoingCount());
      assertEquals((-7), enrollmentsCSV0.getCancelledCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-7), enrollmentsCSV0.getSuspendedCount());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getSubjectCode());
      assertEquals((-7), enrollmentsCSV0.getSucceededCount());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getTerm());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getCurriculumCode());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getSubjectName());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getCourseCode());
      assertEquals((-7), enrollmentsCSV0.getExemptedCount());
      assertEquals((-7), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToAbsenceCount());
      
      enrollmentsCSV0.setTerm("C|d>qlV\"Z3Em$");
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getClassId());
      assertEquals((-7), enrollmentsCSV0.getOngoingCount());
      assertEquals((-7), enrollmentsCSV0.getCancelledCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-7), enrollmentsCSV0.getSuspendedCount());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getSubjectCode());
      assertEquals((-7), enrollmentsCSV0.getSucceededCount());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getTerm());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getCurriculumCode());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getSubjectName());
      assertEquals("C|d>qlV\"Z3Em$", enrollmentsCSV0.getCourseCode());
      assertEquals((-7), enrollmentsCSV0.getExemptedCount());
      assertEquals((-7), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToAbsenceCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, "%W", (String) null, "%W", "", 0, 0, (-1), 0, 0, 0, 0, 125);
      assertNotNull(enrollmentsCSV0);
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(125, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals("%W", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("%W", enrollmentsCSV0.getSubjectCode());
      
      int int0 = enrollmentsCSV0.getEnrollmentsCount();
      assertEquals(0, int0);
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertNull(enrollmentsCSV0.getSubjectName());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
      assertNull(enrollmentsCSV0.getCurriculumCode());
      assertEquals(125, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertNull(enrollmentsCSV0.getCourseCode());
      assertEquals("%W", enrollmentsCSV0.getTerm());
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals("%W", enrollmentsCSV0.getSubjectCode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", (-7), (-7), (-7), (-7), (-7), (-7), (-7), (-7));
      String string0 = enrollmentsCSV0.toString();
      assertEquals("EnrollmentsCSV{courseCode='C|d>qlV\"Z3Em$', curriculumCode='C|d>qlV\"Z3Em$', subjectCode='C|d>qlV\"Z3Em$', subjectName='C|d>qlV\"Z3Em$', term='C|d>qlV\"Z3Em$', classId='C|d>qlV\"Z3Em$', enrollmentsCount=-7, succeededCount=-7, cancelledCount=-7, exemptedCount=-7, ongoingCount=-7, failedDueToGradeCount=-7, failedDueToAbsenceCount=-7, suspendedCount=-7}", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (-21), (-21), (-21), (-21), (-21), (-21), (-21), (-21));
      int int0 = enrollmentsCSV0.getOngoingCount();
      assertEquals((-21), enrollmentsCSV0.getExemptedCount());
      assertEquals((-21), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-21), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-21), int0);
      assertEquals((-21), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-21), enrollmentsCSV0.getSucceededCount());
      assertEquals((-21), enrollmentsCSV0.getCancelledCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToGradeCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (-21), (-21), (-21), (-21), (-21), (-21), (-21), (-21));
      enrollmentsCSV0.setSucceededCount((-21));
      assertEquals((-21), enrollmentsCSV0.getOngoingCount());
      assertEquals((-21), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-21), enrollmentsCSV0.getSucceededCount());
      assertEquals((-21), enrollmentsCSV0.getExemptedCount());
      assertEquals((-21), enrollmentsCSV0.getCancelledCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-21), enrollmentsCSV0.getSuspendedCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", (-7), (-7), (-7), (-7), (-7), (-7), (-7), (-7));
      int int0 = enrollmentsCSV0.getCancelledCount();
      assertEquals((-7), enrollmentsCSV0.getOngoingCount());
      assertEquals((-7), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-7), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-7), enrollmentsCSV0.getExemptedCount());
      assertEquals((-7), enrollmentsCSV0.getSucceededCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("", "", "", " -A_?$", "", "#v8)/=] gr;=", 0, 0, 0, 0, 0, (-1), 1456, (-1));
      assertEquals(" -A_?$", enrollmentsCSV0.getSubjectName());
      
      enrollmentsCSV0.setSubjectName("#v8)/=] gr;=");
      assertEquals(1456, enrollmentsCSV0.getFailedDueToAbsenceCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (-21), (-21), (-21), (-21), (-21), (-21), (-21), (-21));
      int int0 = enrollmentsCSV0.getSucceededCount();
      assertEquals((-21), enrollmentsCSV0.getOngoingCount());
      assertEquals((-21), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-21), enrollmentsCSV0.getCancelledCount());
      assertEquals((-21), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-21), int0);
      assertEquals((-21), enrollmentsCSV0.getExemptedCount());
      assertEquals((-21), enrollmentsCSV0.getFailedDueToAbsenceCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV((String) null, (String) null, "%W", (String) null, "%W", "", 0, 0, (-1), 0, 0, 0, 0, 125);
      int int0 = enrollmentsCSV0.getFailedDueToAbsenceCount();
      assertEquals("%W", enrollmentsCSV0.getTerm());
      assertEquals("%W", enrollmentsCSV0.getSubjectCode());
      assertEquals((-1), enrollmentsCSV0.getCancelledCount());
      assertEquals(0, enrollmentsCSV0.getSucceededCount());
      assertEquals(0, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(125, enrollmentsCSV0.getSuspendedCount());
      assertEquals(0, enrollmentsCSV0.getExemptedCount());
      assertEquals(0, enrollmentsCSV0.getOngoingCount());
      assertEquals(0, int0);
      assertEquals("", enrollmentsCSV0.getClassId());
      assertEquals(0, enrollmentsCSV0.getEnrollmentsCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", (-7), (-7), (-7), (-7), (-7), (-7), (-7), (-7));
      enrollmentsCSV0.compareTo(enrollmentsCSV0);
      assertEquals((-7), enrollmentsCSV0.getCancelledCount());
      assertEquals((-7), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-7), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-7), enrollmentsCSV0.getSucceededCount());
      assertEquals((-7), enrollmentsCSV0.getExemptedCount());
      assertEquals((-7), enrollmentsCSV0.getOngoingCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", (-7), (-7), (-7), (-7), (-7), (-7), (-7), (-7));
      int int0 = enrollmentsCSV0.getSuspendedCount();
      assertEquals((-7), int0);
      assertEquals((-7), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-7), enrollmentsCSV0.getOngoingCount());
      assertEquals((-7), enrollmentsCSV0.getCancelledCount());
      assertEquals((-7), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-7), enrollmentsCSV0.getSucceededCount());
      assertEquals((-7), enrollmentsCSV0.getExemptedCount());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("U6~iq", "U6~iq", "U6~iq", "U6~iq", "U6~iq", "U6~iq", 18, 18, 18, 18, 18, 18, 18, 18);
      enrollmentsCSV0.getSubjectName();
      assertEquals(18, enrollmentsCSV0.getCancelledCount());
      assertEquals(18, enrollmentsCSV0.getSuspendedCount());
      assertEquals(18, enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals(18, enrollmentsCSV0.getEnrollmentsCount());
      assertEquals(18, enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals(18, enrollmentsCSV0.getExemptedCount());
      assertEquals(18, enrollmentsCSV0.getSucceededCount());
      assertEquals(18, enrollmentsCSV0.getOngoingCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EnrollmentsCSV enrollmentsCSV0 = new EnrollmentsCSV("C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", "C|d>qlV\"Z3Em$", (-7), (-7), (-7), (-7), (-7), (-7), (-7), (-7));
      enrollmentsCSV0.setExemptedCount((-7));
      assertEquals((-7), enrollmentsCSV0.getSuspendedCount());
      assertEquals((-7), enrollmentsCSV0.getEnrollmentsCount());
      assertEquals((-7), enrollmentsCSV0.getOngoingCount());
      assertEquals((-7), enrollmentsCSV0.getSucceededCount());
      assertEquals((-7), enrollmentsCSV0.getExemptedCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToAbsenceCount());
      assertEquals((-7), enrollmentsCSV0.getFailedDueToGradeCount());
      assertEquals((-7), enrollmentsCSV0.getCancelledCount());
  }
}
