/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:24:17 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectData;
import br.edu.ufcg.computacao.eureca.backend.core.dao.scsvfiles.mapentries.SubjectKey;
import br.edu.ufcg.computacao.eureca.backend.core.models.Subject;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubjectData_ESTest extends SubjectData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("%[0L.[\"mL*7|2>", " #8k$W$Vz", (-1983), 1404, " #8k$W$Vz", "SubjectKey{courseCode='", 1404, " #8k$W$Vz", ", coRequirements='");
      String string0 = subjectData0.getType();
      assertEquals(" #8k$W$Vz", subjectData0.getPreRequirements());
      assertEquals("%[0L.[\"mL*7|2>", subjectData0.getAcademicUnitId());
      assertEquals(1404, subjectData0.getHours());
      assertEquals(1404, subjectData0.getIdealTerm());
      assertEquals(", coRequirements='", subjectData0.getCoRequirements());
      assertEquals(" #8k$W$Vz", string0);
      assertEquals((-1983), subjectData0.getCredits());
      assertEquals(" #8k$W$Vz", subjectData0.getName());
      assertEquals("SubjectKey{courseCode='", subjectData0.getEquivalentCodes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getPreRequirements();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("\"G%Vo0zc{'z", "QpUJyr", (-2169), (-2169), "QpUJyr", "\"G%Vo0zc{'z", (-2169), "\"G%Vo0zc{'z", "\"G%Vo0zc{'z");
      String string0 = subjectData0.getPreRequirements();
      assertEquals("\"G%Vo0zc{'z", string0);
      assertEquals("QpUJyr", subjectData0.getType());
      assertEquals("\"G%Vo0zc{'z", subjectData0.getAcademicUnitId());
      assertEquals((-2169), subjectData0.getHours());
      assertEquals((-2169), subjectData0.getIdealTerm());
      assertEquals((-2169), subjectData0.getCredits());
      assertEquals("QpUJyr", subjectData0.getName());
      assertEquals("\"G%Vo0zc{'z", subjectData0.getEquivalentCodes());
      assertEquals("\"G%Vo0zc{'z", subjectData0.getCoRequirements());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData(",?K_sv^Pm8GbNO", "89IC9j", (-1278), 230, "89IC9j", ",?K_sv^Pm8GbNO", 1645, "89IC9j", "4");
      String string0 = subjectData0.getName();
      assertEquals("89IC9j", subjectData0.getType());
      assertEquals(",?K_sv^Pm8GbNO", subjectData0.getAcademicUnitId());
      assertEquals(230, subjectData0.getHours());
      assertEquals("89IC9j", string0);
      assertEquals("89IC9j", subjectData0.getPreRequirements());
      assertEquals(",?K_sv^Pm8GbNO", subjectData0.getEquivalentCodes());
      assertEquals(1645, subjectData0.getIdealTerm());
      assertEquals("4", subjectData0.getCoRequirements());
      assertEquals((-1278), subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("3%dB1g_9JssZ) oS", "3%dB1g_9JssZ) oS", 0, 0, "3%dB1g_9JssZ) oS", "", 0, "", "");
      int int0 = subjectData0.getIdealTerm();
      assertEquals(0, int0);
      assertEquals("3%dB1g_9JssZ) oS", subjectData0.getAcademicUnitId());
      assertEquals("3%dB1g_9JssZ) oS", subjectData0.getName());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals(0, subjectData0.getHours());
      assertEquals(0, subjectData0.getCredits());
      assertEquals("3%dB1g_9JssZ) oS", subjectData0.getType());
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals("", subjectData0.getCoRequirements());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", (-914), 2202, "", "", (-3846), "", "R6/<G\"f~-");
      int int0 = subjectData0.getIdealTerm();
      assertEquals("R6/<G\"f~-", subjectData0.getCoRequirements());
      assertEquals(2202, subjectData0.getHours());
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals((-3846), int0);
      assertEquals((-914), subjectData0.getCredits());
      assertEquals("", subjectData0.getType());
      assertEquals("", subjectData0.getName());
      assertEquals("", subjectData0.getAcademicUnitId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("%[0L.[\"mL*7|2>", " #8k$W$Vz", (-1983), 1404, " #8k$W$Vz", "SubjectKey{courseCode='", 1404, " #8k$W$Vz", ", coRequirements='");
      int int0 = subjectData0.getHours();
      assertEquals(", coRequirements='", subjectData0.getCoRequirements());
      assertEquals(1404, subjectData0.getIdealTerm());
      assertEquals(" #8k$W$Vz", subjectData0.getPreRequirements());
      assertEquals("SubjectKey{courseCode='", subjectData0.getEquivalentCodes());
      assertEquals((-1983), subjectData0.getCredits());
      assertEquals(" #8k$W$Vz", subjectData0.getType());
      assertEquals(1404, int0);
      assertEquals("%[0L.[\"mL*7|2>", subjectData0.getAcademicUnitId());
      assertEquals(" #8k$W$Vz", subjectData0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 0, (-4854), "", "", 0, "", "");
      int int0 = subjectData0.getHours();
      assertEquals((-4854), int0);
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals(0, subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 2871, (-5701), "4$vV+P]'8zQ", "", 0, "", (String) null);
      Collection<String> collection0 = subjectData0.getEquivalentCodesList();
      assertEquals("", subjectData0.getEquivalentCodes());
      assertFalse(collection0.contains(""));
      assertEquals("4$vV+P]'8zQ", subjectData0.getName());
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals((-5701), subjectData0.getHours());
      assertEquals(2871, subjectData0.getCredits());
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals("", subjectData0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getEquivalentCodes();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("TM P", "TM P", 140, 140, "TM P", "TM P", 140, "TM P", "TM P");
      subjectData0.getEquivalentCodes();
      assertEquals(140, subjectData0.getCredits());
      assertEquals(140, subjectData0.getHours());
      assertEquals(140, subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("p&~=<l==k", "p&~=<l==k", 0, (-689), ", equivalentCodes='", ", equivalentCodes='", 0, "SubjectData{academicUnitId='", "uqDWO6");
      int int0 = subjectData0.getCredits();
      assertEquals(0, int0);
      assertEquals("p&~=<l==k", subjectData0.getType());
      assertEquals("uqDWO6", subjectData0.getCoRequirements());
      assertEquals("SubjectData{academicUnitId='", subjectData0.getPreRequirements());
      assertEquals((-689), subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals(", equivalentCodes='", subjectData0.getEquivalentCodes());
      assertEquals(", equivalentCodes='", subjectData0.getName());
      assertEquals("p&~=<l==k", subjectData0.getAcademicUnitId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("6y<h_6#gVr", "6y<h_6#gVr", (-446), 839, "6y<h_6#gVr", "", (-446), "Q>uS+", "Q>uS+");
      int int0 = subjectData0.getCredits();
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals((-446), int0);
      assertEquals("6y<h_6#gVr", subjectData0.getType());
      assertEquals("Q>uS+", subjectData0.getPreRequirements());
      assertEquals("Q>uS+", subjectData0.getCoRequirements());
      assertEquals((-446), subjectData0.getIdealTerm());
      assertEquals(839, subjectData0.getHours());
      assertEquals("6y<h_6#gVr", subjectData0.getName());
      assertEquals("6y<h_6#gVr", subjectData0.getAcademicUnitId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getCoRequirements();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.getAcademicUnitId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData(",?K_sv^Pm8GbNO", "89IC9j", (-1278), 230, "89IC9j", ",?K_sv^Pm8GbNO", 1645, "89IC9j", "4");
      String string0 = subjectData0.getAcademicUnitId();
      assertEquals(1645, subjectData0.getIdealTerm());
      assertEquals((-1278), subjectData0.getCredits());
      assertEquals(230, subjectData0.getHours());
      assertEquals(",?K_sv^Pm8GbNO", string0);
      assertEquals("89IC9j", subjectData0.getName());
      assertEquals("89IC9j", subjectData0.getPreRequirements());
      assertEquals("89IC9j", subjectData0.getType());
      assertEquals("4", subjectData0.getCoRequirements());
      assertEquals(",?K_sv^Pm8GbNO", subjectData0.getEquivalentCodes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("3%dB1g_9JssZ) oS", "3%dB1g_9JssZ) oS", 0, 0, "3%dB1g_9JssZ) oS", "", 0, "", "");
      SubjectKey subjectKey0 = mock(SubjectKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(subjectKey0).getCourseCode();
      doReturn((String) null).when(subjectKey0).getCurriculumCode();
      doReturn((String) null).when(subjectKey0).getSubjectCode();
      Subject subject0 = subjectData0.createSubject(subjectKey0);
      assertEquals("", subjectData0.getPreRequirements());
      assertFalse(subject0.isComposed());
      assertEquals(0, subject0.getIdealTerm());
      assertEquals(0, subject0.getCredits());
      assertEquals("3%dB1g_9JssZ) oS", subject0.getName());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals(0, subject0.getHours());
      assertEquals("3%dB1g_9JssZ) oS", subject0.getAcademicUnit());
      assertEquals("3%dB1g_9JssZ) oS", subject0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", (-1342), (-1342), "", "", (-1342), "", "");
      SubjectKey subjectKey0 = mock(SubjectKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(subjectKey0).getCourseCode();
      doReturn((String) null).when(subjectKey0).getCurriculumCode();
      doReturn((String) null).when(subjectKey0).getSubjectCode();
      Subject subject0 = subjectData0.createSubject(subjectKey0);
      assertEquals((-1342), subject0.getIdealTerm());
      assertEquals((-1342), subject0.getHours());
      assertFalse(subject0.isComposed());
      assertEquals((-1342), subject0.getCredits());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      // Undeclared exception!
      try { 
        subjectData0.getCoRequirementsList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      SubjectKey subjectKey0 = mock(SubjectKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(subjectKey0).getCourseCode();
      doReturn((String) null).when(subjectKey0).getCurriculumCode();
      doReturn((String) null).when(subjectKey0).getSubjectCode();
      // Undeclared exception!
      try { 
        subjectData0.createSubject(subjectKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 125, 125, "", "#UPG$5^:,wc*1;O6", (-786), "", "#UPG$5^:,wc*1;O6");
      String string0 = subjectData0.getPreRequirements();
      assertEquals("", subjectData0.getName());
      assertEquals((-786), subjectData0.getIdealTerm());
      assertEquals("#UPG$5^:,wc*1;O6", subjectData0.getEquivalentCodes());
      assertEquals(125, subjectData0.getCredits());
      assertEquals("#UPG$5^:,wc*1;O6", subjectData0.getCoRequirements());
      assertEquals("", string0);
      assertEquals("", subjectData0.getType());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals(125, subjectData0.getHours());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 0, (-4854), "", "", 0, "", "");
      subjectData0.getType();
      assertEquals((-4854), subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals(0, subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 2871, (-5701), "4$vV+P]'8zQ", "", 0, "", (String) null);
      int int0 = subjectData0.getCredits();
      assertEquals("4$vV+P]'8zQ", subjectData0.getName());
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals((-5701), subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals("", subjectData0.getType());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertEquals(2871, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 125, 125, "", "#UPG$5^:,wc*1;O6", (-786), "", "#UPG$5^:,wc*1;O6");
      String string0 = subjectData0.getName();
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals(125, subjectData0.getCredits());
      assertEquals("#UPG$5^:,wc*1;O6", subjectData0.getEquivalentCodes());
      assertEquals("", subjectData0.getAcademicUnitId());
      assertEquals((-786), subjectData0.getIdealTerm());
      assertEquals(125, subjectData0.getHours());
      assertEquals("", subjectData0.getType());
      assertEquals("#UPG$5^:,wc*1;O6", subjectData0.getCoRequirements());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("%[0L.[\"mL*7|2>", " #8k$W$Vz", (-1983), 1404, " #8k$W$Vz", "SubjectKey{courseCode='", 1404, " #8k$W$Vz", ", coRequirements='");
      String string0 = subjectData0.getCoRequirements();
      assertEquals("SubjectKey{courseCode='", subjectData0.getEquivalentCodes());
      assertEquals("%[0L.[\"mL*7|2>", subjectData0.getAcademicUnitId());
      assertEquals(", coRequirements='", string0);
      assertEquals((-1983), subjectData0.getCredits());
      assertEquals(1404, subjectData0.getIdealTerm());
      assertEquals(" #8k$W$Vz", subjectData0.getName());
      assertEquals(" #8k$W$Vz", subjectData0.getPreRequirements());
      assertEquals(" #8k$W$Vz", subjectData0.getType());
      assertEquals(1404, subjectData0.getHours());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("6y<h_6#gVr", "6y<h_6#gVr", (-446), 839, "6y<h_6#gVr", "", (-446), "Q>uS+", "Q>uS+");
      String string0 = subjectData0.getEquivalentCodes();
      assertEquals("6y<h_6#gVr", subjectData0.getType());
      assertEquals(839, subjectData0.getHours());
      assertEquals((-446), subjectData0.getIdealTerm());
      assertEquals("6y<h_6#gVr", subjectData0.getAcademicUnitId());
      assertEquals("Q>uS+", subjectData0.getPreRequirements());
      assertEquals("", string0);
      assertEquals("Q>uS+", subjectData0.getCoRequirements());
      assertEquals("6y<h_6#gVr", subjectData0.getName());
      assertEquals((-446), subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("", "", 2871, (-5701), "4$vV+P]'8zQ", "", 0, "", (String) null);
      String string0 = subjectData0.getAcademicUnitId();
      assertEquals("", subjectData0.getPreRequirements());
      assertEquals("4$vV+P]'8zQ", subjectData0.getName());
      assertEquals(2871, subjectData0.getCredits());
      assertEquals((-5701), subjectData0.getHours());
      assertEquals(0, subjectData0.getIdealTerm());
      assertEquals("", string0);
      assertEquals("", subjectData0.getType());
      assertEquals("", subjectData0.getEquivalentCodes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("%[0L.[\"mL*7|2>", " #8k$W$Vz", (-1983), 1404, " #8k$W$Vz", "SubjectKey{courseCode='", 1404, " #8k$W$Vz", ", coRequirements='");
      int int0 = subjectData0.getIdealTerm();
      assertEquals(" #8k$W$Vz", subjectData0.getType());
      assertEquals("SubjectKey{courseCode='", subjectData0.getEquivalentCodes());
      assertEquals(" #8k$W$Vz", subjectData0.getName());
      assertEquals(1404, int0);
      assertEquals((-1983), subjectData0.getCredits());
      assertEquals(", coRequirements='", subjectData0.getCoRequirements());
      assertEquals("%[0L.[\"mL*7|2>", subjectData0.getAcademicUnitId());
      assertEquals(1404, subjectData0.getHours());
      assertEquals(" #8k$W$Vz", subjectData0.getPreRequirements());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      int int0 = subjectData0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      // Undeclared exception!
      try { 
        subjectData0.getPreRequirementsList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("/", "/", 93, 93, "/", "/", 93, "/", "/");
      subjectData0.setHours(93);
      assertEquals(93, subjectData0.getIdealTerm());
      assertEquals(93, subjectData0.getCredits());
      assertEquals(93, subjectData0.getHours());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setIdealTerm(28);
      assertEquals(28, subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      // Undeclared exception!
      try { 
        subjectData0.getEquivalentCodesList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      String string0 = subjectData0.toString();
      assertEquals("SubjectData{academicUnitId='null', type='null', credits=0, hours=0, name='null', equivalentCodes='null', idealTerm=0, preRequirements='null', coRequirements='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setAcademicUnitId("SubjectData{academicUnitId='null', type='null', credits=0, hours=0, name='', equivalentCodes='null', idealTerm=0, preRequirements='null', coRequirements='null'}");
      assertNull(subjectData0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("/", "/", 93, 93, "/", "/", 93, "/", "/");
      Collection<String> collection0 = subjectData0.getCoRequirementsList();
      assertTrue(collection0.contains("/"));
      assertEquals(93, subjectData0.getIdealTerm());
      assertEquals(93, subjectData0.getCredits());
      assertEquals(93, subjectData0.getHours());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setCredits(28);
      assertEquals(28, subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setName("");
      assertEquals(0, subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setPreRequirements("");
      Collection<String> collection0 = subjectData0.getPreRequirementsList();
      assertFalse(collection0.contains(""));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setCoRequirements("");
      String string0 = subjectData0.getCoRequirements();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("/", "/", 93, 93, "/", "/", 93, "/", "/");
      subjectData0.setType("/");
      assertEquals(93, subjectData0.getIdealTerm());
      assertEquals(93, subjectData0.getHours());
      assertEquals(93, subjectData0.getCredits());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData();
      subjectData0.setEquivalentCodes("SubjectData{academicUnitId='null', type='null', credits=0, hours=0, name='', equivalentCodes='null', idealTerm=0, preRequirements='null', coRequirements='null'}");
      assertEquals(0, subjectData0.getIdealTerm());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SubjectData subjectData0 = new SubjectData("/", "/", 93, 93, "/", "/", 93, "/", "/");
      SubjectKey subjectKey0 = mock(SubjectKey.class, new ViolatedAssumptionAnswer());
      doReturn("/").when(subjectKey0).getCourseCode();
      doReturn("/").when(subjectKey0).getCurriculumCode();
      doReturn("/").when(subjectKey0).getSubjectCode();
      Subject subject0 = subjectData0.createSubject(subjectKey0);
      assertEquals(93, subject0.getHours());
      assertEquals(93, subject0.getIdealTerm());
      assertTrue(subject0.isComposed());
      assertEquals(93, subject0.getCredits());
  }
}
