/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:29:01 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.students;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.active.ActivesSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.alumni.AlumniSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.dropout.DropoutsSummary;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentsStatisticsSummaryResponse;
import br.edu.ufcg.computacao.eureca.backend.constants.StudentsGlossaryFields;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentsStatisticsSummaryResponse_ESTest extends StudentsStatisticsSummaryResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("Pe*", "Zd;MT4<`~({", activesSummary0, alumniSummary0, (DropoutsSummary) null);
      studentsStatisticsSummaryResponse0.getDropoutsSummary();
      assertEquals("Pe*", studentsStatisticsSummaryResponse0.getCourseCode());
      assertEquals("Zd;MT4<`~({", studentsStatisticsSummaryResponse0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse((String) null, (String) null, activesSummary0, alumniSummary0, dropoutsSummary0);
      String string0 = studentsStatisticsSummaryResponse0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("6SIt)", "<6Q0i/.@}r", activesSummary0, alumniSummary0, dropoutsSummary0);
      String string0 = studentsStatisticsSummaryResponse0.getCurriculumCode();
      assertEquals("<6Q0i/.@}r", string0);
      assertEquals("6SIt)", studentsStatisticsSummaryResponse0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("", "", activesSummary0, alumniSummary0, dropoutsSummary0);
      studentsStatisticsSummaryResponse0.setCourseCode((String) null);
      String string0 = studentsStatisticsSummaryResponse0.getCourseCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("C~#uy9K", "", (ActivesSummary) null, alumniSummary0, dropoutsSummary0);
      String string0 = studentsStatisticsSummaryResponse0.getCourseCode();
      assertEquals("", studentsStatisticsSummaryResponse0.getCurriculumCode());
      assertEquals("C~#uy9K", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("^4;", "^4;", activesSummary0, (AlumniSummary) null, dropoutsSummary0);
      AlumniSummary alumniSummary0 = studentsStatisticsSummaryResponse0.getAlumniSummary();
      assertNull(alumniSummary0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentsStatisticsSummaryResponse", "", (ActivesSummary) null, alumniSummary0, dropoutsSummary0);
      studentsStatisticsSummaryResponse0.getActivesSummary();
      assertEquals("", studentsStatisticsSummaryResponse0.getCurriculumCode());
      assertEquals("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentsStatisticsSummaryResponse", studentsStatisticsSummaryResponse0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("NOT_APPLICABLE", "NOT_APPLICABLE", activesSummary0, alumniSummary0, dropoutsSummary0);
      studentsStatisticsSummaryResponse0.setGlossary((StudentsGlossaryFields) null);
      assertEquals("NOT_APPLICABLE", studentsStatisticsSummaryResponse0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("NOT_APPLICABLE", "NOT_APPLICABLE", activesSummary0, alumniSummary0, dropoutsSummary0);
      StudentsGlossaryFields studentsGlossaryFields0 = studentsStatisticsSummaryResponse0.getGlossary();
      assertNull(studentsGlossaryFields0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse(")Dz3,.x&$P{xK", ")Dz3,.x&$P{xK", activesSummary0, alumniSummary0, dropoutsSummary0);
      AlumniSummary alumniSummary1 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      studentsStatisticsSummaryResponse0.setAlumniSummary(alumniSummary1);
      assertEquals(")Dz3,.x&$P{xK", studentsStatisticsSummaryResponse0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("&", "an3", (ActivesSummary) null, alumniSummary0, dropoutsSummary0);
      studentsStatisticsSummaryResponse0.setActivesSummary((ActivesSummary) null);
      assertEquals("&", studentsStatisticsSummaryResponse0.getCourseCode());
      assertEquals("an3", studentsStatisticsSummaryResponse0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse((String) null, (String) null, activesSummary0, alumniSummary0, dropoutsSummary0);
      studentsStatisticsSummaryResponse0.setCurriculumCode((String) null);
      assertNull(studentsStatisticsSummaryResponse0.getCourseCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("", "", activesSummary0, alumniSummary0, (DropoutsSummary) null);
      String string0 = studentsStatisticsSummaryResponse0.getCourseCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      DropoutsSummary dropoutsSummary0 = mock(DropoutsSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("", "", activesSummary0, alumniSummary0, dropoutsSummary0);
      String string0 = studentsStatisticsSummaryResponse0.getCurriculumCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActivesSummary activesSummary0 = mock(ActivesSummary.class, new ViolatedAssumptionAnswer());
      AlumniSummary alumniSummary0 = mock(AlumniSummary.class, new ViolatedAssumptionAnswer());
      StudentsStatisticsSummaryResponse studentsStatisticsSummaryResponse0 = new StudentsStatisticsSummaryResponse("KK,1c(j<:0,RaB", "KK,1c(j<:0,RaB", activesSummary0, alumniSummary0, (DropoutsSummary) null);
      studentsStatisticsSummaryResponse0.setDropoutsSummary((DropoutsSummary) null);
      assertEquals("KK,1c(j<:0,RaB", studentsStatisticsSummaryResponse0.getCurriculumCode());
  }
}
