/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 13 21:23:24 GMT 2022
 */

package br.edu.ufcg.computacao.eureca.backend.api.http.response.students;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV;
import br.edu.ufcg.computacao.eureca.backend.core.models.CostClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.Curriculum;
import br.edu.ufcg.computacao.eureca.backend.core.models.Registration;
import br.edu.ufcg.computacao.eureca.backend.core.models.RiskClass;
import br.edu.ufcg.computacao.eureca.backend.core.models.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StudentCSV_ESTest extends StudentCSV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0, 0, 0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("Am`8;zROhO+(").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 1037).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn(2048.17269).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2165.2790780329)).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(1037).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getSuspendedTerms();
      assertEquals(1037, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 34).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("t+\"[ICR>d").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getSuspendedTerms();
      assertEquals((-989), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(curriculum1).getMaxNumberOfTerms();
      doReturn(11, 954).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getSuccessRate();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(1, (-1402)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(11).when(student0).getComplementaryCredits();
      doReturn(11).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getSuccessRate();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(curriculum1).getMaxNumberOfTerms();
      doReturn(11, 954).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getStatusTerm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(11, 1812).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1329), 0, 11, (-1329), 216).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)0).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn(0, 0, 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn((-1.680130172936356)).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getStatusStr();
      assertEquals("d|&T&=UpsixY,", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("qC").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(2290, (-4965)).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)2290, 3.0, (double)8, (double)1).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(0, 0, (-4965), 8).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0, 0, 0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(student0).getAdmissionGrade();
      doReturn("vn!").when(student0).getAdmissionStr();
      doReturn("vn!").when(student0).getAdmissionTerm();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics").when(student0).getAffirmativePolicy();
      doReturn(0, 1).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(8).when(student0).getCompletedCredits();
      doReturn(2290, 8).when(student0).getCompletedTerms();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("vn!").when(student0).getCurriculumCode();
      doReturn("%nVcfW*wBsqQ}~!Z").when(student0).getGender();
      doReturn(0.0).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn(2290, 2290, 8).when(student0).getInstitutionalEnrollments();
      doReturn(8).when(student0).getMandatoryCredits();
      doReturn("qC").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn(0).when(student0).getMobilityTerms();
      doReturn("U2,p]&iOaEe?<6+{_|:").when(student0).getName();
      doReturn((-2653)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("U2,p]&iOaEe?<6+{_|:").when(student0).getStatusStr();
      doReturn("qC").when(student0).getStatusTerm();
      doReturn((-2653)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getRisk();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("wb??r{,OD'&l}G6qcq").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfTerms();
      doReturn(0.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV").when(student0).getAdmissionTerm();
      doReturn("wb??r{,OD'&l}G6qcq").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, 0).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn(0.0).when(student0).getGpa();
      doReturn(2447.7430408752234).when(student0).getIea();
      doReturn(0, 3063, 3063).when(student0).getInstitutionalEnrollments();
      doReturn(3063).when(student0).getMandatoryCredits();
      doReturn("OLe").when(student0).getMaritalStatus();
      doReturn(1.0).when(student0).getMc();
      doReturn(3063).when(student0).getMobilityTerms();
      doReturn("wb??r{,OD'&l}G6qcq").when(student0).getName();
      doReturn(3063).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("+Xp)xKBL[}4;P?X").when(student0).getStatusTerm();
      doReturn((-745)).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn("3x8").when(student0).getAffirmativePolicy();
      doReturn((-4924), (-3545)).when(student0).getAttemptedCredits();
      doReturn((-3545)).when(student0).getComplementaryCredits();
      doReturn(1008).when(student0).getCompletedCredits();
      doReturn((-702), 0).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("3x8").when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn(0.0).when(student0).getGpa();
      doReturn((double)(-4924)).when(student0).getIea();
      doReturn(0, (-1), (-1)).when(student0).getInstitutionalEnrollments();
      doReturn(1008).when(student0).getMandatoryCredits();
      doReturn("3x8").when(student0).getMaritalStatus();
      doReturn((double)1008).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("qiYaI,").when(student0).getName();
      doReturn((-1)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn((-3545)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn(", minNumberOfTerms=").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(0, 0).when(curriculum0).getMaxNumberOfTerms();
      doReturn(0.0, 0.0, 0.0, 0.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(0, 0, 0, 0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(235.5).when(student0).getAdmissionGrade();
      doReturn(", minNumberOfTerms=").when(student0).getAdmissionStr();
      doReturn(", minNumberOfTerms=").when(student0).getAdmissionTerm();
      doReturn(", minNumberOfTerms=").when(student0).getAffirmativePolicy();
      doReturn(7, 7).when(student0).getAttemptedCredits();
      doReturn(277).when(student0).getComplementaryCredits();
      doReturn(1).when(student0).getCompletedCredits();
      doReturn(1350, 1).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn(", minNumberOfTerms=").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn(0.0).when(student0).getGpa();
      doReturn(1.0).when(student0).getIea();
      doReturn(7, 39, 1350).when(student0).getInstitutionalEnrollments();
      doReturn(1171).when(student0).getMandatoryCredits();
      doReturn(", minNumberOfTerms=").when(student0).getMaritalStatus();
      doReturn(1.0).when(student0).getMc();
      doReturn(7).when(student0).getMobilityTerms();
      doReturn(", minOptionalCreditsNeeded=").when(student0).getName();
      doReturn(1350).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("X\".|\"%'/&[k5mwUe'JS").when(student0).getStatusTerm();
      doReturn(7).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(525).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(522).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(13).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2023), (-3560)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(3900, 0, 13, 525, (-280)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-0.8155735545660525)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(525, 0).when(student0).getAttemptedCredits();
      doReturn(1503).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(525, 525).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getCurriculumCode();
      doReturn("+zWbxid7{p*G*").when(student0).getGender();
      doReturn(759.9740337939055).when(student0).getGpa();
      doReturn((double)525).when(student0).getIea();
      doReturn(522, 2, 1949).when(student0).getInstitutionalEnrollments();
      doReturn(525).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn((double)13).when(student0).getMc();
      doReturn((-3560)).when(student0).getMobilityTerms();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getName();
      doReturn((-3560)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("<uiiH!:6E>*E").when(student0).getStatusStr();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics").when(student0).getStatusTerm();
      doReturn((-3560)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getPace();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("xz,_Y.cN(s0)aZm").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(5017).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-989)).when(curriculum1).getMinNumberOfTerms();
      Curriculum curriculum2 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum2).getMaxNumberOfTerms();
      doReturn(0, 0, 1, 1927).when(curriculum2).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(4.0).when(student0).getAdmissionGrade();
      doReturn("xz,_Y.cN(s0)aZm").when(student0).getAdmissionStr();
      doReturn(")M#7Umx5]$yQH").when(student0).getAdmissionTerm();
      doReturn(")M#7Umx5]$yQH").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn((-3012)).when(student0).getCompletedCredits();
      doReturn((-943), (-3012)).when(student0).getCompletedTerms();
      doReturn(")M#7Umx5]$yQH").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum2).when(student0).getCurriculum();
      doReturn(",K;%K]Xa<s]Jy=Gt&").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((-2625.4342308204655)).when(student0).getGpa();
      doReturn((-1066.85454)).when(student0).getIea();
      doReturn((-943), (-179), 0).when(student0).getInstitutionalEnrollments();
      doReturn((-3012)).when(student0).getMandatoryCredits();
      doReturn(")M#7Umx5]$yQH").when(student0).getMaritalStatus();
      doReturn((-1.0)).when(student0).getMc();
      doReturn(0).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn((String) null).when(student0).getStatusStr();
      doReturn((String) null).when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(205).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((-1688.89248356428), 1243.1543047284044, (double)1, (double)1).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(970, 1355, 205, 205).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(2208).when(curriculum1).getMinNumberOfTerms();
      Curriculum curriculum2 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum2).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.886232233982)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum2).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 0, 0).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("^").when(student0).getName();
      doReturn((-2775)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getMc();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(0, 0).when(curriculum0).getMaxNumberOfTerms();
      doReturn(0.0, 0.0, 0.0, 0.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(0, 0, 0, 0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-70.809)).when(student0).getAdmissionGrade();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getAdmissionStr();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getAdmissionTerm();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getAffirmativePolicy();
      doReturn(6, 6).when(student0).getAttemptedCredits();
      doReturn(1456).when(student0).getComplementaryCredits();
      doReturn(356).when(student0).getCompletedCredits();
      doReturn((-184), 1456).when(student0).getCompletedTerms();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getCurriculumCode();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getGender();
      doReturn(511.6).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn(0, 356, (-1668)).when(student0).getInstitutionalEnrollments();
      doReturn(1077).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn((double)1077).when(student0).getMc();
      doReturn(1077).when(student0).getMobilityTerms();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getName();
      doReturn(6).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getStatusStr();
      doReturn("Eg6rP;?Ymg'!j*wf}Pt").when(student0).getStatusTerm();
      doReturn(1456).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("xz,_Y.cN(s0)aZm").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1).when(curriculum1).getMaxNumberOfTerms();
      doReturn(125, 0, 2140, (-1699), (-4349)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(4.0).when(student0).getAdmissionGrade();
      doReturn("xz,_Y.cN(s0)aZm").when(student0).getAdmissionStr();
      doReturn(")M#7Umx5]$yQH").when(student0).getAdmissionTerm();
      doReturn(")M#7Umx5]$yQH").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-943), 0).when(student0).getCompletedTerms();
      doReturn(")M#7Umx5]$yQH").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn(",K;%K]Xa<s]Jy=Gt&").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((-2625.4342308204655)).when(student0).getGpa();
      doReturn((-1066.85454)).when(student0).getIea();
      doReturn((-943), (-179), 0).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn(")M#7Umx5]$yQH").when(student0).getMaritalStatus();
      doReturn((-1.0)).when(student0).getMc();
      doReturn(0).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn((String) null).when(student0).getStatusStr();
      doReturn((String) null).when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getMandatoryCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("1+H3^D1TDHl|q").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(911.0).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("3p;0[O0T0t").when(student0).getAffirmativePolicy();
      doReturn((-853), (-853)).when(student0).getAttemptedCredits();
      doReturn((-853)).when(student0).getComplementaryCredits();
      doReturn((-853)).when(student0).getCompletedCredits();
      doReturn((-853), (-853)).when(student0).getCompletedTerms();
      doReturn("1+H3^D1TDHl|q").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn("1+H3^D1TDHl|q").when(student0).getGender();
      doReturn(0.0).when(student0).getGpa();
      doReturn((-150.81217085698)).when(student0).getIea();
      doReturn((-853), (-853), 1099).when(student0).getInstitutionalEnrollments();
      doReturn((-853)).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn((-224.3758667406)).when(student0).getMc();
      doReturn((-853)).when(student0).getMobilityTerms();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV").when(student0).getName();
      doReturn((-853)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("3p;0[O0T0t").when(student0).getStatusTerm();
      doReturn(428).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(11, 1812).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1329), 0, 11, (-1329), 216).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)0).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn(0, 0, 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn((-1.680130172936356)).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getInstitutionalEnrollments();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(1, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("t+\"[ICR>d").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getIea();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("O").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(1, (-1402)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("O").when(student0).getAdmissionStr();
      doReturn("O").when(student0).getAdmissionTerm();
      doReturn("O").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(11).when(student0).getComplementaryCredits();
      doReturn(11).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("O").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getIea();
      assertEquals(11.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("?|?9-v1").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(0, 0).when(curriculum0).getMaxNumberOfTerms();
      doReturn(0.0, 0.0, 0.0, 0.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(0, 0, 0, 0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(4.0).when(student0).getAdmissionGrade();
      doReturn("?|?9-v1").when(student0).getAdmissionStr();
      doReturn("c").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn((-1)).when(student0).getComplementaryCredits();
      doReturn(1).when(student0).getCompletedCredits();
      doReturn(8, (-1)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("?|?9-v1").when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((-1527.0795346184382)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn(782, 8, 1).when(student0).getInstitutionalEnrollments();
      doReturn((-1)).when(student0).getMandatoryCredits();
      doReturn("J2F7").when(student0).getMaritalStatus();
      doReturn((double)8).when(student0).getMc();
      doReturn((-1)).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn(1419).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("J2F7").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(8).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.886232233982)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, (-15), (-15)).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn((String) null).when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("^").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn((String) null).when(student0).getStatusStr();
      doReturn((String) null).when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getGender();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0, 0, 0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn((-46)).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-46), (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)(-46)).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn((-46), (-46), 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getGender();
      assertEquals("d|&T&=UpsixY,", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("8pZ#sS").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfTerms();
      doReturn(0.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("hD\":.QJN").when(student0).getAdmissionTerm();
      doReturn("8pZ#sS").when(student0).getAffirmativePolicy();
      doReturn(9, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(8, 11).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("hD\":.QJN").when(student0).getGender();
      doReturn((double)0).when(student0).getGpa();
      doReturn((double)9).when(student0).getIea();
      doReturn((-1814), 1770, 11).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("8pZ#sS").when(student0).getMaritalStatus();
      doReturn((double)(-1814)).when(student0).getMc();
      doReturn(0).when(student0).getMobilityTerms();
      doReturn("8pZ#sS").when(student0).getName();
      doReturn(9).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("%f)Z>BY7F6%HaM*cC^").when(student0).getStatusTerm();
      doReturn(11).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(1).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(2758).when(curriculum0).getMaxNumberOfTerms();
      doReturn(245.2571362257213).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(223).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1037.08141150181).when(student0).getAdmissionGrade();
      doReturn("*[fon<zdQ/N\"M?fvy'").when(student0).getAdmissionStr();
      doReturn("Curriculum{courseCode='").when(student0).getAdmissionTerm();
      doReturn("!_{:U^4IU}$Cg").when(student0).getAffirmativePolicy();
      doReturn(1, 0).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, 1).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn(1037.08141150181).when(student0).getGpa();
      doReturn(514.4904009813552).when(student0).getIea();
      doReturn(1, 0, 1).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("Curriculum{courseCode='").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(125).when(student0).getMobilityTerms();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV").when(student0).getName();
      doReturn((-765)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn((String) null).when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn((-765)).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getFeasibility();
      assertEquals(0.08895797469195549, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(525).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(522).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(13).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2023), (-3560)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(3900, 0, 13, 525, (-280)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-0.8155735545660525)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(525, 0).when(student0).getAttemptedCredits();
      doReturn(1503).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(525, 525).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getCurriculumCode();
      doReturn("+zWbxid7{p*G*").when(student0).getGender();
      doReturn(759.9740337939055).when(student0).getGpa();
      doReturn((double)525).when(student0).getIea();
      doReturn(522, 2, 1949).when(student0).getInstitutionalEnrollments();
      doReturn(525).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn((double)13).when(student0).getMc();
      doReturn((-3560)).when(student0).getMobilityTerms();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getName();
      doReturn((-3560)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("<uiiH!:6E>*E").when(student0).getStatusStr();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics").when(student0).getStatusTerm();
      doReturn((-3560)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setEntryGrade(0);
      double double0 = studentCSV0.getEntryGrade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getEntryGrade();
      assertEquals((-183.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(curriculum1).getMaxNumberOfTerms();
      doReturn(11, 954).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setElectiveCredits(0);
      int int0 = studentCSV0.getElectiveCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(1, (-1402)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(11).when(student0).getComplementaryCredits();
      doReturn(11).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setElectiveCredits(4);
      int int0 = studentCSV0.getElectiveCredits();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-1802)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0, 0, 0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn((-10), (-10)).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn((-10)).when(student0).getCompletedCredits();
      doReturn(0, (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)0).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn(0, 0, 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn((-10)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getCurriculumCode();
      assertEquals("_r2lD^WB:~'Hij", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("t+\"[ICR>d").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("?|?9-v1").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(8).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(1, 1).when(curriculum0).getMaxNumberOfTerms();
      doReturn(1.0, (double)1, (double)3, 4.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(1, 0, 0, (-3443)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-994)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(3, (-3443)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(4.0).when(student0).getAdmissionGrade();
      doReturn("?|?9-v1").when(student0).getAdmissionStr();
      doReturn("c").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn((-1)).when(student0).getComplementaryCredits();
      doReturn(1).when(student0).getCompletedCredits();
      doReturn(8, (-1)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("?|?9-v1").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((-1527.0795346184382)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn(782, 8, 1).when(student0).getInstitutionalEnrollments();
      doReturn((-1)).when(student0).getMandatoryCredits();
      doReturn("J2F7").when(student0).getMaritalStatus();
      doReturn((double)8).when(student0).getMc();
      doReturn((-1)).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn(1419).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("J2F7").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(8).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getCourseDurationPrediction();
      assertEquals(24.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("}").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(729.899775475).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn("}").when(student0).getAdmissionTerm();
      doReturn("}").when(student0).getAffirmativePolicy();
      doReturn((-1), (-1)).when(student0).getAttemptedCredits();
      doReturn((-1)).when(student0).getComplementaryCredits();
      doReturn(1).when(student0).getCompletedCredits();
      doReturn(1, (-1)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("JCY1+]yVZvCi&").when(student0).getGender();
      doReturn((double)1).when(student0).getGpa();
      doReturn(3.0).when(student0).getIea();
      doReturn(8, (-1), (-4773)).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("}").when(student0).getMaritalStatus();
      doReturn((-397.994)).when(student0).getMc();
      doReturn((-1)).when(student0).getMobilityTerms();
      doReturn((String) null).when(student0).getName();
      doReturn(8).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("gGk@O").when(student0).getStatusTerm();
      doReturn((-1)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0, 0, 0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)0).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn(0, 0, 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setCostClass((CostClass) null);
      studentCSV0.getCostClass();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(0, 0).when(curriculum0).getMaxNumberOfTerms();
      doReturn(0.0, 0.0, 0.0, 0.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn((-817), 0, 0, 0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-580), 954).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(732).when(student0).getComplementaryCredits();
      doReturn(732).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, 0).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn(0).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getCost();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("xz,_Y.cN(s0)aZm").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(891).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-179)).when(curriculum1).getMinNumberOfTerms();
      Curriculum curriculum2 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum2).getMaxNumberOfTerms();
      doReturn(1927, 0, (-3012), 1).when(curriculum2).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(4.0).when(student0).getAdmissionGrade();
      doReturn("xz,_Y.cN(s0)aZm").when(student0).getAdmissionStr();
      doReturn(")M#7Umx5]$yQH").when(student0).getAdmissionTerm();
      doReturn(")M#7Umx5]$yQH").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn((-3012)).when(student0).getCompletedCredits();
      doReturn((-943), (-3012)).when(student0).getCompletedTerms();
      doReturn(")M#7Umx5]$yQH").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum2).when(student0).getCurriculum();
      doReturn(",K;%K]Xa<s]Jy=Gt&").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((-2625.4342308204655)).when(student0).getGpa();
      doReturn((-1066.85454)).when(student0).getIea();
      doReturn((-943), (-179), 0).when(student0).getInstitutionalEnrollments();
      doReturn((-3012)).when(student0).getMandatoryCredits();
      doReturn(")M#7Umx5]$yQH").when(student0).getMaritalStatus();
      doReturn((-1.0)).when(student0).getMc();
      doReturn(0).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn((String) null).when(student0).getStatusStr();
      doReturn((String) null).when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setCost(879);
      double double0 = studentCSV0.getCost();
      assertEquals(879.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(11, 1812).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1329), 0, 11, 3486, 216).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)0).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn(0, 0, 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getCompletedTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(1, (-1402)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(11).when(student0).getComplementaryCredits();
      doReturn(11).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getCompletedTerms();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2092)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-1744), 6).when(curriculum1).getMaxNumberOfTerms();
      doReturn(1037, 0, 0, (-1936), 1037).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("Am`8;zROhO+(").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 1037).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)6).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2124.2891412343765)).when(student0).getMc();
      doReturn(30).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(30).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(1037).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getComplementaryCredits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-989)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(642, 1377).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("t+\"[ICR>d").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getComplementaryCredits();
      assertEquals((-989), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(11, 1812).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1329), 0, 11, 3486, 216).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)0).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn(0, 0, 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setAverageLoad(0);
      double double0 = studentCSV0.getAverageLoad();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1384.1993556923544).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("OF4jB5YUlOU1PS6E").when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn((-1992)).when(student0).getCompletedCredits();
      doReturn(1, (-1992)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn(0.0).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn(1, 1, 495).when(student0).getInstitutionalEnrollments();
      doReturn(351).when(student0).getMandatoryCredits();
      doReturn("V`UyJt").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn(439).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(3).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn("I}l").when(student0).getAffirmativePolicy();
      doReturn((-352), (-352)).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn((-352)).when(student0).getCompletedCredits();
      doReturn((-352), (-2108)).when(student0).getCompletedTerms();
      doReturn("!}eT`Q9nkdR</5").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum1, (Curriculum) null).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn("!}eT`Q9nkdR</5").when(student0).getGender();
      doReturn(24.7).when(student0).getGpa();
      doReturn((double)(-2108)).when(student0).getIea();
      doReturn((-2108), (-2108), 0).when(student0).getInstitutionalEnrollments();
      doReturn(392).when(student0).getMandatoryCredits();
      doReturn("+2PiY4bp").when(student0).getMaritalStatus();
      doReturn(24.7).when(student0).getMc();
      doReturn(392).when(student0).getMobilityTerms();
      doReturn("+2PiY4bp").when(student0).getName();
      doReturn((-2108)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("I}l").when(student0).getStatusTerm();
      doReturn(392).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-877)).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(995).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(3334, (-850)).when(curriculum0).getMaxNumberOfTerms();
      doReturn((-1.0), (-1.0), 0.0, (double)3334).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(1, (-696), 995, 8).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-698)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(3, 1589).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(2013.5678949365401).when(student0).getAdmissionGrade();
      doReturn(", suspendedTerms=").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("LV&\"'rQ").when(student0).getAffirmativePolicy();
      doReturn(995, 995).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(1).when(student0).getCompletedCredits();
      doReturn(1, 3334).when(student0).getCompletedTerms();
      doReturn("ZQD|~ou:|9=|").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("ZQD|~ou:|9=|").when(student0).getCurriculumCode();
      doReturn("ZQD|~ou:|9=|").when(student0).getGender();
      doReturn(2013.5678949365401).when(student0).getGpa();
      doReturn(2013.5678949365401).when(student0).getIea();
      doReturn(3, 3334, 1).when(student0).getInstitutionalEnrollments();
      doReturn(995).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn(396.0).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn(995).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn(", suspendedTerms=").when(student0).getStatusStr();
      doReturn("I;/q7_").when(student0).getStatusTerm();
      doReturn(995).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getAffirmativePolicy();
      assertEquals("LV&\"'rQ", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("t+\"[ICR>d").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getAffirmativePolicy();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(1, (-1402)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(11).when(student0).getComplementaryCredits();
      doReturn(11).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getAdmissionType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0, 0, 0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-2107.0158)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("A1zcJ,B1t").when(student0).getAdmissionTerm();
      doReturn("_r2lD^WB:~'Hij").when(student0).getAffirmativePolicy();
      doReturn(0, 0).when(student0).getAttemptedCredits();
      doReturn((-46)).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-46), (-1329)).when(student0).getCompletedTerms();
      doReturn("A1zcJ,B1t").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("_r2lD^WB:~'Hij").when(student0).getCurriculumCode();
      doReturn("d|&T&=UpsixY,").when(student0).getGender();
      doReturn((double)(-46)).when(student0).getGpa();
      doReturn(4.0).when(student0).getIea();
      doReturn((-46), (-46), 11).when(student0).getInstitutionalEnrollments();
      doReturn(11).when(student0).getMandatoryCredits();
      doReturn("_r2lD^WB:~'Hij").when(student0).getMaritalStatus();
      doReturn(0.0).when(student0).getMc();
      doReturn((-1329)).when(student0).getMobilityTerms();
      doReturn("d|&T&=UpsixY,").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("d|&T&=UpsixY,").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getAdmissionTerm();
      assertEquals("A1zcJ,B1t", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(525).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(522).when(curriculum0).getMaxNumberOfTerms();
      doReturn(3215.5808899671).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(8).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-3068), (-1)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(8, 1, 0, 1503, (-1241)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(student0).getAdmissionGrade();
      doReturn("ADEQUATE").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(525, 0).when(student0).getAttemptedCredits();
      doReturn(1503).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(525, 525).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getCurriculumCode();
      doReturn("+zWbxid7{p*G*").when(student0).getGender();
      doReturn(768.123538863616).when(student0).getGpa();
      doReturn((double)525).when(student0).getIea();
      doReturn((-1369), 2, 1949).when(student0).getInstitutionalEnrollments();
      doReturn(525).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn((-746.7986359696843)).when(student0).getMc();
      doReturn((-3560)).when(student0).getMobilityTerms();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getName();
      doReturn((-3560)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("<uiiH!:6E>*E").when(student0).getStatusStr();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics").when(student0).getStatusTerm();
      doReturn((-3560)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getAdmissionTerm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn((double)(-989)).when(student0).getIea();
      doReturn((-989), (-4), 2).when(student0).getInstitutionalEnrollments();
      doReturn((-4)).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)(-4)).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn((-4)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("t+\"[ICR>d").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setComplementaryCredits(1452);
      int int0 = studentCSV0.computeCompletedCredits();
      assertEquals(1452, studentCSV0.getComplementaryCredits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn(", idealComplementaryCreditsList=").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(student0).getAdmissionGrade();
      doReturn("1H8R89Ka7").when(student0).getAdmissionStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getAdmissionTerm();
      doReturn(", idealComplementaryCreditsList=").when(student0).getAffirmativePolicy();
      doReturn(0, 11).when(student0).getAttemptedCredits();
      doReturn(1473).when(student0).getComplementaryCredits();
      doReturn(8).when(student0).getCompletedCredits();
      doReturn(2357, (-4831)).when(student0).getCompletedTerms();
      doReturn("1H8R89Ka7").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("1H8R89Ka7").when(student0).getCurriculumCode();
      doReturn("1H8R89Ka7").when(student0).getGender();
      doReturn((double)8).when(student0).getGpa();
      doReturn((double)1473).when(student0).getIea();
      doReturn(8, 8, (-1286)).when(student0).getInstitutionalEnrollments();
      doReturn(1473).when(student0).getMandatoryCredits();
      doReturn("1H8R89Ka7").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(984).when(student0).getMobilityTerms();
      doReturn("").when(student0).getName();
      doReturn((-4166)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(1473).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 0).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(0).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getElectiveCredits();
      assertEquals((-1402), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2092)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, 8).when(curriculum1).getMaxNumberOfTerms();
      doReturn(0, 8, 717, 717, (-1316)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("Am`8;zROhO+(").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 1037).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn(2048.17269).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2165.2790780329)).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(1037).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getRegistration();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn((double)(-989)).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setComplementaryCredits(1452);
      int int0 = studentCSV0.computeCompletedCredits();
      assertEquals(1452, studentCSV0.getComplementaryCredits());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(1).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((-1688.89248356428), 1243.1543047284044, (double)1, (double)1).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(970, 1355, 1, 1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(2208).when(curriculum1).getMinNumberOfTerms();
      Curriculum curriculum2 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum2).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.886232233982)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum2).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 0, 0).when(student0).getInstitutionalEnrollments();
      doReturn(1355).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)1355).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("^").when(student0).getName();
      doReturn((-2775)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setSuccessRate((-2542.918034492721));
      assertEquals((-2542.918034492721), studentCSV0.getSuccessRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn((double)(-989)).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getCourseDurationPrediction();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-580), 954).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(732).when(student0).getComplementaryCredits();
      doReturn(732).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getInstitutionalEnrollments();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn((double)(-989)).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getCost();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn((double)(-989)).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setAdmissionTerm("");
      assertEquals("&Yw]yA6_H", studentCSV0.getStatusTerm());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 2).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getStatusStr();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-580), 954).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(732).when(student0).getComplementaryCredits();
      doReturn(732).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getSuspendedTerms();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(525).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(1503).when(curriculum0).getMaxNumberOfTerms();
      doReturn(3215.5808899671).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(13).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2023), (-3560)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(3900, 125, (-1348), 525, (-280)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-0.8155735545660525)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(525, (-968)).when(student0).getAttemptedCredits();
      doReturn(1503).when(student0).getComplementaryCredits();
      doReturn((-968)).when(student0).getCompletedCredits();
      doReturn(525, 525).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getCurriculumCode();
      doReturn("+zWbxid7{p*G*").when(student0).getGender();
      doReturn(759.9740337939055).when(student0).getGpa();
      doReturn((double)525).when(student0).getIea();
      doReturn((-1348), 2, 1949).when(student0).getInstitutionalEnrollments();
      doReturn(525).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn((double)13).when(student0).getMc();
      doReturn((-3560)).when(student0).getMobilityTerms();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getName();
      doReturn((-3560)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("<uiiH!:6E>*E").when(student0).getStatusStr();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics").when(student0).getStatusTerm();
      doReturn((-3560)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setMandatoryCredits((-2096));
      assertEquals((-5648), studentCSV0.computeCompletedCredits());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(525).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(1503).when(curriculum0).getMaxNumberOfTerms();
      doReturn(3215.5808899671).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(13).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2023), (-3560)).when(curriculum1).getMaxNumberOfTerms();
      doReturn(3900, 125, (-1348), 525, (-280)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-0.8155735545660525)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(525, (-968)).when(student0).getAttemptedCredits();
      doReturn(1503).when(student0).getComplementaryCredits();
      doReturn((-968)).when(student0).getCompletedCredits();
      doReturn(525, 525).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getCurriculumCode();
      doReturn("+zWbxid7{p*G*").when(student0).getGender();
      doReturn(759.9740337939055).when(student0).getGpa();
      doReturn((double)525).when(student0).getIea();
      doReturn((-1348), 2, 1949).when(student0).getInstitutionalEnrollments();
      doReturn(525).when(student0).getMandatoryCredits();
      doReturn("").when(student0).getMaritalStatus();
      doReturn((double)13).when(student0).getMc();
      doReturn((-3560)).when(student0).getMobilityTerms();
      doReturn("d7Z`2+)L' \"w'd(").when(student0).getName();
      doReturn((-3560)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("<uiiH!:6E>*E").when(student0).getStatusStr();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentMetrics").when(student0).getStatusTerm();
      doReturn((-3560)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getSuccessRate();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.8862)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 27, 27).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("fd{").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setCourseCode("A");
      assertNull(studentCSV0.getCurriculumCode());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("KiBOrKpzd").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2092)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1037, 8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1713), 1, 8, (-1015), (-1015)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("Am`8;zROhO+(").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 1037).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("KiBOrKpzd").when(student0).getCurriculumCode();
      doReturn("KiBOrKpzd").when(student0).getGender();
      doReturn((double)6).when(student0).getGpa();
      doReturn(1190.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2124.2891412343765)).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(1037).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getAffirmativePolicy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.8862)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 27, 27).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("fd{").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getCurriculumCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 2).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setPace((-1113.51430074));
      assertEquals((-1113.51430074), studentCSV0.getPace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("KiBOrKpzd").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2092)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, 8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1713), 1, 8, (-1015), (-1015)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("Am`8;zROhO+(").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 0).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("KiBOrKpzd").when(student0).getCurriculumCode();
      doReturn("KiBOrKpzd").when(student0).getGender();
      doReturn((double)6).when(student0).getGpa();
      doReturn(1190.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2124.2891412343765)).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getMaritalStatus();
      assertEquals("\":", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.8862)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 27, 27).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("fd{").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setIea((-1747.8862));
      assertEquals((-1747.8862), studentCSV0.getIea(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn((double)(-989)).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.computeCompletedCredits();
      assertEquals((-987), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.8862)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 27, 27).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("fd{").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getPace();
      assertEquals(0.947265625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.8862)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 27, 27).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("fd{").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getGpa();
      assertEquals(970.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 2).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(0).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setStatusTerm("");
      assertEquals(1, studentCSV0.getMandatoryCredits());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("KiBOrKpzd").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2092)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1037, 8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1713), 1, 8, (-1015), (-1015)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("Am`8;zROhO+(").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 1037).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("KiBOrKpzd").when(student0).getCurriculumCode();
      doReturn("KiBOrKpzd").when(student0).getGender();
      doReturn((double)6).when(student0).getGpa();
      doReturn(1190.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2124.2891412343765)).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(1037).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      double double0 = studentCSV0.getEntryGrade();
      assertEquals(394.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(1).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((-1688.89248356428), 1243.1543047284044, (double)1, (double)1).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(970, 1355, 1, 1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum1).getMaxNumberOfTerms();
      doReturn(2208).when(curriculum1).getMinNumberOfTerms();
      Curriculum curriculum2 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum2).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.886232233982)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum2).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 0, 0).when(student0).getInstitutionalEnrollments();
      doReturn(1355).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)1355).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("^").when(student0).getName();
      doReturn((-2775)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      CostClass costClass0 = studentCSV0.getCostClass();
      assertEquals(CostClass.UNACCEPTABLE, costClass0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("KiBOrKpzd").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2092)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1037, 8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1713), 1, 8, (-1015), (-1015)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("Am`8;zROhO+(").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 1037).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("KiBOrKpzd").when(student0).getCurriculumCode();
      doReturn("KiBOrKpzd").when(student0).getGender();
      doReturn((double)6).when(student0).getGpa();
      doReturn(1190.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2124.2891412343765)).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(1037).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      int int0 = studentCSV0.getCompletedTerms();
      assertEquals((-2092), int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-817)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-580), 954).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-183.7)).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn(733, 11).when(student0).getAttemptedCredits();
      doReturn(732).when(student0).getComplementaryCredits();
      doReturn(732).when(student0).getCompletedCredits();
      doReturn(4, 11).when(student0).getCompletedTerms();
      doReturn("6>").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("6>").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)4).when(student0).getGpa();
      doReturn((double)11).when(student0).getIea();
      doReturn(1, 11, (-1402)).when(student0).getInstitutionalEnrollments();
      doReturn(733).when(student0).getMandatoryCredits();
      doReturn("6>").when(student0).getMaritalStatus();
      doReturn((-746.76738907956)).when(student0).getMc();
      doReturn((-1402)).when(student0).getMobilityTerms();
      doReturn("-xQ_K").when(student0).getName();
      doReturn((-1402)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setAttemptedCredits(0);
      double double0 = studentCSV0.getAttemptedCredits();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("0&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 642, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("0&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn(0.0).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("0&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("0&cu/.s").when(student0).getName();
      doReturn(15).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("0&cu/.s").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getGender();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(0).when(curriculum0).getMaxNumberOfTerms();
      doReturn(0.0).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(0).when(curriculum0).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1037.08141150181).when(student0).getAdmissionGrade();
      doReturn("*[fon<zdQ/N\"M?fvy'").when(student0).getAdmissionStr();
      doReturn("Curriculum{courseCode='").when(student0).getAdmissionTerm();
      doReturn("!_{:U^4IU}$Cg").when(student0).getAffirmativePolicy();
      doReturn(1, 0).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn(0, 1).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, (Curriculum) null).when(student0).getCurriculum();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn(1037.08141150181).when(student0).getGpa();
      doReturn(514.4904009813552).when(student0).getIea();
      doReturn(1, 0, 1).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("Curriculum{courseCode='").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(125).when(student0).getMobilityTerms();
      doReturn("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV").when(student0).getName();
      doReturn((-765)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn((String) null).when(student0).getStatusStr();
      doReturn("").when(student0).getStatusTerm();
      doReturn((-765)).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = null;
      try {
        studentCSV0 = new StudentCSV(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.edu.ufcg.computacao.eureca.backend.api.http.response.students.StudentCSV", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("&cu/.s").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3111)).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-3111), 871, (-3111), (-748), 8).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(student0).getAdmissionGrade();
      doReturn("").when(student0).getAdmissionStr();
      doReturn("&cu/.s").when(student0).getAdmissionTerm();
      doReturn("").when(student0).getAffirmativePolicy();
      doReturn((-989), (-989)).when(student0).getAttemptedCredits();
      doReturn((-989)).when(student0).getComplementaryCredits();
      doReturn((-989)).when(student0).getCompletedCredits();
      doReturn((-989), (-989)).when(student0).getCompletedTerms();
      doReturn("").when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("").when(student0).getCurriculumCode();
      doReturn("").when(student0).getGender();
      doReturn((double)(-989)).when(student0).getGpa();
      doReturn((double)(-989)).when(student0).getIea();
      doReturn((-989), 1, 2).when(student0).getInstitutionalEnrollments();
      doReturn(1).when(student0).getMandatoryCredits();
      doReturn("&cu/.s").when(student0).getMaritalStatus();
      doReturn((double)1).when(student0).getMc();
      doReturn((-989)).when(student0).getMobilityTerms();
      doReturn("&cu/.s").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("").when(student0).getStatusStr();
      doReturn("&Yw]yA6_H").when(student0).getStatusTerm();
      doReturn((-989)).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getName();
      assertEquals("&cu/.s", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.8862)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 27, 27).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("fd{").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setGpa(0.0);
      assertEquals(0.0, studentCSV0.getGpa(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn("KiBOrKpzd").when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn((-2092)).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(1053, 8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-1713), 1, 8, (-1016), (-1016)).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn(394.7).when(student0).getAdmissionGrade();
      doReturn("KiBOrKpzd").when(student0).getAdmissionStr();
      doReturn("\":").when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(1, 1).when(student0).getAttemptedCredits();
      doReturn(1).when(student0).getComplementaryCredits();
      doReturn(0).when(student0).getCompletedCredits();
      doReturn((-2092), 1053).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn("KiBOrKpzd").when(student0).getCurriculumCode();
      doReturn("KiBOrKpzd").when(student0).getGender();
      doReturn((double)6).when(student0).getGpa();
      doReturn(1190.0).when(student0).getIea();
      doReturn(8, (-2092), (-2092)).when(student0).getInstitutionalEnrollments();
      doReturn((-2092)).when(student0).getMandatoryCredits();
      doReturn("\":").when(student0).getMaritalStatus();
      doReturn((-2124.2891412343765)).when(student0).getMc();
      doReturn(1).when(student0).getMobilityTerms();
      doReturn("\":").when(student0).getName();
      doReturn(1).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("MS4Fmp8B;S*$T*u").when(student0).getStatusStr();
      doReturn(", idealComplementaryCreditsList=").when(student0).getStatusTerm();
      doReturn(1053).when(student0).getSuspendedTerms();
      doReturn(true).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      studentCSV0.setComplementaryCredits(8);
      int int0 = studentCSV0.computeCompletedCredits();
      assertEquals(8, studentCSV0.getComplementaryCredits());
      assertEquals((-2083), int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Registration registration0 = mock(Registration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(registration0).toString();
      Curriculum curriculum0 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(970).when(curriculum0).getExceptionalAdditionalEnrolledCredits();
      doReturn(970).when(curriculum0).getMaxNumberOfEnrolledCredits();
      doReturn(970, 970).when(curriculum0).getMaxNumberOfTerms();
      doReturn((double)970, (double)970, 2472.0, 1909.104228378).when(curriculum0).getMinNumberOfCreditsNeeded();
      doReturn(839, (-1), 8, 970).when(curriculum0).getMinNumberOfTerms();
      Curriculum curriculum1 = mock(Curriculum.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(curriculum1).getMaxNumberOfTerms();
      doReturn((-2814), 2204).when(curriculum1).getMinNumberOfTerms();
      Student student0 = mock(Student.class, new ViolatedAssumptionAnswer());
      doReturn((-1747.8862)).when(student0).getAdmissionGrade();
      doReturn((String) null).when(student0).getAdmissionStr();
      doReturn((String) null).when(student0).getAdmissionTerm();
      doReturn((String) null).when(student0).getAffirmativePolicy();
      doReturn(970, 970).when(student0).getAttemptedCredits();
      doReturn(970).when(student0).getComplementaryCredits();
      doReturn(970).when(student0).getCompletedCredits();
      doReturn(970, 970).when(student0).getCompletedTerms();
      doReturn((String) null).when(student0).getCourseCode();
      doReturn(curriculum0, curriculum0, curriculum1, curriculum1, curriculum1).when(student0).getCurriculum();
      doReturn((String) null).when(student0).getCurriculumCode();
      doReturn((String) null).when(student0).getGender();
      doReturn((double)970).when(student0).getGpa();
      doReturn((double)970).when(student0).getIea();
      doReturn(970, 27, 27).when(student0).getInstitutionalEnrollments();
      doReturn(0).when(student0).getMandatoryCredits();
      doReturn("wyYMM~j1q").when(student0).getMaritalStatus();
      doReturn((double)0).when(student0).getMc();
      doReturn(970).when(student0).getMobilityTerms();
      doReturn("fd{").when(student0).getName();
      doReturn((-2814)).when(student0).getOptionalCredits();
      doReturn(registration0).when(student0).getRegistration();
      doReturn("wyYMM~j1q").when(student0).getStatusStr();
      doReturn("wyYMM~j1q").when(student0).getStatusTerm();
      doReturn(0).when(student0).getSuspendedTerms();
      doReturn(false).when(student0).isActive();
      StudentCSV studentCSV0 = new StudentCSV(student0);
      String string0 = studentCSV0.getAdmissionTerm();
      assertNull(string0);
  }
}
